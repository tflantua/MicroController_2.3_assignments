
SecuritySystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ae2  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000ae2  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000ae2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000230  00000000  00000000  00000b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ed9  00000000  00000000  00000d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f6a  00000000  00000000  00003c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001038  00000000  00000000  00004b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004c0  00000000  00000000  00005bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ea  00000000  00000000  0000607c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008ca  00000000  00000000  00006466  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  00006d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000009c4  000009c4  00000ad8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.Eight7seg_displayOn 0000001a  000008a4  000008a4  000009b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Eight7seg_displayOff 0000001a  000008be  000008be  000009d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.Eight7seg_blink 0000003a  000006c0  000006c0  000007d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.Eight7seg_writeToDisplay 00000030  00000732  00000732  00000846  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.Eight7seg_reset 00000020  000007d2  000007d2  000008e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.Eight7seg_Init 0000005c  000003ca  000003ca  000004de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.adc_init 0000000e  00000978  00000978  00000a8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.adc_deinit 00000008  000009a6  000009a6  00000aba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.ADCLaserIO_start 00000046  00000570  00000570  00000684  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.ADCLaserIO_stop 0000000c  00000986  00000986  00000a9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__vector_21 0000008c  000002c4  000002c4  000003d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__vector_16 00000014  00000952  00000952  00000a66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .bss.callback 00000002  0080010e  0080010e  00000ae2  2**0
                  ALLOC
 27 .text.Buzzert_start 0000000a  00000992  00000992  00000aa6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.Buzzert_stop 00000006  000009be  000009be  00000ad2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.Keypad_reset 0000001e  00000812  00000812  00000926  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.Keypad_unlock 0000007a  00000350  00000350  00000464  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.Keypad_rotate 000000a0  00000224  00000224  00000338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.Keypad_init 00000020  000007f2  000007f2  00000906  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.Keypad_checkKey 00000058  00000426  00000426  0000053a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .bss.locked   00000002  00800110  00800110  00000ae2  2**0
                  ALLOC
 35 .bss.inputIndex 00000002  00800112  00800112  00000ae2  2**0
                  ALLOC
 36 .data.side    00000002  00800114  000009cc  00000ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 37 .bss.currentNumber 00000002  00800116  00800116  00000ae2  2**0
                  ALLOC
 38 .bss.inputcode 00000008  00800102  00800102  00000ae2  2**0
                  ALLOC
 39 .progmemx.data.passcode 00000008  00000137  00000137  0000024b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .bss.wrongCode_callback 00000002  00800118  00800118  00000ae2  2**0
                  ALLOC
 41 .bss.unlocked_callback 00000002  0080011a  0080011a  00000ae2  2**0
                  ALLOC
 42 .bss.locked_callback 00000002  0080011c  0080011c  00000ae2  2**0
                  ALLOC
 43 .text.lcd_strobe_lcd_e 0000001e  00000830  00000830  00000944  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.init_4bits_mode 00000042  00000640  00000640  00000754  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.lcd_write_data 00000024  0000078a  0000078a  0000089e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.display_text 0000001a  000008d8  000008d8  000009ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.lcd_write_command 00000024  000007ae  000007ae  000008c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.lcd_clear 0000001a  000008f2  000008f2  00000a06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.lcd_init 0000001c  0000086c  0000086c  00000980  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .progmemx.data 00000035  00000102  00000102  00000216  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 51 .text.main_lcd_wrongCode 00000046  000005b6  000005b6  000006ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.main_alarm 00000044  000005fc  000005fc  00000710  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.main_laserCallback 00000052  0000047e  0000047e  00000592  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.main_lcd_locked 00000052  000004d0  000004d0  000005e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.main_start_laser 0000000a  0000099c  0000099c  00000ab0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.main_lcd_unlocked 0000004e  00000522  00000522  00000636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.main    00000038  000006fa  000006fa  0000080e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.spi_masterInit 00000018  0000090c  0000090c  00000a20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.spi_write 00000008  000009ae  000009ae  00000ac2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.spi_slaveSelect 00000018  00000924  00000924  00000a38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.spi_slaveDeSelect 00000016  0000093c  0000093c  00000a50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.Timer_init 0000003e  00000682  00000682  00000796  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.Timer_deInit 00000008  000009b6  000009b6  00000aca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.__vector_9 000000e4  00000140  00000140  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .bss.alarmCallback 00000002  0080011e  0080011e  00000ae2  2**0
                  ALLOC
 66 .data.remainingTime 00000004  0080010a  000009c8  00000adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 67 .text.waitFunction 0000001e  0000084e  0000084e  00000962  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.libgcc.div 00000028  00000762  00000762  00000876  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.libgcc  00000012  00000966  00000966  00000a7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.libgcc  0000001c  00000888  00000888  0000099c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
   4:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
   8:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
   c:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  10:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  14:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  18:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  1c:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  20:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_9>
  28:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  2c:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  30:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  34:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  38:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  3c:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  40:	0c 94 a9 04 	jmp	0x952	; 0x952 <__vector_16>
  44:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  48:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  4c:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  50:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  54:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_21>
  58:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  5c:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  60:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  64:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  68:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  6c:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  70:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  74:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  78:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  7c:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  80:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  84:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>
  88:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 0a       	sbc	r0, r17
  90:	80 01       	movw	r16, r0
  92:	0a 01       	movw	r0, r20
  94:	0e 00       	.word	0x000e	; ????
  96:	09 c8       	rjmp	.-4078   	; 0xfffff0aa <__eeprom_end+0xff7ef0aa>
  98:	01 0e       	add	r0, r17
  9a:	01 14       	cp	r0, r1
  9c:	80 01       	movw	r16, r0
  9e:	14 01       	movw	r2, r8
  a0:	16 00       	.word	0x0016	; ????
  a2:	09 cc       	rjmp	.-2030   	; 0xfffff8b6 <__eeprom_end+0xff7ef8b6>
  a4:	01 16       	cp	r0, r17
  a6:	01 20       	and	r0, r1
  a8:	80 00       	.word	0x0080	; ????

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d0 e1       	ldi	r29, 0x10	; 16
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	ec e8       	ldi	r30, 0x8C	; 140
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	19 c0       	rjmp	.+50     	; 0xf0 <__do_clear_bss+0x8>
  be:	b7 91       	elpm	r27, Z+
  c0:	a7 91       	elpm	r26, Z+
  c2:	37 91       	elpm	r19, Z+
  c4:	27 91       	elpm	r18, Z+
  c6:	07 91       	elpm	r16, Z+
  c8:	07 fd       	sbrc	r16, 7
  ca:	0e c0       	rjmp	.+28     	; 0xe8 <__do_clear_bss>
  cc:	97 91       	elpm	r25, Z+
  ce:	87 91       	elpm	r24, Z+
  d0:	ef 01       	movw	r28, r30
  d2:	f9 2f       	mov	r31, r25
  d4:	e8 2f       	mov	r30, r24
  d6:	0b bf       	out	0x3b, r16	; 59
  d8:	07 90       	elpm	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	a2 17       	cp	r26, r18
  de:	b3 07       	cpc	r27, r19
  e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0x22>
  e2:	fe 01       	movw	r30, r28
  e4:	1b be       	out	0x3b, r1	; 59
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <__do_clear_bss+0x8>

000000e8 <__do_clear_bss>:
  e8:	1d 92       	st	X+, r1
  ea:	a2 17       	cp	r26, r18
  ec:	b3 07       	cpc	r27, r19
  ee:	e1 f7       	brne	.-8      	; 0xe8 <__do_clear_bss>
  f0:	e9 3a       	cpi	r30, 0xA9	; 169
  f2:	f4 07       	cpc	r31, r20
  f4:	21 f7       	brne	.-56     	; 0xbe <__do_copy_data+0x8>
  f6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <main>
  fa:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>

Disassembly of section .text:

000009c4 <__bad_interrupt>:
 9c4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.Eight7seg_displayOn:

000008a4 <Eight7seg_displayOn>:
}

// Set display on ('normal operation')
void Eight7seg_displayOn()
{
	spi_slaveSelect(slaveAddress);				// Select display chip
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	0e 94 92 04 	call	0x924	; 0x924 <spi_slaveSelect>
	spi_write(0x0C); 				// Register 0B: Shutdown register
 8aa:	8c e0       	ldi	r24, 0x0C	; 12
 8ac:	0e 94 d7 04 	call	0x9ae	; 0x9ae <spi_write>
	spi_write(0x01); 				// 	-> 1 = Normal operation
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <spi_write>
	spi_slaveDeSelect(slaveAddress);			// De select display chip
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	0e 94 9e 04 	call	0x93c	; 0x93c <spi_slaveDeSelect>
 8bc:	08 95       	ret

Disassembly of section .text.Eight7seg_displayOff:

000008be <Eight7seg_displayOff>:
}

// Set display off ('shut down')
void Eight7seg_displayOff()
{
	spi_slaveSelect(slaveAddress);				// Select display chip
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	0e 94 92 04 	call	0x924	; 0x924 <spi_slaveSelect>
	spi_write(0x0C); 				// Register 0B: Shutdown register
 8c4:	8c e0       	ldi	r24, 0x0C	; 12
 8c6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <spi_write>
	spi_write(0x00); 				// 	-> 1 = Normal operation
 8ca:	80 e0       	ldi	r24, 0x00	; 0
 8cc:	0e 94 d7 04 	call	0x9ae	; 0x9ae <spi_write>
	spi_slaveDeSelect(slaveAddress);			// De select display chip
 8d0:	80 e0       	ldi	r24, 0x00	; 0
 8d2:	0e 94 9e 04 	call	0x93c	; 0x93c <spi_slaveDeSelect>
 8d6:	08 95       	ret

Disassembly of section .text.Eight7seg_blink:

000006c0 <Eight7seg_blink>:
	
	Eight7seg_displayOn();
	Eight7seg_reset();
}

void Eight7seg_blink(int times){
 6c0:	0f 93       	push	r16
 6c2:	1f 93       	push	r17
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	8c 01       	movw	r16, r24
	for (int i=0; i < times; i++)
 6ca:	c0 e0       	ldi	r28, 0x00	; 0
 6cc:	d0 e0       	ldi	r29, 0x00	; 0
 6ce:	0d c0       	rjmp	.+26     	; 0x6ea <Eight7seg_blink+0x2a>
	{
		Eight7seg_displayOff();
 6d0:	0e 94 5f 04 	call	0x8be	; 0x8be <Eight7seg_displayOff>
		waitFunction(300);
 6d4:	8c e2       	ldi	r24, 0x2C	; 44
 6d6:	91 e0       	ldi	r25, 0x01	; 1
 6d8:	0e 94 27 04 	call	0x84e	; 0x84e <waitFunction>
		Eight7seg_displayOn();
 6dc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <Eight7seg_displayOn>
		waitFunction(300);
 6e0:	8c e2       	ldi	r24, 0x2C	; 44
 6e2:	91 e0       	ldi	r25, 0x01	; 1
 6e4:	0e 94 27 04 	call	0x84e	; 0x84e <waitFunction>
	Eight7seg_displayOn();
	Eight7seg_reset();
}

void Eight7seg_blink(int times){
	for (int i=0; i < times; i++)
 6e8:	21 96       	adiw	r28, 0x01	; 1
 6ea:	c0 17       	cp	r28, r16
 6ec:	d1 07       	cpc	r29, r17
 6ee:	84 f3       	brlt	.-32     	; 0x6d0 <Eight7seg_blink+0x10>
		Eight7seg_displayOff();
		waitFunction(300);
		Eight7seg_displayOn();
		waitFunction(300);
	}
}
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	1f 91       	pop	r17
 6f6:	0f 91       	pop	r16
 6f8:	08 95       	ret

Disassembly of section .text.Eight7seg_writeToDisplay:

00000732 <Eight7seg_writeToDisplay>:
	spi_write(0x0C); 				// Register 0B: Shutdown register
	spi_write(0x00); 				// 	-> 1 = Normal operation
	spi_slaveDeSelect(slaveAddress);			// De select display chip
}

void Eight7seg_writeToDisplay(char display, char number){
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
	
	if(display < 1 || display > 8) return;
 736:	9f ef       	ldi	r25, 0xFF	; 255
 738:	98 0f       	add	r25, r24
 73a:	98 30       	cpi	r25, 0x08	; 8
 73c:	78 f4       	brcc	.+30     	; 0x75c <Eight7seg_writeToDisplay+0x2a>
 73e:	d6 2f       	mov	r29, r22
 740:	c8 2f       	mov	r28, r24
	
	spi_slaveSelect(slaveAddress); 		// Select display chip
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	0e 94 92 04 	call	0x924	; 0x924 <spi_slaveSelect>
	spi_write(9 - display);  		// 	digit address: (digit place)
 748:	89 e0       	ldi	r24, 0x09	; 9
 74a:	8c 1b       	sub	r24, r28
 74c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <spi_write>
	spi_write(number);			// 	digit value: 0
 750:	8d 2f       	mov	r24, r29
 752:	0e 94 d7 04 	call	0x9ae	; 0x9ae <spi_write>
	spi_slaveDeSelect(slaveAddress);		// Deselect display chip
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	0e 94 9e 04 	call	0x93c	; 0x93c <spi_slaveDeSelect>
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	08 95       	ret

Disassembly of section .text.Eight7seg_reset:

000007d2 <Eight7seg_reset>:
		Eight7seg_displayOn();
		waitFunction(300);
	}
}

void Eight7seg_reset(){
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
	for (int i = 1; i < 9; i++)
 7d6:	c1 e0       	ldi	r28, 0x01	; 1
 7d8:	d0 e0       	ldi	r29, 0x00	; 0
 7da:	05 c0       	rjmp	.+10     	; 0x7e6 <Eight7seg_reset+0x14>
	{
		Eight7seg_writeToDisplay(i, 10);
 7dc:	6a e0       	ldi	r22, 0x0A	; 10
 7de:	8c 2f       	mov	r24, r28
 7e0:	0e 94 99 03 	call	0x732	; 0x732 <Eight7seg_writeToDisplay>
		waitFunction(300);
	}
}

void Eight7seg_reset(){
	for (int i = 1; i < 9; i++)
 7e4:	21 96       	adiw	r28, 0x01	; 1
 7e6:	c9 30       	cpi	r28, 0x09	; 9
 7e8:	d1 05       	cpc	r29, r1
 7ea:	c4 f3       	brlt	.-16     	; 0x7dc <Eight7seg_reset+0xa>
	{
		Eight7seg_writeToDisplay(i, 10);
	}
}
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	08 95       	ret

Disassembly of section .text.Eight7seg_Init:

000003ca <Eight7seg_Init>:
#define slaveAddress 0

// Initialize the driver chip (type MAX 7219)
void Eight7seg_Init()
{
	DDRB |= 0x01;					  	// Set PB0 pin as output for display select
 3ca:	87 b3       	in	r24, 0x17	; 23
 3cc:	81 60       	ori	r24, 0x01	; 1
 3ce:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();
 3d0:	0e 94 86 04 	call	0x90c	; 0x90c <spi_masterInit>
	
	spi_slaveSelect(slaveAddress);				// Select display chip (MAX7219)
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 92 04 	call	0x924	; 0x924 <spi_slaveSelect>
	spi_write(0x09);      			// Register 09: Decode Mode
 3da:	89 e0       	ldi	r24, 0x09	; 9
 3dc:	0e 94 d7 04 	call	0x9ae	; 0x9ae <spi_write>
	spi_write(0xFF);				// 	-> 1's = BCD mode for all digits
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <spi_write>
	spi_slaveDeSelect(slaveAddress);			// Deselect display chip
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	0e 94 9e 04 	call	0x93c	; 0x93c <spi_slaveDeSelect>

	spi_slaveSelect(slaveAddress);				// Select display chip
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	0e 94 92 04 	call	0x924	; 0x924 <spi_slaveSelect>
	spi_write(0x0A);      			// Register 0A: Intensity
 3f2:	8a e0       	ldi	r24, 0x0A	; 10
 3f4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <spi_write>
	spi_write(0x04);    			//  -> Level 4 (in range [1..F])
 3f8:	84 e0       	ldi	r24, 0x04	; 4
 3fa:	0e 94 d7 04 	call	0x9ae	; 0x9ae <spi_write>
	spi_slaveDeSelect(slaveAddress);			// De select display chip
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 9e 04 	call	0x93c	; 0x93c <spi_slaveDeSelect>

	spi_slaveSelect(slaveAddress);				// Select display chip
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	0e 94 92 04 	call	0x924	; 0x924 <spi_slaveSelect>
	spi_write(0x0B);  				// Register 0B: Scan-limit
 40a:	8b e0       	ldi	r24, 0x0B	; 11
 40c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <spi_write>
	spi_write(0x07);   				// 	-> 1 = Display digits 0..1
 410:	87 e0       	ldi	r24, 0x07	; 7
 412:	0e 94 d7 04 	call	0x9ae	; 0x9ae <spi_write>
	spi_slaveDeSelect(slaveAddress);			// Deselect display chip
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	0e 94 9e 04 	call	0x93c	; 0x93c <spi_slaveDeSelect>
	
	Eight7seg_displayOn();
 41c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <Eight7seg_displayOn>
	Eight7seg_reset();
 420:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <Eight7seg_reset>
 424:	08 95       	ret

Disassembly of section .text.adc_init:

00000978 <adc_init>:

static void adc_init()
{
	//Vref=5V
	//channel 1 at pin PF1
	ADMUX=0b11100001;
 978:	81 ee       	ldi	r24, 0xE1	; 225
 97a:	87 b9       	out	0x07, r24	; 7
	// ADSC=1 ADC Enable
	// ADPS[2:0]=111, prescaler=128
	// ADIE=1, ADC interrupt Enable
	//ADATE=1, ADC Auto Triggering Enable
	ADCSRA=(1<<ADEN)|(6<<ADPS0)|(1<<ADSC)|(1<<ADIE)|(1<<ADFR);
 97c:	8e ee       	ldi	r24, 0xEE	; 238
 97e:	86 b9       	out	0x06, r24	; 6
	
	//ADTS[2:0]= 100 , Timer0 overflow select as trigger source
	SFIOR=(4<<5);
 980:	80 e8       	ldi	r24, 0x80	; 128
 982:	80 bd       	out	0x20, r24	; 32
 984:	08 95       	ret

Disassembly of section .text.adc_deinit:

000009a6 <adc_deinit>:
}

static void adc_deinit(){
	ADCSRA &= ~((1<<ADIE)|(1<<ADFR));
 9a6:	86 b1       	in	r24, 0x06	; 6
 9a8:	87 7d       	andi	r24, 0xD7	; 215
 9aa:	86 b9       	out	0x06, r24	; 6
 9ac:	08 95       	ret

Disassembly of section .text.ADCLaserIO_start:

00000570 <ADCLaserIO_start>:

static void adc_init();
static void adc_deinit();

void ADCLaserIO_start(void (*_ptr)(uInt16)){
	if(callback == NULL){
 570:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <callback>
 574:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <callback+0x1>
 578:	23 2b       	or	r18, r19
 57a:	31 f4       	brne	.+12     	; 0x588 <ADCLaserIO_start+0x18>
		if (_ptr !=NULL) callback = _ptr;
 57c:	00 97       	sbiw	r24, 0x00	; 0
 57e:	21 f0       	breq	.+8      	; 0x588 <ADCLaserIO_start+0x18>
 580:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <callback+0x1>
 584:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <callback>
	}
	//Set port F1 to input
	DDRF &= ~(0x02);
 588:	e1 e6       	ldi	r30, 0x61	; 97
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	80 81       	ld	r24, Z
 58e:	8d 7f       	andi	r24, 0xFD	; 253
 590:	80 83       	st	Z, r24
	//Set port D0 to output
	DDRD |= 0x01;
 592:	81 b3       	in	r24, 0x11	; 17
 594:	81 60       	ori	r24, 0x01	; 1
 596:	81 bb       	out	0x11, r24	; 17
	//Set port D0 high
	PORTD |= 0x01;
 598:	82 b3       	in	r24, 0x12	; 18
 59a:	81 60       	ori	r24, 0x01	; 1
 59c:	82 bb       	out	0x12, r24	; 18
	
	waitFunction(10);
 59e:	8a e0       	ldi	r24, 0x0A	; 10
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 27 04 	call	0x84e	; 0x84e <waitFunction>
	
	adc_init();
 5a6:	0e 94 bc 04 	call	0x978	; 0x978 <adc_init>
	
	TCCR0=(5<<CS00);
 5aa:	85 e0       	ldi	r24, 0x05	; 5
 5ac:	83 bf       	out	0x33, r24	; 51
	TIMSK=(1<<TOIE0);
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	87 bf       	out	0x37, r24	; 55
	
	//Enable global interrupts
	sei();
 5b2:	78 94       	sei
 5b4:	08 95       	ret

Disassembly of section .text.ADCLaserIO_stop:

00000986 <ADCLaserIO_stop>:
}

void ADCLaserIO_stop(){
	adc_deinit();
 986:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <adc_deinit>
	PORTD &= ~(0x01);
 98a:	82 b3       	in	r24, 0x12	; 18
 98c:	8e 7f       	andi	r24, 0xFE	; 254
 98e:	82 bb       	out	0x12, r24	; 18
 990:	08 95       	ret

Disassembly of section .text.__vector_21:

000002c4 <__vector_21>:

/*
Interrupt service routine for ADC to check if
laser has been interrupted.
*/
ISR(ADC_vect){
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	0b b6       	in	r0, 0x3b	; 59
 2d0:	0f 92       	push	r0
 2d2:	cf 92       	push	r12
 2d4:	df 92       	push	r13
 2d6:	ef 92       	push	r14
 2d8:	ff 92       	push	r15
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
	//Calculates the light value in percentages
	uInt16 value = (ADC) / 655;
 2f2:	84 b1       	in	r24, 0x04	; 4
 2f4:	95 b1       	in	r25, 0x05	; 5
 2f6:	6f e8       	ldi	r22, 0x8F	; 143
 2f8:	72 e0       	ldi	r23, 0x02	; 2
 2fa:	0e 94 b1 03 	call	0x762	; 0x762 <__udivmodhi4>
 2fe:	6b 01       	movw	r12, r22
 300:	e1 2c       	mov	r14, r1
 302:	f1 2c       	mov	r15, r1
	
	if (value < TRIGGER_VALUE){
 304:	80 e5       	ldi	r24, 0x50	; 80
 306:	c8 16       	cp	r12, r24
 308:	d1 04       	cpc	r13, r1
 30a:	e1 04       	cpc	r14, r1
 30c:	f1 04       	cpc	r15, r1
 30e:	48 f4       	brcc	.+18     	; 0x322 <__vector_21+0x5e>
		ADCLaserIO_stop();
 310:	0e 94 c3 04 	call	0x986	; 0x986 <ADCLaserIO_stop>
		callback(value);
 314:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <callback>
 318:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <callback+0x1>
 31c:	c7 01       	movw	r24, r14
 31e:	b6 01       	movw	r22, r12
 320:	09 95       	icall
	}
}
 322:	ff 91       	pop	r31
 324:	ef 91       	pop	r30
 326:	bf 91       	pop	r27
 328:	af 91       	pop	r26
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	7f 91       	pop	r23
 330:	6f 91       	pop	r22
 332:	5f 91       	pop	r21
 334:	4f 91       	pop	r20
 336:	3f 91       	pop	r19
 338:	2f 91       	pop	r18
 33a:	ff 90       	pop	r15
 33c:	ef 90       	pop	r14
 33e:	df 90       	pop	r13
 340:	cf 90       	pop	r12
 342:	0f 90       	pop	r0
 344:	0b be       	out	0x3b, r0	; 59
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

Disassembly of section .text.__vector_16:

00000952 <__vector_16>:

/*
Necessary timer.
*/
 952:	1f 92       	push	r1
 954:	0f 92       	push	r0
 956:	0f b6       	in	r0, 0x3f	; 63
 958:	0f 92       	push	r0
 95a:	11 24       	eor	r1, r1
 95c:	0f 90       	pop	r0
 95e:	0f be       	out	0x3f, r0	; 63
 960:	0f 90       	pop	r0
 962:	1f 90       	pop	r1
 964:	18 95       	reti

Disassembly of section .text.Buzzert_start:

00000992 <Buzzert_start>:
	OCR1A = (INTERVAL/2);				// compare value in between	
}

void Buzzert_start()
{
	TCCR1A = 0b10000010;			// timer, compare output at OC1A=PB5
 992:	82 e8       	ldi	r24, 0x82	; 130
 994:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00011010;			// fast PWM, TOP = ICR1, prescaler=8 (1MHz), RUN
 996:	8a e1       	ldi	r24, 0x1A	; 26
 998:	8e bd       	out	0x2e, r24	; 46
 99a:	08 95       	ret

Disassembly of section .text.Buzzert_stop:

000009be <Buzzert_stop>:
}

void Buzzert_stop(){
	TCCR1A = 0;
 9be:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
 9c0:	1e bc       	out	0x2e, r1	; 46
 9c2:	08 95       	ret

Disassembly of section .text.Keypad_reset:

00000812 <Keypad_reset>:
	}
	
}

static void Keypad_reset(){
	inputIndex = 0;
 812:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <inputIndex+0x1>
 816:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <inputIndex>
	side = rotateRight;
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <side+0x1>
 822:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <side>
	currentNumber = 0;
 826:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <currentNumber+0x1>
 82a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <currentNumber>
 82e:	08 95       	ret

Disassembly of section .text.Keypad_unlock:

00000350 <Keypad_unlock>:
		currentNumber = 9;
	}
	Eight7seg_writeToDisplay(inputIndex + 1, currentNumber);
}

static void Keypad_unlock(){
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
	
	Eight7seg_blink(3);
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 60 03 	call	0x6c0	; 0x6c0 <Eight7seg_blink>
	Eight7seg_reset();
 35c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <Eight7seg_reset>
	Keypad_reset();
 360:	0e 94 09 04 	call	0x812	; 0x812 <Keypad_reset>
	
	for (int i = 0; i < 4; i++)
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	1f c0       	rjmp	.+62     	; 0x3a8 <Keypad_unlock+0x58>
	{
		if (inputcode[i] != passcode[i]){
 36a:	c9 01       	movw	r24, r18
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	fc 01       	movw	r30, r24
 372:	ee 5f       	subi	r30, 0xFE	; 254
 374:	fe 4f       	sbci	r31, 0xFE	; 254
 376:	c0 81       	ld	r28, Z
 378:	d1 81       	ldd	r29, Z+1	; 0x01
 37a:	09 2e       	mov	r0, r25
 37c:	00 0c       	add	r0, r0
 37e:	aa 0b       	sbc	r26, r26
 380:	89 5c       	subi	r24, 0xC9	; 201
 382:	9e 4f       	sbci	r25, 0xFE	; 254
 384:	af 4f       	sbci	r26, 0xFF	; 255
 386:	fc 01       	movw	r30, r24
 388:	5a 2f       	mov	r21, r26
 38a:	0e 94 b3 04 	call	0x966	; 0x966 <__xload_2>
 38e:	c6 17       	cp	r28, r22
 390:	d7 07       	cpc	r29, r23
 392:	41 f0       	breq	.+16     	; 0x3a4 <Keypad_unlock+0x54>
			wrongCode_callback();
 394:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <wrongCode_callback>
 398:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <wrongCode_callback+0x1>
 39c:	09 95       	icall
			Eight7seg_reset();
 39e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <Eight7seg_reset>
			return;
 3a2:	10 c0       	rjmp	.+32     	; 0x3c4 <Keypad_unlock+0x74>
	
	Eight7seg_blink(3);
	Eight7seg_reset();
	Keypad_reset();
	
	for (int i = 0; i < 4; i++)
 3a4:	2f 5f       	subi	r18, 0xFF	; 255
 3a6:	3f 4f       	sbci	r19, 0xFF	; 255
 3a8:	24 30       	cpi	r18, 0x04	; 4
 3aa:	31 05       	cpc	r19, r1
 3ac:	f4 f2       	brlt	.-68     	; 0x36a <Keypad_unlock+0x1a>
			Eight7seg_reset();
			return;
		}
	}
	
	locked = 0;
 3ae:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <locked+0x1>
 3b2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <locked>
	unlocked_callback();
 3b6:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <unlocked_callback>
 3ba:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <unlocked_callback+0x1>
 3be:	09 95       	icall
	ADCLaserIO_stop();
 3c0:	0e 94 c3 04 	call	0x986	; 0x986 <ADCLaserIO_stop>
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

Disassembly of section .text.Keypad_rotate:

00000224 <Keypad_rotate>:
	side = rotateRight;
	currentNumber = 0;
}

static void Keypad_rotate(int rotate){
	if(rotate > 0)
 224:	18 16       	cp	r1, r24
 226:	19 06       	cpc	r1, r25
 228:	1c f4       	brge	.+6      	; 0x230 <Keypad_rotate+0xc>
	rotate = rotateRight;
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <Keypad_rotate+0x10>
	else
	rotate = rotateLeft;
 230:	4f ef       	ldi	r20, 0xFF	; 255
 232:	5f ef       	ldi	r21, 0xFF	; 255
	
	if(side != rotate){
 234:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <side>
 238:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <side+0x1>
 23c:	48 17       	cp	r20, r24
 23e:	59 07       	cpc	r21, r25
 240:	f9 f0       	breq	.+62     	; 0x280 <Keypad_rotate+0x5c>
		side = rotate;
 242:	50 93 15 01 	sts	0x0115, r21	; 0x800115 <side+0x1>
 246:	40 93 14 01 	sts	0x0114, r20	; 0x800114 <side>
		inputcode[inputIndex] = currentNumber;
 24a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <inputIndex>
 24e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <inputIndex+0x1>
 252:	f9 01       	movw	r30, r18
 254:	ee 0f       	add	r30, r30
 256:	ff 1f       	adc	r31, r31
 258:	ee 5f       	subi	r30, 0xFE	; 254
 25a:	fe 4f       	sbci	r31, 0xFE	; 254
 25c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <currentNumber>
 260:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <currentNumber+0x1>
 264:	91 83       	std	Z+1, r25	; 0x01
 266:	80 83       	st	Z, r24
		inputIndex++;
 268:	2f 5f       	subi	r18, 0xFF	; 255
 26a:	3f 4f       	sbci	r19, 0xFF	; 255
 26c:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <inputIndex+0x1>
 270:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <inputIndex>
		
		if(inputIndex > 3){
 274:	24 30       	cpi	r18, 0x04	; 4
 276:	31 05       	cpc	r19, r1
 278:	1c f0       	brlt	.+6      	; 0x280 <Keypad_rotate+0x5c>
			Keypad_unlock();
 27a:	0e 94 a8 01 	call	0x350	; 0x350 <Keypad_unlock>
			return;
 27e:	08 95       	ret
		}
	}
	
	
	currentNumber += rotate;
 280:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <currentNumber>
 284:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <currentNumber+0x1>
 288:	84 0f       	add	r24, r20
 28a:	95 1f       	adc	r25, r21
 28c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <currentNumber+0x1>
 290:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <currentNumber>
	if(currentNumber > 9){
 294:	8a 30       	cpi	r24, 0x0A	; 10
 296:	91 05       	cpc	r25, r1
 298:	2c f0       	brlt	.+10     	; 0x2a4 <Keypad_rotate+0x80>
		currentNumber = 0;
 29a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <currentNumber+0x1>
 29e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <currentNumber>
 2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <Keypad_rotate+0x90>
		}else if(currentNumber < 0){
 2a4:	99 23       	and	r25, r25
 2a6:	34 f4       	brge	.+12     	; 0x2b4 <Keypad_rotate+0x90>
		currentNumber = 9;
 2a8:	89 e0       	ldi	r24, 0x09	; 9
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <currentNumber+0x1>
 2b0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <currentNumber>
	}
	Eight7seg_writeToDisplay(inputIndex + 1, currentNumber);
 2b4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <inputIndex>
 2b8:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <currentNumber>
 2bc:	8f 5f       	subi	r24, 0xFF	; 255
 2be:	0e 94 99 03 	call	0x732	; 0x732 <Eight7seg_writeToDisplay>
 2c2:	08 95       	ret

Disassembly of section .text.Keypad_init:

000007f2 <Keypad_init>:
static void Keypad_rotate(int rotate);
static void Keypad_unlock();
static void Keypad_reset();

void Keypad_init(void (*_locked)(), void (*_unlocked)(), void (*_wrongCode)()){
	locked_callback = _locked;
 7f2:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <locked_callback+0x1>
 7f6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <locked_callback>
	unlocked_callback = _unlocked;
 7fa:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <unlocked_callback+0x1>
 7fe:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <unlocked_callback>
	wrongCode_callback = _wrongCode;
 802:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <wrongCode_callback+0x1>
 806:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <wrongCode_callback>
	DDRA &= ~(0x07);
 80a:	8a b3       	in	r24, 0x1a	; 26
 80c:	88 7f       	andi	r24, 0xF8	; 248
 80e:	8a bb       	out	0x1a, r24	; 26
 810:	08 95       	ret

Disassembly of section .text.Keypad_checkKey:

00000426 <Keypad_checkKey>:
}

void Keypad_checkKey(){
	int keys = PINA & 0x7;
 426:	89 b3       	in	r24, 0x19	; 25
	if(locked == 0)
 428:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <locked>
 42c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <locked+0x1>
 430:	23 2b       	or	r18, r19
 432:	81 f4       	brne	.+32     	; 0x454 <Keypad_checkKey+0x2e>
	{
		if(keys & 4){
 434:	82 ff       	sbrs	r24, 2
 436:	22 c0       	rjmp	.+68     	; 0x47c <Keypad_checkKey+0x56>
			locked = 1;
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <locked+0x1>
 440:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <locked>
			Keypad_reset();
 444:	0e 94 09 04 	call	0x812	; 0x812 <Keypad_reset>
			locked_callback();
 448:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <locked_callback>
 44c:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <locked_callback+0x1>
 450:	09 95       	icall
 452:	08 95       	ret
		}
		return;
	}
	
	if(keys & 1){
 454:	80 ff       	sbrs	r24, 0
 456:	05 c0       	rjmp	.+10     	; 0x462 <Keypad_checkKey+0x3c>
		Keypad_rotate(rotateRight);
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 12 01 	call	0x224	; 0x224 <Keypad_rotate>
 460:	08 95       	ret
		}else if(keys & 2){
 462:	81 ff       	sbrs	r24, 1
 464:	05 c0       	rjmp	.+10     	; 0x470 <Keypad_checkKey+0x4a>
		Keypad_rotate(rotateLeft);
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	9f ef       	ldi	r25, 0xFF	; 255
 46a:	0e 94 12 01 	call	0x224	; 0x224 <Keypad_rotate>
 46e:	08 95       	ret
		}else if(keys & 4){
 470:	82 ff       	sbrs	r24, 2
 472:	04 c0       	rjmp	.+8      	; 0x47c <Keypad_checkKey+0x56>
		Eight7seg_reset();
 474:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <Eight7seg_reset>
		Keypad_reset();
 478:	0e 94 09 04 	call	0x812	; 0x812 <Keypad_reset>
 47c:	08 95       	ret

Disassembly of section .text.lcd_strobe_lcd_e:

00000830 <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
 830:	8b b3       	in	r24, 0x1b	; 27
 832:	80 64       	ori	r24, 0x40	; 64
 834:	8b bb       	out	0x1b, r24	; 27
	waitFunction(1);			// nodig
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 27 04 	call	0x84e	; 0x84e <waitFunction>
	PORTA &= ~(1<<LCD_E);  	// E low
 83e:	8b b3       	in	r24, 0x1b	; 27
 840:	8f 7b       	andi	r24, 0xBF	; 191
 842:	8b bb       	out	0x1b, r24	; 27
	waitFunction(1);			// nodig?
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 27 04 	call	0x84e	; 0x84e <waitFunction>
 84c:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

00000640 <init_4bits_mode>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void init_4bits_mode(void) {
 640:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRD = 0xFF;
 642:	8f ef       	ldi	r24, 0xFF	; 255
 644:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
 646:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 648:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 64a:	1b ba       	out	0x1b, r1	; 27
	//PORTA = 0xFF;

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 64c:	c0 e2       	ldi	r28, 0x20	; 32
 64e:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 650:	0e 94 18 04 	call	0x830	; 0x830 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 654:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 656:	0e 94 18 04 	call	0x830	; 0x830 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 65a:	80 e8       	ldi	r24, 0x80	; 128
 65c:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 65e:	0e 94 18 04 	call	0x830	; 0x830 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 662:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 664:	0e 94 18 04 	call	0x830	; 0x830 <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 668:	80 ef       	ldi	r24, 0xF0	; 240
 66a:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 66c:	0e 94 18 04 	call	0x830	; 0x830 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 670:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 672:	0e 94 18 04 	call	0x830	; 0x830 <lcd_strobe_lcd_e>
	PORTC = 0x60;
 676:	80 e6       	ldi	r24, 0x60	; 96
 678:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 67a:	0e 94 18 04 	call	0x830	; 0x830 <lcd_strobe_lcd_e>
}
 67e:	cf 91       	pop	r28
 680:	08 95       	ret

Disassembly of section .text.lcd_write_data:

0000078a <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_data(unsigned char byte) {
 78a:	cf 93       	push	r28
 78c:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 78e:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 790:	8b b3       	in	r24, 0x1b	; 27
 792:	80 61       	ori	r24, 0x10	; 16
 794:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 796:	0e 94 18 04 	call	0x830	; 0x830 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 79a:	c2 95       	swap	r28
 79c:	c0 7f       	andi	r28, 0xF0	; 240
 79e:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 7a0:	8b b3       	in	r24, 0x1b	; 27
 7a2:	80 61       	ori	r24, 0x10	; 16
 7a4:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 7a6:	0e 94 18 04 	call	0x830	; 0x830 <lcd_strobe_lcd_e>
}
 7aa:	cf 91       	pop	r28
 7ac:	08 95       	ret

Disassembly of section .text.display_text:

000008d8 <display_text>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void display_text(char *str) {
 8d8:	cf 93       	push	r28
 8da:	df 93       	push	r29
 8dc:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 8de:	03 c0       	rjmp	.+6      	; 0x8e6 <display_text+0xe>
		lcd_write_data(*str);
 8e0:	0e 94 c5 03 	call	0x78a	; 0x78a <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 8e4:	21 96       	adiw	r28, 0x01	; 1
 8e6:	88 81       	ld	r24, Y
 8e8:	81 11       	cpse	r24, r1
 8ea:	fa cf       	rjmp	.-12     	; 0x8e0 <display_text+0x8>
		lcd_write_data(*str);
	}
}
 8ec:	df 91       	pop	r29
 8ee:	cf 91       	pop	r28
 8f0:	08 95       	ret

Disassembly of section .text.lcd_write_command:

000007ae <lcd_write_command>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_command(unsigned char byte) {
 7ae:	cf 93       	push	r28
 7b0:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 7b2:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 7b4:	8b b3       	in	r24, 0x1b	; 27
 7b6:	8f 7e       	andi	r24, 0xEF	; 239
 7b8:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 7ba:	0e 94 18 04 	call	0x830	; 0x830 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 7be:	c2 95       	swap	r28
 7c0:	c0 7f       	andi	r28, 0xF0	; 240
 7c2:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 7c4:	8b b3       	in	r24, 0x1b	; 27
 7c6:	8f 7e       	andi	r24, 0xEF	; 239
 7c8:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 7ca:	0e 94 18 04 	call	0x830	; 0x830 <lcd_strobe_lcd_e>
}
 7ce:	cf 91       	pop	r28
 7d0:	08 95       	ret

Disassembly of section .text.lcd_clear:

000008f2 <lcd_clear>:


void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd_write_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8f8:	8f e9       	ldi	r24, 0x9F	; 159
 8fa:	9f e0       	ldi	r25, 0x0F	; 15
 8fc:	01 97       	sbiw	r24, 0x01	; 1
 8fe:	f1 f7       	brne	.-4      	; 0x8fc <lcd_clear+0xa>
 900:	00 c0       	rjmp	.+0      	; 0x902 <lcd_clear+0x10>
 902:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 904:	80 e8       	ldi	r24, 0x80	; 128
 906:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd_write_command>
 90a:	08 95       	ret

Disassembly of section .text.lcd_init:

0000086c <lcd_init>:
}

void lcd_init()
{
	DDRC = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 86c:	8f ef       	ldi	r24, 0xFF	; 255
 86e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 870:	85 bb       	out	0x15, r24	; 21
	
	// Init LCD
	init_4bits_mode();
 872:	0e 94 20 03 	call	0x640	; 0x640 <init_4bits_mode>
 876:	8f e1       	ldi	r24, 0x1F	; 31
 878:	9e e4       	ldi	r25, 0x4E	; 78
 87a:	01 97       	sbiw	r24, 0x01	; 1
 87c:	f1 f7       	brne	.-4      	; 0x87a <lcd_init+0xe>
 87e:	00 c0       	rjmp	.+0      	; 0x880 <lcd_init+0x14>
 880:	00 00       	nop
	
	_delay_ms(10);
	
	lcd_clear();
 882:	0e 94 79 04 	call	0x8f2	; 0x8f2 <lcd_clear>
 886:	08 95       	ret

Disassembly of section .text.main_lcd_wrongCode:

000005b6 <main_lcd_wrongCode>:
	
	Timer_deInit();
	Buzzert_stop();
}

void main_lcd_wrongCode(){
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
 5be:	65 97       	sbiw	r28, 0x15	; 21
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	f8 94       	cli
 5c4:	de bf       	out	0x3e, r29	; 62
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	cd bf       	out	0x3d, r28	; 61
	lcd_clear();
 5ca:	0e 94 79 04 	call	0x8f2	; 0x8f2 <lcd_clear>
	char text[] = "wrong code try again";
 5ce:	22 e0       	ldi	r18, 0x02	; 2
 5d0:	31 e0       	ldi	r19, 0x01	; 1
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	85 e1       	ldi	r24, 0x15	; 21
 5d6:	f9 01       	movw	r30, r18
 5d8:	de 01       	movw	r26, r28
 5da:	11 96       	adiw	r26, 0x01	; 1
 5dc:	74 2f       	mov	r23, r20
 5de:	0e 94 44 04 	call	0x888	; 0x888 <__movmemx_qi>
	display_text(text);
 5e2:	ce 01       	movw	r24, r28
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <display_text>
}
 5ea:	65 96       	adiw	r28, 0x15	; 21
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	f8 94       	cli
 5f0:	de bf       	out	0x3e, r29	; 62
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	cd bf       	out	0x3d, r28	; 61
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	08 95       	ret

Disassembly of section .text.main_alarm:

000005fc <main_alarm>:
#include "Timer/Timer.h"
#include "Buzzert/Buzzert.h"

#define  timeBeforeAlarm 20

void main_alarm(){
 5fc:	cf 93       	push	r28
 5fe:	df 93       	push	r29
 600:	00 d0       	rcall	.+0      	; 0x602 <main_alarm+0x6>
 602:	00 d0       	rcall	.+0      	; 0x604 <main_alarm+0x8>
 604:	00 d0       	rcall	.+0      	; 0x606 <main_alarm+0xa>
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
	lcd_clear();
 60a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <lcd_clear>
	char text[] = "Alarm";
 60e:	27 e1       	ldi	r18, 0x17	; 23
 610:	31 e0       	ldi	r19, 0x01	; 1
 612:	40 e0       	ldi	r20, 0x00	; 0
 614:	86 e0       	ldi	r24, 0x06	; 6
 616:	f9 01       	movw	r30, r18
 618:	de 01       	movw	r26, r28
 61a:	11 96       	adiw	r26, 0x01	; 1
 61c:	74 2f       	mov	r23, r20
 61e:	0e 94 44 04 	call	0x888	; 0x888 <__movmemx_qi>
	display_text(text);
 622:	ce 01       	movw	r24, r28
 624:	01 96       	adiw	r24, 0x01	; 1
 626:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <display_text>
	
	Buzzert_start();
 62a:	0e 94 c9 04 	call	0x992	; 0x992 <Buzzert_start>
}
 62e:	26 96       	adiw	r28, 0x06	; 6
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	f8 94       	cli
 634:	de bf       	out	0x3e, r29	; 62
 636:	0f be       	out	0x3f, r0	; 63
 638:	cd bf       	out	0x3d, r28	; 61
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	08 95       	ret

Disassembly of section .text.main_laserCallback:

0000047e <main_laserCallback>:

void main_laserCallback(uInt16 value){
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	2a 97       	sbiw	r28, 0x0a	; 10
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	f8 94       	cli
 48c:	de bf       	out	0x3e, r29	; 62
 48e:	0f be       	out	0x3f, r0	; 63
 490:	cd bf       	out	0x3d, r28	; 61
	lcd_clear();
 492:	0e 94 79 04 	call	0x8f2	; 0x8f2 <lcd_clear>
	char text[] = "Triggered";
 496:	2d e1       	ldi	r18, 0x1D	; 29
 498:	31 e0       	ldi	r19, 0x01	; 1
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	8a e0       	ldi	r24, 0x0A	; 10
 49e:	f9 01       	movw	r30, r18
 4a0:	de 01       	movw	r26, r28
 4a2:	11 96       	adiw	r26, 0x01	; 1
 4a4:	74 2f       	mov	r23, r20
 4a6:	0e 94 44 04 	call	0x888	; 0x888 <__movmemx_qi>
	display_text(text);
 4aa:	ce 01       	movw	r24, r28
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <display_text>
	
	Timer_init(main_alarm, timeBeforeAlarm);
 4b2:	64 e1       	ldi	r22, 0x14	; 20
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	8e ef       	ldi	r24, 0xFE	; 254
 4b8:	92 e0       	ldi	r25, 0x02	; 2
 4ba:	0e 94 41 03 	call	0x682	; 0x682 <Timer_init>
}
 4be:	2a 96       	adiw	r28, 0x0a	; 10
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	cd bf       	out	0x3d, r28	; 61
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	08 95       	ret

Disassembly of section .text.main_lcd_locked:

000004d0 <main_lcd_locked>:

void main_start_laser(){
	ADCLaserIO_start(main_laserCallback);
}

void main_lcd_locked(){
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	cd b7       	in	r28, 0x3d	; 61
 4d6:	de b7       	in	r29, 0x3e	; 62
 4d8:	27 97       	sbiw	r28, 0x07	; 7
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
	lcd_clear();
 4e4:	0e 94 79 04 	call	0x8f2	; 0x8f2 <lcd_clear>
	char text[] = "locked";
 4e8:	27 e2       	ldi	r18, 0x27	; 39
 4ea:	31 e0       	ldi	r19, 0x01	; 1
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	87 e0       	ldi	r24, 0x07	; 7
 4f0:	f9 01       	movw	r30, r18
 4f2:	de 01       	movw	r26, r28
 4f4:	11 96       	adiw	r26, 0x01	; 1
 4f6:	74 2f       	mov	r23, r20
 4f8:	0e 94 44 04 	call	0x888	; 0x888 <__movmemx_qi>
	display_text(text);
 4fc:	ce 01       	movw	r24, r28
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <display_text>
	Timer_init(main_start_laser, 10);
 504:	6a e0       	ldi	r22, 0x0A	; 10
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	8e ec       	ldi	r24, 0xCE	; 206
 50a:	94 e0       	ldi	r25, 0x04	; 4
 50c:	0e 94 41 03 	call	0x682	; 0x682 <Timer_init>
}
 510:	27 96       	adiw	r28, 0x07	; 7
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	de bf       	out	0x3e, r29	; 62
 518:	0f be       	out	0x3f, r0	; 63
 51a:	cd bf       	out	0x3d, r28	; 61
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	08 95       	ret

Disassembly of section .text.main_start_laser:

0000099c <main_start_laser>:
	
	Timer_init(main_alarm, timeBeforeAlarm);
}

void main_start_laser(){
	ADCLaserIO_start(main_laserCallback);
 99c:	8f e3       	ldi	r24, 0x3F	; 63
 99e:	92 e0       	ldi	r25, 0x02	; 2
 9a0:	0e 94 b8 02 	call	0x570	; 0x570 <ADCLaserIO_start>
 9a4:	08 95       	ret

Disassembly of section .text.main_lcd_unlocked:

00000522 <main_lcd_unlocked>:
	char text[] = "locked";
	display_text(text);
	Timer_init(main_start_laser, 10);
}

void main_lcd_unlocked(){
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
 52a:	29 97       	sbiw	r28, 0x09	; 9
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	f8 94       	cli
 530:	de bf       	out	0x3e, r29	; 62
 532:	0f be       	out	0x3f, r0	; 63
 534:	cd bf       	out	0x3d, r28	; 61
	lcd_clear();
 536:	0e 94 79 04 	call	0x8f2	; 0x8f2 <lcd_clear>
	char text[] = "unlocked";
 53a:	2e e2       	ldi	r18, 0x2E	; 46
 53c:	31 e0       	ldi	r19, 0x01	; 1
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	89 e0       	ldi	r24, 0x09	; 9
 542:	f9 01       	movw	r30, r18
 544:	de 01       	movw	r26, r28
 546:	11 96       	adiw	r26, 0x01	; 1
 548:	74 2f       	mov	r23, r20
 54a:	0e 94 44 04 	call	0x888	; 0x888 <__movmemx_qi>
	display_text(text);
 54e:	ce 01       	movw	r24, r28
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <display_text>
	
	Timer_deInit();
 556:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Timer_deInit>
	Buzzert_stop();
 55a:	0e 94 df 04 	call	0x9be	; 0x9be <Buzzert_stop>
}
 55e:	29 96       	adiw	r28, 0x09	; 9
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	f8 94       	cli
 564:	de bf       	out	0x3e, r29	; 62
 566:	0f be       	out	0x3f, r0	; 63
 568:	cd bf       	out	0x3d, r28	; 61
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	08 95       	ret

Disassembly of section .text.main:

000006fa <main>:
}


int main(void)
{
	lcd_init();
 6fa:	0e 94 36 04 	call	0x86c	; 0x86c <lcd_init>
	
	DDRB = 0xFF;					// set PORTB for compare output
 6fe:	8f ef       	ldi	r24, 0xFF	; 255
 700:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;					// set PORTA for output in main program
 702:	8a bb       	out	0x1a, r24	; 26
	waitFunction(100);
 704:	84 e6       	ldi	r24, 0x64	; 100
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 27 04 	call	0x84e	; 0x84e <waitFunction>
	
	Eight7seg_Init();
 70c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <Eight7seg_Init>
	Keypad_init(main_lcd_locked, main_lcd_unlocked, main_lcd_wrongCode);
 710:	4b ed       	ldi	r20, 0xDB	; 219
 712:	52 e0       	ldi	r21, 0x02	; 2
 714:	61 e9       	ldi	r22, 0x91	; 145
 716:	72 e0       	ldi	r23, 0x02	; 2
 718:	88 e6       	ldi	r24, 0x68	; 104
 71a:	92 e0       	ldi	r25, 0x02	; 2
 71c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <Keypad_init>
	
	main_lcd_unlocked();
 720:	0e 94 91 02 	call	0x522	; 0x522 <main_lcd_unlocked>
	while(1){
		Keypad_checkKey();
 724:	0e 94 13 02 	call	0x426	; 0x426 <Keypad_checkKey>
		waitFunction(100);
 728:	84 e6       	ldi	r24, 0x64	; 100
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 27 04 	call	0x84e	; 0x84e <waitFunction>
 730:	f9 cf       	rjmp	.-14     	; 0x724 <main+0x2a>

Disassembly of section .text.spi_masterInit:

0000090c <spi_masterInit>:
{
	SPDR = data;							// Load byte to Data register --> starts transmission
	while( !(SPSR & BIT(SPIF)) ); 			// Wait for transmission complete
	data = SPDR;							// New received data (eventually, MISO) in SPDR
	return data;							// Return received byte
}
 90c:	87 b3       	in	r24, 0x17	; 23
 90e:	8f ef       	ldi	r24, 0xFF	; 255
 910:	87 bb       	out	0x17, r24	; 23
 912:	87 b3       	in	r24, 0x17	; 23
 914:	87 7f       	andi	r24, 0xF7	; 247
 916:	87 bb       	out	0x17, r24	; 23
 918:	88 b3       	in	r24, 0x18	; 24
 91a:	81 60       	ori	r24, 0x01	; 1
 91c:	88 bb       	out	0x18, r24	; 24
 91e:	82 e5       	ldi	r24, 0x52	; 82
 920:	8d b9       	out	0x0d, r24	; 13
 922:	08 95       	ret

Disassembly of section .text.spi_write:

000009ae <spi_write>:


// Write a byte from master to slave
void spi_write( unsigned char data )
{
	SPDR = data;							// Load byte to Data register --> starts transmission
 9ae:	8f b9       	out	0x0f, r24	; 15
	while( !(SPSR & BIT(SPIF)) ); 			// Wait for transmission complete
 9b0:	77 9b       	sbis	0x0e, 7	; 14
 9b2:	fe cf       	rjmp	.-4      	; 0x9b0 <spi_write+0x2>
}
 9b4:	08 95       	ret

Disassembly of section .text.spi_slaveSelect:

00000924 <spi_slaveSelect>:
}

// Select device on pinnumer PORTB
void spi_slaveSelect(unsigned char chipNumber)
{
	PORTB &= ~BIT(chipNumber);
 924:	98 b3       	in	r25, 0x18	; 24
 926:	21 e0       	ldi	r18, 0x01	; 1
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	02 c0       	rjmp	.+4      	; 0x930 <spi_slaveSelect+0xc>
 92c:	22 0f       	add	r18, r18
 92e:	33 1f       	adc	r19, r19
 930:	8a 95       	dec	r24
 932:	e2 f7       	brpl	.-8      	; 0x92c <spi_slaveSelect+0x8>
 934:	20 95       	com	r18
 936:	29 23       	and	r18, r25
 938:	28 bb       	out	0x18, r18	; 24
 93a:	08 95       	ret

Disassembly of section .text.spi_slaveDeSelect:

0000093c <spi_slaveDeSelect>:

// Deselect device on pinnumer PORTB
void spi_slaveDeSelect(unsigned char chipNumber)
{

	PORTB |= BIT(chipNumber);
 93c:	98 b3       	in	r25, 0x18	; 24
 93e:	21 e0       	ldi	r18, 0x01	; 1
 940:	30 e0       	ldi	r19, 0x00	; 0
 942:	02 c0       	rjmp	.+4      	; 0x948 <spi_slaveDeSelect+0xc>
 944:	22 0f       	add	r18, r18
 946:	33 1f       	adc	r19, r19
 948:	8a 95       	dec	r24
 94a:	e2 f7       	brpl	.-8      	; 0x944 <spi_slaveDeSelect+0x8>
 94c:	29 2b       	or	r18, r25
 94e:	28 bb       	out	0x18, r18	; 24
 950:	08 95       	ret

Disassembly of section .text.Timer_init:

00000682 <Timer_init>:
volatile int msCount;

static void (*alarmCallback)(void) = NULL;

void Timer_init(void (*_alarmCallback)(void), int _remainingTime){
	alarmCallback = _alarmCallback;
 682:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <alarmCallback+0x1>
 686:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <alarmCallback>
	remainingTime = _remainingTime;
 68a:	cb 01       	movw	r24, r22
 68c:	77 0f       	add	r23, r23
 68e:	aa 0b       	sbc	r26, r26
 690:	bb 0b       	sbc	r27, r27
 692:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <remainingTime>
 696:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <remainingTime+0x1>
 69a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <remainingTime+0x2>
 69e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <remainingTime+0x3>
	msCount = 1000;
 6a2:	88 ee       	ldi	r24, 0xE8	; 232
 6a4:	93 e0       	ldi	r25, 0x03	; 3
 6a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	OCR2 = 150; // Compare value of counter 2
 6ae:	86 e9       	ldi	r24, 0x96	; 150
 6b0:	83 bd       	out	0x23, r24	; 35
	TIMSK |= BIT(7); // T2 compare match interrupt enable
 6b2:	87 b7       	in	r24, 0x37	; 55
 6b4:	80 68       	ori	r24, 0x80	; 128
 6b6:	87 bf       	out	0x37, r24	; 55
	sei(); // turn_on intr all
 6b8:	78 94       	sei
	TCCR2 = 0b00001011; // Initialize T2: timer, prescaler=32, compare output disconnected,CTC,RUN
 6ba:	8b e0       	ldi	r24, 0x0B	; 11
 6bc:	85 bd       	out	0x25, r24	; 37
 6be:	08 95       	ret

Disassembly of section .text.Timer_deInit:

000009b6 <Timer_deInit>:
}

void Timer_deInit(){
	TIMSK &= ~(BIT(7));		// T1 compare match A interrupt enable
 9b6:	87 b7       	in	r24, 0x37	; 55
 9b8:	8f 77       	andi	r24, 0x7F	; 127
 9ba:	87 bf       	out	0x37, r24	; 55
 9bc:	08 95       	ret

Disassembly of section .text.__vector_9:

00000140 <__vector_9>:
}

ISR( TIMER2_COMP_vect ) {
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	0b b6       	in	r0, 0x3b	; 59
 14c:	0f 92       	push	r0
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	msCount--; // Increment ms counter
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 174:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(msCount <= 0){
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 180:	18 16       	cp	r1, r24
 182:	19 06       	cpc	r1, r25
 184:	44 f1       	brlt	.+80     	; 0x1d6 <__vector_9+0x96>
		msCount = 1000;
 186:	88 ee       	ldi	r24, 0xE8	; 232
 188:	93 e0       	ldi	r25, 0x03	; 3
 18a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		remainingTime--;
 192:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <remainingTime>
 196:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <remainingTime+0x1>
 19a:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <remainingTime+0x2>
 19e:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <remainingTime+0x3>
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	a1 09       	sbc	r26, r1
 1a6:	b1 09       	sbc	r27, r1
 1a8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <remainingTime>
 1ac:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <remainingTime+0x1>
 1b0:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <remainingTime+0x2>
 1b4:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <remainingTime+0x3>
		if(remainingTime % 2){
 1b8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <remainingTime>
 1bc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <remainingTime+0x1>
 1c0:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <remainingTime+0x2>
 1c4:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <remainingTime+0x3>
 1c8:	80 ff       	sbrs	r24, 0
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <__vector_9+0x92>
			Buzzert_start();
 1cc:	0e 94 c9 04 	call	0x992	; 0x992 <Buzzert_start>
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <__vector_9+0x96>
		}else{
			Buzzert_stop();
 1d2:	0e 94 df 04 	call	0x9be	; 0x9be <Buzzert_stop>
		}
	}
	if ( remainingTime < 1) {
 1d6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <remainingTime>
 1da:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <remainingTime+0x1>
 1de:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <remainingTime+0x2>
 1e2:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <remainingTime+0x3>
 1e6:	18 16       	cp	r1, r24
 1e8:	19 06       	cpc	r1, r25
 1ea:	1a 06       	cpc	r1, r26
 1ec:	1b 06       	cpc	r1, r27
 1ee:	3c f0       	brlt	.+14     	; 0x1fe <__vector_9+0xbe>
		Timer_deInit();
 1f0:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Timer_deInit>
		alarmCallback();
 1f4:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <alarmCallback>
 1f8:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <alarmCallback+0x1>
 1fc:	09 95       	icall
	}
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	7f 91       	pop	r23
 20c:	6f 91       	pop	r22
 20e:	5f 91       	pop	r21
 210:	4f 91       	pop	r20
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0b be       	out	0x3b, r0	; 59
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

Disassembly of section .text.waitFunction:

0000084e <waitFunction>:
notes:			Busy wait, not very accurate. Make sure (external)
				clock value is set. This is used by _delay_ms inside
				until/delay.h
***********************/
{
	for (int i=0; i<ms; i++) {
 84e:	20 e0       	ldi	r18, 0x00	; 0
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	08 c0       	rjmp	.+16     	; 0x864 <waitFunction+0x16>
 854:	ef ec       	ldi	r30, 0xCF	; 207
 856:	f7 e0       	ldi	r31, 0x07	; 7
 858:	31 97       	sbiw	r30, 0x01	; 1
 85a:	f1 f7       	brne	.-4      	; 0x858 <waitFunction+0xa>
 85c:	00 c0       	rjmp	.+0      	; 0x85e <waitFunction+0x10>
 85e:	00 00       	nop
 860:	2f 5f       	subi	r18, 0xFF	; 255
 862:	3f 4f       	sbci	r19, 0xFF	; 255
 864:	28 17       	cp	r18, r24
 866:	39 07       	cpc	r19, r25
 868:	ac f3       	brlt	.-22     	; 0x854 <waitFunction+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 86a:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000762 <__udivmodhi4>:
 762:	aa 1b       	sub	r26, r26
 764:	bb 1b       	sub	r27, r27
 766:	51 e1       	ldi	r21, 0x11	; 17
 768:	07 c0       	rjmp	.+14     	; 0x778 <__udivmodhi4_ep>

0000076a <__udivmodhi4_loop>:
 76a:	aa 1f       	adc	r26, r26
 76c:	bb 1f       	adc	r27, r27
 76e:	a6 17       	cp	r26, r22
 770:	b7 07       	cpc	r27, r23
 772:	10 f0       	brcs	.+4      	; 0x778 <__udivmodhi4_ep>
 774:	a6 1b       	sub	r26, r22
 776:	b7 0b       	sbc	r27, r23

00000778 <__udivmodhi4_ep>:
 778:	88 1f       	adc	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	5a 95       	dec	r21
 77e:	a9 f7       	brne	.-22     	; 0x76a <__udivmodhi4_loop>
 780:	80 95       	com	r24
 782:	90 95       	com	r25
 784:	bc 01       	movw	r22, r24
 786:	cd 01       	movw	r24, r26
 788:	08 95       	ret

Disassembly of section .text.libgcc:

00000966 <__xload_2>:
 966:	57 fd       	sbrc	r21, 7
 968:	04 c0       	rjmp	.+8      	; 0x972 <__xload_2+0xc>
 96a:	5b bf       	out	0x3b, r21	; 59
 96c:	67 91       	elpm	r22, Z+
 96e:	77 91       	elpm	r23, Z+
 970:	08 95       	ret
 972:	61 91       	ld	r22, Z+
 974:	71 91       	ld	r23, Z+
 976:	08 95       	ret

Disassembly of section .text.libgcc:

00000888 <__movmemx_qi>:
 888:	99 27       	eor	r25, r25

0000088a <__movmemx_hi>:
 88a:	77 fd       	sbrc	r23, 7
 88c:	06 c0       	rjmp	.+12     	; 0x89a <__movmemx_hi+0x10>
 88e:	7b bf       	out	0x3b, r23	; 59
 890:	07 90       	elpm	r0, Z+
 892:	0d 92       	st	X+, r0
 894:	01 97       	sbiw	r24, 0x01	; 1
 896:	e1 f7       	brne	.-8      	; 0x890 <__movmemx_hi+0x6>
 898:	08 95       	ret
 89a:	01 90       	ld	r0, Z+
 89c:	0d 92       	st	X+, r0
 89e:	01 97       	sbiw	r24, 0x01	; 1
 8a0:	e1 f7       	brne	.-8      	; 0x89a <__movmemx_hi+0x10>
 8a2:	08 95       	ret
