
SecuritySystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a4a  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001f8  00000000  00000000  00000a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002b49  00000000  00000000  00000c71  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000edd  00000000  00000000  000037ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000e75  00000000  00000000  00004697  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000046c  00000000  00000000  0000550c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000003b8  00000000  00000000  00005978  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000008ca  00000000  00000000  00005d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000178  00000000  00000000  000065fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000090c  0000090c  00000a40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006774  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.Eight7seg_displayOn 0000001a  00000808  00000808  0000093c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.Eight7seg_displayOff 0000001a  00000822  00000822  00000956  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Eight7seg_blink 0000003a  00000608  00000608  0000073c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.Eight7seg_writeToDisplay 00000030  00000642  00000642  00000776  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.Eight7seg_reset 00000020  00000736  00000736  0000086a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.Eight7seg_Init 0000005a  000003c6  000003c6  000004fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.adc_init 0000000e  000008da  000008da  00000a0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.adc_deinit 00000008  000008f4  000008f4  00000a28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.ADCLaserIO_start 0000003e  000005ca  000005ca  000006fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.ADCLaserIO_stop 0000000c  000008e8  000008e8  00000a1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_21 0000008c  000001e6  000001e6  0000031a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__vector_16 00000014  000008b4  000008b4  000009e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .bss.callback 00000002  00800108  00800108  00000a4a  2**0
                  ALLOC
 26 .text.Keypad_reset 0000001e  00000776  00000776  000008aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.Keypad_unlock 0000007a  00000272  00000272  000003a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.Keypad_rotate 000000a0  00000146  00000146  0000027a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.Keypad_init 00000020  00000756  00000756  0000088a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.Keypad_checkKey 00000060  00000366  00000366  0000049a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .data.locked  00000002  0080010a  00000910  00000a44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 32 .bss.inputIndex 00000002  0080010c  0080010c  00000a4a  2**0
                  ALLOC
 33 .data.side    00000002  0080010e  00000912  00000a46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 34 .bss.currentNumber 00000002  00800110  00800110  00000a4a  2**0
                  ALLOC
 35 .bss.inputcode 00000008  00800100  00800100  00000a4a  2**0
                  ALLOC
 36 .progmemx.data.passcode 00000008  0000013d  0000013d  00000271  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 37 .bss.wrongCode_callback 00000002  00800112  00800112  00000a4a  2**0
                  ALLOC
 38 .bss.unlocked_callback 00000002  00800114  00800114  00000a4a  2**0
                  ALLOC
 39 .bss.locked_callback 00000002  00800116  00800116  00000a4a  2**0
                  ALLOC
 40 .text.lcd_strobe_lcd_e 0000001e  00000794  00000794  000008c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.init_4bits_mode 00000042  00000548  00000548  0000067c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.lcd_write_data 00000024  000006ee  000006ee  00000822  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.display_text 0000001a  0000083c  0000083c  00000970  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.lcd_write_command 00000024  00000712  00000712  00000846  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.lcd_clear 0000001a  00000856  00000856  0000098a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.lcd_init 0000001c  000007d0  000007d0  00000904  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .progmemx.data 00000035  00000108  00000108  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 48 .text.main_alarm 00000040  0000058a  0000058a  000006be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.main_lcd_locked 00000046  000004bc  000004bc  000005f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.main_lcd_wrongCode 00000046  00000502  00000502  00000636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.main_laserCallback 00000052  00000420  00000420  00000554  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.main_lcd_unlocked 0000004a  00000472  00000472  000005a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.main    0000002e  00000672  00000672  000007a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.spi_masterInit 00000016  00000888  00000888  000009bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.spi_write 00000008  000008fc  000008fc  00000a30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.spi_slaveSelect 00000018  00000870  00000870  000009a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.spi_slaveDeSelect 00000016  0000089e  0000089e  000009d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.Timer_init 00000026  000006c8  000006c8  000007fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.Timer_deInit 00000008  00000904  00000904  00000a38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.__vector_12 0000007a  000002ec  000002ec  00000420  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .bss.alarmCallback 00000002  00800118  00800118  00000a4a  2**0
                  ALLOC
 62 .data.remainingTime 00000002  0080011a  00000914  00000a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 63 .text.waitFunction 0000001e  000007b2  000007b2  000008e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.libgcc.div 00000028  000006a0  000006a0  000007d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.libgcc  00000012  000008c8  000008c8  000009fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.libgcc  0000001c  000007ec  000007ec  00000920  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
   4:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
   8:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
   c:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  10:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  14:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  18:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  1c:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  20:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  24:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  28:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  2c:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  30:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__vector_12>
  34:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  38:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  3c:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  40:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__vector_16>
  44:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  48:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  4c:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  50:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  54:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_21>
  58:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  5c:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  60:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  64:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  68:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  6c:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  70:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  74:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  78:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  7c:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  80:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  84:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>
  88:	0c 94 86 04 	jmp	0x90c	; 0x90c <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 0a       	sbc	r0, r17
  90:	80 01       	movw	r16, r0
  92:	0a 01       	movw	r0, r20
  94:	0c 00       	.word	0x000c	; ????
  96:	09 10       	cpse	r0, r9
  98:	01 0c       	add	r0, r1
  9a:	01 0e       	add	r0, r17
  9c:	80 01       	movw	r16, r0
  9e:	0e 01       	movw	r0, r28
  a0:	10 00       	.word	0x0010	; ????
  a2:	09 12       	cpse	r0, r25
  a4:	01 10       	cpse	r0, r1
  a6:	01 1a       	sub	r0, r17
  a8:	80 01       	movw	r16, r0
  aa:	1a 01       	movw	r2, r20
  ac:	1c 00       	.word	0x001c	; ????
  ae:	09 14       	cp	r0, r9

000000b0 <__ctors_end>:
  b0:	11 24       	eor	r1, r1
  b2:	1f be       	out	0x3f, r1	; 63
  b4:	cf ef       	ldi	r28, 0xFF	; 255
  b6:	d0 e1       	ldi	r29, 0x10	; 16
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
  bc:	ec e8       	ldi	r30, 0x8C	; 140
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	19 c0       	rjmp	.+50     	; 0xf6 <__do_clear_bss+0x8>
  c4:	b7 91       	elpm	r27, Z+
  c6:	a7 91       	elpm	r26, Z+
  c8:	37 91       	elpm	r19, Z+
  ca:	27 91       	elpm	r18, Z+
  cc:	07 91       	elpm	r16, Z+
  ce:	07 fd       	sbrc	r16, 7
  d0:	0e c0       	rjmp	.+28     	; 0xee <__do_clear_bss>
  d2:	97 91       	elpm	r25, Z+
  d4:	87 91       	elpm	r24, Z+
  d6:	ef 01       	movw	r28, r30
  d8:	f9 2f       	mov	r31, r25
  da:	e8 2f       	mov	r30, r24
  dc:	0b bf       	out	0x3b, r16	; 59
  de:	07 90       	elpm	r0, Z+
  e0:	0d 92       	st	X+, r0
  e2:	a2 17       	cp	r26, r18
  e4:	b3 07       	cpc	r27, r19
  e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0x22>
  e8:	fe 01       	movw	r30, r28
  ea:	1b be       	out	0x3b, r1	; 59
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <__do_clear_bss+0x8>

000000ee <__do_clear_bss>:
  ee:	1d 92       	st	X+, r1
  f0:	a2 17       	cp	r26, r18
  f2:	b3 07       	cpc	r27, r19
  f4:	e1 f7       	brne	.-8      	; 0xee <__do_clear_bss>
  f6:	e0 3b       	cpi	r30, 0xB0	; 176
  f8:	f4 07       	cpc	r31, r20
  fa:	21 f7       	brne	.-56     	; 0xc4 <__do_copy_data+0x8>
  fc:	0e 94 39 03 	call	0x672	; 0x672 <main>
 100:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>

Disassembly of section .text:

0000090c <__bad_interrupt>:
 90c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.Eight7seg_displayOn:

00000808 <Eight7seg_displayOn>:
}

// Set display on ('normal operation')
void Eight7seg_displayOn()
{
	spi_slaveSelect(slaveAddress);				// Select display chip
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	0e 94 38 04 	call	0x870	; 0x870 <spi_slaveSelect>
	spi_write(0x0C); 				// Register 0B: Shutdown register
 80e:	8c e0       	ldi	r24, 0x0C	; 12
 810:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi_write>
	spi_write(0x01); 				// 	-> 1 = Normal operation
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi_write>
	spi_slaveDeSelect(slaveAddress);			// De select display chip
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	0e 94 4f 04 	call	0x89e	; 0x89e <spi_slaveDeSelect>
 820:	08 95       	ret

Disassembly of section .text.Eight7seg_displayOff:

00000822 <Eight7seg_displayOff>:
}

// Set display off ('shut down')
void Eight7seg_displayOff()
{
	spi_slaveSelect(slaveAddress);				// Select display chip
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	0e 94 38 04 	call	0x870	; 0x870 <spi_slaveSelect>
	spi_write(0x0C); 				// Register 0B: Shutdown register
 828:	8c e0       	ldi	r24, 0x0C	; 12
 82a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi_write>
	spi_write(0x00); 				// 	-> 1 = Normal operation
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi_write>
	spi_slaveDeSelect(slaveAddress);			// De select display chip
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	0e 94 4f 04 	call	0x89e	; 0x89e <spi_slaveDeSelect>
 83a:	08 95       	ret

Disassembly of section .text.Eight7seg_blink:

00000608 <Eight7seg_blink>:
	
	Eight7seg_displayOn();
	Eight7seg_reset();
}

void Eight7seg_blink(int times){
 608:	0f 93       	push	r16
 60a:	1f 93       	push	r17
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	8c 01       	movw	r16, r24
	for (int i=0; i < times; i++)
 612:	c0 e0       	ldi	r28, 0x00	; 0
 614:	d0 e0       	ldi	r29, 0x00	; 0
 616:	0d c0       	rjmp	.+26     	; 0x632 <Eight7seg_blink+0x2a>
	{
		Eight7seg_displayOff();
 618:	0e 94 11 04 	call	0x822	; 0x822 <Eight7seg_displayOff>
		waitFunction(300);
 61c:	8c e2       	ldi	r24, 0x2C	; 44
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <waitFunction>
		Eight7seg_displayOn();
 624:	0e 94 04 04 	call	0x808	; 0x808 <Eight7seg_displayOn>
		waitFunction(300);
 628:	8c e2       	ldi	r24, 0x2C	; 44
 62a:	91 e0       	ldi	r25, 0x01	; 1
 62c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <waitFunction>
	Eight7seg_displayOn();
	Eight7seg_reset();
}

void Eight7seg_blink(int times){
	for (int i=0; i < times; i++)
 630:	21 96       	adiw	r28, 0x01	; 1
 632:	c0 17       	cp	r28, r16
 634:	d1 07       	cpc	r29, r17
 636:	84 f3       	brlt	.-32     	; 0x618 <Eight7seg_blink+0x10>
		Eight7seg_displayOff();
		waitFunction(300);
		Eight7seg_displayOn();
		waitFunction(300);
	}
}
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	1f 91       	pop	r17
 63e:	0f 91       	pop	r16
 640:	08 95       	ret

Disassembly of section .text.Eight7seg_writeToDisplay:

00000642 <Eight7seg_writeToDisplay>:
	spi_write(0x0C); 				// Register 0B: Shutdown register
	spi_write(0x00); 				// 	-> 1 = Normal operation
	spi_slaveDeSelect(slaveAddress);			// De select display chip
}

void Eight7seg_writeToDisplay(char display, char number){
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
	
	if(display < 1 || display > 8) return;
 646:	9f ef       	ldi	r25, 0xFF	; 255
 648:	98 0f       	add	r25, r24
 64a:	98 30       	cpi	r25, 0x08	; 8
 64c:	78 f4       	brcc	.+30     	; 0x66c <Eight7seg_writeToDisplay+0x2a>
 64e:	d6 2f       	mov	r29, r22
 650:	c8 2f       	mov	r28, r24
	
	spi_slaveSelect(slaveAddress); 		// Select display chip
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	0e 94 38 04 	call	0x870	; 0x870 <spi_slaveSelect>
	spi_write(9 - display);  		// 	digit address: (digit place)
 658:	89 e0       	ldi	r24, 0x09	; 9
 65a:	8c 1b       	sub	r24, r28
 65c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi_write>
	spi_write(number);			// 	digit value: 0
 660:	8d 2f       	mov	r24, r29
 662:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi_write>
	spi_slaveDeSelect(slaveAddress);		// Deselect display chip
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	0e 94 4f 04 	call	0x89e	; 0x89e <spi_slaveDeSelect>
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	08 95       	ret

Disassembly of section .text.Eight7seg_reset:

00000736 <Eight7seg_reset>:
		Eight7seg_displayOn();
		waitFunction(300);
	}
}

void Eight7seg_reset(){
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
	for (int i = 1; i < 9; i++)
 73a:	c1 e0       	ldi	r28, 0x01	; 1
 73c:	d0 e0       	ldi	r29, 0x00	; 0
 73e:	05 c0       	rjmp	.+10     	; 0x74a <Eight7seg_reset+0x14>
	{
		Eight7seg_writeToDisplay(i, 10);
 740:	6a e0       	ldi	r22, 0x0A	; 10
 742:	8c 2f       	mov	r24, r28
 744:	0e 94 21 03 	call	0x642	; 0x642 <Eight7seg_writeToDisplay>
		waitFunction(300);
	}
}

void Eight7seg_reset(){
	for (int i = 1; i < 9; i++)
 748:	21 96       	adiw	r28, 0x01	; 1
 74a:	c9 30       	cpi	r28, 0x09	; 9
 74c:	d1 05       	cpc	r29, r1
 74e:	c4 f3       	brlt	.-16     	; 0x740 <Eight7seg_reset+0xa>
	{
		Eight7seg_writeToDisplay(i, 10);
	}
}
 750:	df 91       	pop	r29
 752:	cf 91       	pop	r28
 754:	08 95       	ret

Disassembly of section .text.Eight7seg_Init:

000003c6 <Eight7seg_Init>:
#define slaveAddress 0

// Initialize the driver chip (type MAX 7219)
void Eight7seg_Init()
{
	DDRB=0x01;					  	// Set PB0 pin as output for display select
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();
 3ca:	0e 94 44 04 	call	0x888	; 0x888 <spi_masterInit>
	
	spi_slaveSelect(slaveAddress);				// Select display chip (MAX7219)
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 38 04 	call	0x870	; 0x870 <spi_slaveSelect>
	spi_write(0x09);      			// Register 09: Decode Mode
 3d4:	89 e0       	ldi	r24, 0x09	; 9
 3d6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi_write>
	spi_write(0xFF);				// 	-> 1's = BCD mode for all digits
 3da:	8f ef       	ldi	r24, 0xFF	; 255
 3dc:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi_write>
	spi_slaveDeSelect(slaveAddress);			// Deselect display chip
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 4f 04 	call	0x89e	; 0x89e <spi_slaveDeSelect>

	spi_slaveSelect(slaveAddress);				// Select display chip
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	0e 94 38 04 	call	0x870	; 0x870 <spi_slaveSelect>
	spi_write(0x0A);      			// Register 0A: Intensity
 3ec:	8a e0       	ldi	r24, 0x0A	; 10
 3ee:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi_write>
	spi_write(0x04);    			//  -> Level 4 (in range [1..F])
 3f2:	84 e0       	ldi	r24, 0x04	; 4
 3f4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi_write>
	spi_slaveDeSelect(slaveAddress);			// De select display chip
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 4f 04 	call	0x89e	; 0x89e <spi_slaveDeSelect>

	spi_slaveSelect(slaveAddress);				// Select display chip
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 38 04 	call	0x870	; 0x870 <spi_slaveSelect>
	spi_write(0x0B);  				// Register 0B: Scan-limit
 404:	8b e0       	ldi	r24, 0x0B	; 11
 406:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi_write>
	spi_write(0x07);   				// 	-> 1 = Display digits 0..1
 40a:	87 e0       	ldi	r24, 0x07	; 7
 40c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <spi_write>
	spi_slaveDeSelect(slaveAddress);			// Deselect display chip
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	0e 94 4f 04 	call	0x89e	; 0x89e <spi_slaveDeSelect>
	
	Eight7seg_displayOn();
 416:	0e 94 04 04 	call	0x808	; 0x808 <Eight7seg_displayOn>
	Eight7seg_reset();
 41a:	0e 94 9b 03 	call	0x736	; 0x736 <Eight7seg_reset>
 41e:	08 95       	ret

Disassembly of section .text.adc_init:

000008da <adc_init>:

static void adc_init()
{
	//Vref=5V
	//channel 1 at pin PF1
	ADMUX=0b11100001;
 8da:	81 ee       	ldi	r24, 0xE1	; 225
 8dc:	87 b9       	out	0x07, r24	; 7
	// ADSC=1 ADC Enable
	// ADPS[2:0]=111, prescaler=128
	// ADIE=1, ADC interrupt Enable
	//ADATE=1, ADC Auto Triggering Enable
	ADCSRA=(1<<ADEN)|(6<<ADPS0)|(1<<ADSC)|(1<<ADIE)|(1<<ADFR);
 8de:	8e ee       	ldi	r24, 0xEE	; 238
 8e0:	86 b9       	out	0x06, r24	; 6
	
	//ADTS[2:0]= 100 , Timer0 overflow select as trigger source
	SFIOR=(4<<5);
 8e2:	80 e8       	ldi	r24, 0x80	; 128
 8e4:	80 bd       	out	0x20, r24	; 32
 8e6:	08 95       	ret

Disassembly of section .text.adc_deinit:

000008f4 <adc_deinit>:
}

static void adc_deinit(){
	ADCSRA &= ~((1<<ADIE)|(1<<ADFR));
 8f4:	86 b1       	in	r24, 0x06	; 6
 8f6:	87 7d       	andi	r24, 0xD7	; 215
 8f8:	86 b9       	out	0x06, r24	; 6
 8fa:	08 95       	ret

Disassembly of section .text.ADCLaserIO_start:

000005ca <ADCLaserIO_start>:

static void adc_init();
static void adc_deinit();

void ADCLaserIO_start(void (*_ptr)(uInt16)){
	if(callback == NULL){
 5ca:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <callback>
 5ce:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <callback+0x1>
 5d2:	23 2b       	or	r18, r19
 5d4:	31 f4       	brne	.+12     	; 0x5e2 <ADCLaserIO_start+0x18>
		if (_ptr !=NULL) callback = _ptr;
 5d6:	00 97       	sbiw	r24, 0x00	; 0
 5d8:	21 f0       	breq	.+8      	; 0x5e2 <ADCLaserIO_start+0x18>
 5da:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <callback+0x1>
 5de:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <callback>
	}
	adc_init();
 5e2:	0e 94 6d 04 	call	0x8da	; 0x8da <adc_init>
	
	TCCR0=(5<<CS00);
 5e6:	85 e0       	ldi	r24, 0x05	; 5
 5e8:	83 bf       	out	0x33, r24	; 51
	TIMSK=(1<<TOIE0);
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	87 bf       	out	0x37, r24	; 55
	
	//Set port F1 to input
	DDRF &= ~(0x02);
 5ee:	e1 e6       	ldi	r30, 0x61	; 97
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	80 81       	ld	r24, Z
 5f4:	8d 7f       	andi	r24, 0xFD	; 253
 5f6:	80 83       	st	Z, r24
	//Set port D0 to output
	DDRD |= 0x01;
 5f8:	81 b3       	in	r24, 0x11	; 17
 5fa:	81 60       	ori	r24, 0x01	; 1
 5fc:	81 bb       	out	0x11, r24	; 17
	//Set port D0 high
	PORTD |= 0x01;
 5fe:	82 b3       	in	r24, 0x12	; 18
 600:	81 60       	ori	r24, 0x01	; 1
 602:	82 bb       	out	0x12, r24	; 18
	
	//Enable global interrupts
	sei();
 604:	78 94       	sei
 606:	08 95       	ret

Disassembly of section .text.ADCLaserIO_stop:

000008e8 <ADCLaserIO_stop>:
}

void ADCLaserIO_stop(){
	adc_deinit();
 8e8:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <adc_deinit>
	PORTD &= ~(0x01);
 8ec:	82 b3       	in	r24, 0x12	; 18
 8ee:	8e 7f       	andi	r24, 0xFE	; 254
 8f0:	82 bb       	out	0x12, r24	; 18
 8f2:	08 95       	ret

Disassembly of section .text.__vector_21:

000001e6 <__vector_21>:

/* 
	Interrupt service routine for ADC to check if
	laser has been interrupted.
*/
ISR(ADC_vect){
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	0b b6       	in	r0, 0x3b	; 59
 1f2:	0f 92       	push	r0
 1f4:	cf 92       	push	r12
 1f6:	df 92       	push	r13
 1f8:	ef 92       	push	r14
 1fa:	ff 92       	push	r15
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	7f 93       	push	r23
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	//Calculates the light value in percentages
	uInt16 value = (ADC) / 655;
 214:	84 b1       	in	r24, 0x04	; 4
 216:	95 b1       	in	r25, 0x05	; 5
 218:	6f e8       	ldi	r22, 0x8F	; 143
 21a:	72 e0       	ldi	r23, 0x02	; 2
 21c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__udivmodhi4>
 220:	6b 01       	movw	r12, r22
 222:	e1 2c       	mov	r14, r1
 224:	f1 2c       	mov	r15, r1
	
	if (value < TRIGGER_VALUE){
 226:	80 e5       	ldi	r24, 0x50	; 80
 228:	c8 16       	cp	r12, r24
 22a:	d1 04       	cpc	r13, r1
 22c:	e1 04       	cpc	r14, r1
 22e:	f1 04       	cpc	r15, r1
 230:	48 f4       	brcc	.+18     	; 0x244 <__vector_21+0x5e>
		ADCLaserIO_stop();
 232:	0e 94 74 04 	call	0x8e8	; 0x8e8 <ADCLaserIO_stop>
		callback(value);
 236:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <callback>
 23a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <callback+0x1>
 23e:	c7 01       	movw	r24, r14
 240:	b6 01       	movw	r22, r12
 242:	09 95       	icall
	}
}
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	bf 91       	pop	r27
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	7f 91       	pop	r23
 252:	6f 91       	pop	r22
 254:	5f 91       	pop	r21
 256:	4f 91       	pop	r20
 258:	3f 91       	pop	r19
 25a:	2f 91       	pop	r18
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	df 90       	pop	r13
 262:	cf 90       	pop	r12
 264:	0f 90       	pop	r0
 266:	0b be       	out	0x3b, r0	; 59
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

Disassembly of section .text.__vector_16:

000008b4 <__vector_16>:

/* 
	Necessary timer.
*/
 8b4:	1f 92       	push	r1
 8b6:	0f 92       	push	r0
 8b8:	0f b6       	in	r0, 0x3f	; 63
 8ba:	0f 92       	push	r0
 8bc:	11 24       	eor	r1, r1
 8be:	0f 90       	pop	r0
 8c0:	0f be       	out	0x3f, r0	; 63
 8c2:	0f 90       	pop	r0
 8c4:	1f 90       	pop	r1
 8c6:	18 95       	reti

Disassembly of section .text.Keypad_reset:

00000776 <Keypad_reset>:
	}
	
}

static void Keypad_reset(){
	inputIndex = 0;
 776:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <inputIndex+0x1>
 77a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <inputIndex>
	side = rotateRight;
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <side+0x1>
 786:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <side>
	currentNumber = 0;
 78a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <currentNumber+0x1>
 78e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <currentNumber>
 792:	08 95       	ret

Disassembly of section .text.Keypad_unlock:

00000272 <Keypad_unlock>:
		currentNumber = 9;
	}
	Eight7seg_writeToDisplay(inputIndex + 1, currentNumber);
}

static void Keypad_unlock(){
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
	
	Eight7seg_blink(3);
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 04 03 	call	0x608	; 0x608 <Eight7seg_blink>
	Eight7seg_reset();
 27e:	0e 94 9b 03 	call	0x736	; 0x736 <Eight7seg_reset>
	Keypad_reset();
 282:	0e 94 bb 03 	call	0x776	; 0x776 <Keypad_reset>
	
	for (int i = 0; i < 4; i++)
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	1f c0       	rjmp	.+62     	; 0x2ca <Keypad_unlock+0x58>
	{
		if (inputcode[i] != passcode[i]){
 28c:	c9 01       	movw	r24, r18
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	fc 01       	movw	r30, r24
 294:	e0 50       	subi	r30, 0x00	; 0
 296:	ff 4f       	sbci	r31, 0xFF	; 255
 298:	c0 81       	ld	r28, Z
 29a:	d1 81       	ldd	r29, Z+1	; 0x01
 29c:	09 2e       	mov	r0, r25
 29e:	00 0c       	add	r0, r0
 2a0:	aa 0b       	sbc	r26, r26
 2a2:	83 5c       	subi	r24, 0xC3	; 195
 2a4:	9e 4f       	sbci	r25, 0xFE	; 254
 2a6:	af 4f       	sbci	r26, 0xFF	; 255
 2a8:	fc 01       	movw	r30, r24
 2aa:	5a 2f       	mov	r21, r26
 2ac:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__xload_2>
 2b0:	c6 17       	cp	r28, r22
 2b2:	d7 07       	cpc	r29, r23
 2b4:	41 f0       	breq	.+16     	; 0x2c6 <Keypad_unlock+0x54>
			wrongCode_callback();
 2b6:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <wrongCode_callback>
 2ba:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <wrongCode_callback+0x1>
 2be:	09 95       	icall
			Eight7seg_reset();
 2c0:	0e 94 9b 03 	call	0x736	; 0x736 <Eight7seg_reset>
			return;
 2c4:	10 c0       	rjmp	.+32     	; 0x2e6 <Keypad_unlock+0x74>
	
	Eight7seg_blink(3);
	Eight7seg_reset();
	Keypad_reset();
	
	for (int i = 0; i < 4; i++)
 2c6:	2f 5f       	subi	r18, 0xFF	; 255
 2c8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ca:	24 30       	cpi	r18, 0x04	; 4
 2cc:	31 05       	cpc	r19, r1
 2ce:	f4 f2       	brlt	.-68     	; 0x28c <Keypad_unlock+0x1a>
			Eight7seg_reset();
			return;
		}
	}
	
	locked = 0;
 2d0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <locked+0x1>
 2d4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <locked>
	unlocked_callback();
 2d8:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <unlocked_callback>
 2dc:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <unlocked_callback+0x1>
 2e0:	09 95       	icall
	ADCLaserIO_stop();
 2e2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <ADCLaserIO_stop>
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

Disassembly of section .text.Keypad_rotate:

00000146 <Keypad_rotate>:
	side = rotateRight;
	currentNumber = 0;
}

static void Keypad_rotate(int rotate){
	if(rotate > 0)
 146:	18 16       	cp	r1, r24
 148:	19 06       	cpc	r1, r25
 14a:	1c f4       	brge	.+6      	; 0x152 <Keypad_rotate+0xc>
	rotate = rotateRight;
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <Keypad_rotate+0x10>
	else
	rotate = rotateLeft;
 152:	4f ef       	ldi	r20, 0xFF	; 255
 154:	5f ef       	ldi	r21, 0xFF	; 255
	
	if(side != rotate){
 156:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <side>
 15a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <side+0x1>
 15e:	48 17       	cp	r20, r24
 160:	59 07       	cpc	r21, r25
 162:	f9 f0       	breq	.+62     	; 0x1a2 <Keypad_rotate+0x5c>
		if(inputIndex >= 3){
 164:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <inputIndex>
 168:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <inputIndex+0x1>
 16c:	23 30       	cpi	r18, 0x03	; 3
 16e:	31 05       	cpc	r19, r1
 170:	1c f0       	brlt	.+6      	; 0x178 <Keypad_rotate+0x32>
			Keypad_unlock();
 172:	0e 94 39 01 	call	0x272	; 0x272 <Keypad_unlock>
			return;
 176:	08 95       	ret
		}
		side = rotate;
 178:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <side+0x1>
 17c:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <side>
		inputcode[inputIndex] = currentNumber;
 180:	f9 01       	movw	r30, r18
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	e0 50       	subi	r30, 0x00	; 0
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <currentNumber>
 18e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <currentNumber+0x1>
 192:	91 83       	std	Z+1, r25	; 0x01
 194:	80 83       	st	Z, r24
		inputIndex++;
 196:	2f 5f       	subi	r18, 0xFF	; 255
 198:	3f 4f       	sbci	r19, 0xFF	; 255
 19a:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <inputIndex+0x1>
 19e:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <inputIndex>
	}
	
	
	currentNumber += rotate;
 1a2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <currentNumber>
 1a6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <currentNumber+0x1>
 1aa:	84 0f       	add	r24, r20
 1ac:	95 1f       	adc	r25, r21
 1ae:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <currentNumber+0x1>
 1b2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <currentNumber>
	if(currentNumber > 9){
 1b6:	8a 30       	cpi	r24, 0x0A	; 10
 1b8:	91 05       	cpc	r25, r1
 1ba:	2c f0       	brlt	.+10     	; 0x1c6 <Keypad_rotate+0x80>
		currentNumber = 0;
 1bc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <currentNumber+0x1>
 1c0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <currentNumber>
 1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <Keypad_rotate+0x90>
		}else if(currentNumber < 0){
 1c6:	99 23       	and	r25, r25
 1c8:	34 f4       	brge	.+12     	; 0x1d6 <Keypad_rotate+0x90>
		currentNumber = 9;
 1ca:	89 e0       	ldi	r24, 0x09	; 9
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <currentNumber+0x1>
 1d2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <currentNumber>
	}
	Eight7seg_writeToDisplay(inputIndex + 1, currentNumber);
 1d6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <inputIndex>
 1da:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <currentNumber>
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	0e 94 21 03 	call	0x642	; 0x642 <Eight7seg_writeToDisplay>
 1e4:	08 95       	ret

Disassembly of section .text.Keypad_init:

00000756 <Keypad_init>:
static void Keypad_rotate(int rotate);
static void Keypad_unlock();
static void Keypad_reset();

void Keypad_init(void (*_locked)(), void (*_unlocked)(), void (*_wrongCode)()){
	locked_callback = _locked;
 756:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <locked_callback+0x1>
 75a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <locked_callback>
	unlocked_callback = _unlocked;
 75e:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <unlocked_callback+0x1>
 762:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <unlocked_callback>
	wrongCode_callback = _wrongCode;
 766:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <wrongCode_callback+0x1>
 76a:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <wrongCode_callback>
	DDRA &= ~(0x07);
 76e:	8a b3       	in	r24, 0x1a	; 26
 770:	88 7f       	andi	r24, 0xF8	; 248
 772:	8a bb       	out	0x1a, r24	; 26
 774:	08 95       	ret

Disassembly of section .text.Keypad_checkKey:

00000366 <Keypad_checkKey>:
}

void Keypad_checkKey(){
	int keys = PINA & 0x7;
 366:	89 b3       	in	r24, 0x19	; 25
	if(locked == 0)
 368:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <locked>
 36c:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <locked+0x1>
 370:	23 2b       	or	r18, r19
 372:	a1 f4       	brne	.+40     	; 0x39c <Keypad_checkKey+0x36>
	{
		if(keys & 4){
 374:	82 ff       	sbrs	r24, 2
 376:	26 c0       	rjmp	.+76     	; 0x3c4 <Keypad_checkKey+0x5e>
			locked = 1;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <locked+0x1>
 380:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <locked>
			Keypad_reset();
 384:	0e 94 bb 03 	call	0x776	; 0x776 <Keypad_reset>
			locked_callback();
 388:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <locked_callback>
 38c:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <locked_callback+0x1>
 390:	09 95       	icall
			ADCLaserIO_start(NULL);
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ADCLaserIO_start>
 39a:	08 95       	ret
		}
		return;
	}
	
	if(keys & 1){
 39c:	80 ff       	sbrs	r24, 0
 39e:	05 c0       	rjmp	.+10     	; 0x3aa <Keypad_checkKey+0x44>
		Keypad_rotate(rotateRight);
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 a3 00 	call	0x146	; 0x146 <Keypad_rotate>
 3a8:	08 95       	ret
		}else if(keys & 2){
 3aa:	81 ff       	sbrs	r24, 1
 3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <Keypad_checkKey+0x52>
		Keypad_rotate(rotateLeft);
 3ae:	8f ef       	ldi	r24, 0xFF	; 255
 3b0:	9f ef       	ldi	r25, 0xFF	; 255
 3b2:	0e 94 a3 00 	call	0x146	; 0x146 <Keypad_rotate>
 3b6:	08 95       	ret
		}else if(keys & 4){
 3b8:	82 ff       	sbrs	r24, 2
 3ba:	04 c0       	rjmp	.+8      	; 0x3c4 <Keypad_checkKey+0x5e>
		Eight7seg_reset();
 3bc:	0e 94 9b 03 	call	0x736	; 0x736 <Eight7seg_reset>
		Keypad_reset();
 3c0:	0e 94 bb 03 	call	0x776	; 0x776 <Keypad_reset>
 3c4:	08 95       	ret

Disassembly of section .text.lcd_strobe_lcd_e:

00000794 <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
 794:	8b b3       	in	r24, 0x1b	; 27
 796:	80 64       	ori	r24, 0x40	; 64
 798:	8b bb       	out	0x1b, r24	; 27
	waitFunction(1);			// nodig
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <waitFunction>
	PORTA &= ~(1<<LCD_E);  	// E low
 7a2:	8b b3       	in	r24, 0x1b	; 27
 7a4:	8f 7b       	andi	r24, 0xBF	; 191
 7a6:	8b bb       	out	0x1b, r24	; 27
	waitFunction(1);			// nodig?
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <waitFunction>
 7b0:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

00000548 <init_4bits_mode>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void init_4bits_mode(void) {
 548:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRD = 0xFF;
 54a:	8f ef       	ldi	r24, 0xFF	; 255
 54c:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
 54e:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 550:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 552:	1b ba       	out	0x1b, r1	; 27
	//PORTA = 0xFF;

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 554:	c0 e2       	ldi	r28, 0x20	; 32
 556:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 558:	0e 94 ca 03 	call	0x794	; 0x794 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 55c:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 55e:	0e 94 ca 03 	call	0x794	; 0x794 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 562:	80 e8       	ldi	r24, 0x80	; 128
 564:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 566:	0e 94 ca 03 	call	0x794	; 0x794 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 56a:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 56c:	0e 94 ca 03 	call	0x794	; 0x794 <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 570:	80 ef       	ldi	r24, 0xF0	; 240
 572:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 574:	0e 94 ca 03 	call	0x794	; 0x794 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 578:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 57a:	0e 94 ca 03 	call	0x794	; 0x794 <lcd_strobe_lcd_e>
	PORTC = 0x60;
 57e:	80 e6       	ldi	r24, 0x60	; 96
 580:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 582:	0e 94 ca 03 	call	0x794	; 0x794 <lcd_strobe_lcd_e>
}
 586:	cf 91       	pop	r28
 588:	08 95       	ret

Disassembly of section .text.lcd_write_data:

000006ee <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_data(unsigned char byte) {
 6ee:	cf 93       	push	r28
 6f0:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 6f2:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 6f4:	8b b3       	in	r24, 0x1b	; 27
 6f6:	80 61       	ori	r24, 0x10	; 16
 6f8:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 6fa:	0e 94 ca 03 	call	0x794	; 0x794 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 6fe:	c2 95       	swap	r28
 700:	c0 7f       	andi	r28, 0xF0	; 240
 702:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 704:	8b b3       	in	r24, 0x1b	; 27
 706:	80 61       	ori	r24, 0x10	; 16
 708:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 70a:	0e 94 ca 03 	call	0x794	; 0x794 <lcd_strobe_lcd_e>
}
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

Disassembly of section .text.display_text:

0000083c <display_text>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void display_text(char *str) {
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
 840:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 842:	03 c0       	rjmp	.+6      	; 0x84a <display_text+0xe>
		lcd_write_data(*str);
 844:	0e 94 77 03 	call	0x6ee	; 0x6ee <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 848:	21 96       	adiw	r28, 0x01	; 1
 84a:	88 81       	ld	r24, Y
 84c:	81 11       	cpse	r24, r1
 84e:	fa cf       	rjmp	.-12     	; 0x844 <display_text+0x8>
		lcd_write_data(*str);
	}
}
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	08 95       	ret

Disassembly of section .text.lcd_write_command:

00000712 <lcd_write_command>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_command(unsigned char byte) {
 712:	cf 93       	push	r28
 714:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 716:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 718:	8b b3       	in	r24, 0x1b	; 27
 71a:	8f 7e       	andi	r24, 0xEF	; 239
 71c:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 71e:	0e 94 ca 03 	call	0x794	; 0x794 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 722:	c2 95       	swap	r28
 724:	c0 7f       	andi	r28, 0xF0	; 240
 726:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 728:	8b b3       	in	r24, 0x1b	; 27
 72a:	8f 7e       	andi	r24, 0xEF	; 239
 72c:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 72e:	0e 94 ca 03 	call	0x794	; 0x794 <lcd_strobe_lcd_e>
}
 732:	cf 91       	pop	r28
 734:	08 95       	ret

Disassembly of section .text.lcd_clear:

00000856 <lcd_clear>:


void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	0e 94 89 03 	call	0x712	; 0x712 <lcd_write_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 85c:	8f e9       	ldi	r24, 0x9F	; 159
 85e:	9f e0       	ldi	r25, 0x0F	; 15
 860:	01 97       	sbiw	r24, 0x01	; 1
 862:	f1 f7       	brne	.-4      	; 0x860 <lcd_clear+0xa>
 864:	00 c0       	rjmp	.+0      	; 0x866 <lcd_clear+0x10>
 866:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 868:	80 e8       	ldi	r24, 0x80	; 128
 86a:	0e 94 89 03 	call	0x712	; 0x712 <lcd_write_command>
 86e:	08 95       	ret

Disassembly of section .text.lcd_init:

000007d0 <lcd_init>:
}

void lcd_init()
{
	DDRC = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 7d0:	8f ef       	ldi	r24, 0xFF	; 255
 7d2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 7d4:	85 bb       	out	0x15, r24	; 21
	
	// Init LCD
	init_4bits_mode();
 7d6:	0e 94 a4 02 	call	0x548	; 0x548 <init_4bits_mode>
 7da:	8f e1       	ldi	r24, 0x1F	; 31
 7dc:	9e e4       	ldi	r25, 0x4E	; 78
 7de:	01 97       	sbiw	r24, 0x01	; 1
 7e0:	f1 f7       	brne	.-4      	; 0x7de <lcd_init+0xe>
 7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <lcd_init+0x14>
 7e4:	00 00       	nop
	
	_delay_ms(10);
	
	lcd_clear();
 7e6:	0e 94 2b 04 	call	0x856	; 0x856 <lcd_clear>
 7ea:	08 95       	ret

Disassembly of section .text.main_alarm:

0000058a <main_alarm>:
#include "8t7seg/8t7seg.h"
#include "Timer/Timer.h"

#define  timeBeforeAlarm 30

void main_alarm(){
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	00 d0       	rcall	.+0      	; 0x590 <main_alarm+0x6>
 590:	00 d0       	rcall	.+0      	; 0x592 <main_alarm+0x8>
 592:	00 d0       	rcall	.+0      	; 0x594 <main_alarm+0xa>
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
	lcd_clear();
 598:	0e 94 2b 04 	call	0x856	; 0x856 <lcd_clear>
	char text[] = "Alarm";
 59c:	28 e0       	ldi	r18, 0x08	; 8
 59e:	31 e0       	ldi	r19, 0x01	; 1
 5a0:	40 e0       	ldi	r20, 0x00	; 0
 5a2:	86 e0       	ldi	r24, 0x06	; 6
 5a4:	f9 01       	movw	r30, r18
 5a6:	de 01       	movw	r26, r28
 5a8:	11 96       	adiw	r26, 0x01	; 1
 5aa:	74 2f       	mov	r23, r20
 5ac:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__movmemx_qi>
	display_text(text);
 5b0:	ce 01       	movw	r24, r28
 5b2:	01 96       	adiw	r24, 0x01	; 1
 5b4:	0e 94 1e 04 	call	0x83c	; 0x83c <display_text>
}
 5b8:	26 96       	adiw	r28, 0x06	; 6
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	f8 94       	cli
 5be:	de bf       	out	0x3e, r29	; 62
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	cd bf       	out	0x3d, r28	; 61
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	08 95       	ret

Disassembly of section .text.main_lcd_locked:

000004bc <main_lcd_locked>:
	display_text(text);
	
	Timer_init(main_alarm, timeBeforeAlarm);
}

void main_lcd_locked(){
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	cd b7       	in	r28, 0x3d	; 61
 4c2:	de b7       	in	r29, 0x3e	; 62
 4c4:	27 97       	sbiw	r28, 0x07	; 7
 4c6:	0f b6       	in	r0, 0x3f	; 63
 4c8:	f8 94       	cli
 4ca:	de bf       	out	0x3e, r29	; 62
 4cc:	0f be       	out	0x3f, r0	; 63
 4ce:	cd bf       	out	0x3d, r28	; 61
	lcd_clear();
 4d0:	0e 94 2b 04 	call	0x856	; 0x856 <lcd_clear>
	char text[] = "locked";
 4d4:	2e e0       	ldi	r18, 0x0E	; 14
 4d6:	31 e0       	ldi	r19, 0x01	; 1
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	87 e0       	ldi	r24, 0x07	; 7
 4dc:	f9 01       	movw	r30, r18
 4de:	de 01       	movw	r26, r28
 4e0:	11 96       	adiw	r26, 0x01	; 1
 4e2:	74 2f       	mov	r23, r20
 4e4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__movmemx_qi>
	display_text(text);
 4e8:	ce 01       	movw	r24, r28
 4ea:	01 96       	adiw	r24, 0x01	; 1
 4ec:	0e 94 1e 04 	call	0x83c	; 0x83c <display_text>
}
 4f0:	27 96       	adiw	r28, 0x07	; 7
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	de bf       	out	0x3e, r29	; 62
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	cd bf       	out	0x3d, r28	; 61
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

Disassembly of section .text.main_lcd_wrongCode:

00000502 <main_lcd_wrongCode>:
	display_text(text);
	
	Timer_deInit();
}

void main_lcd_wrongCode(){
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	cd b7       	in	r28, 0x3d	; 61
 508:	de b7       	in	r29, 0x3e	; 62
 50a:	65 97       	sbiw	r28, 0x15	; 21
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	f8 94       	cli
 510:	de bf       	out	0x3e, r29	; 62
 512:	0f be       	out	0x3f, r0	; 63
 514:	cd bf       	out	0x3d, r28	; 61
	lcd_clear();
 516:	0e 94 2b 04 	call	0x856	; 0x856 <lcd_clear>
	char text[] = "wrong code try again";
 51a:	25 e1       	ldi	r18, 0x15	; 21
 51c:	31 e0       	ldi	r19, 0x01	; 1
 51e:	40 e0       	ldi	r20, 0x00	; 0
 520:	85 e1       	ldi	r24, 0x15	; 21
 522:	f9 01       	movw	r30, r18
 524:	de 01       	movw	r26, r28
 526:	11 96       	adiw	r26, 0x01	; 1
 528:	74 2f       	mov	r23, r20
 52a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__movmemx_qi>
	display_text(text);
 52e:	ce 01       	movw	r24, r28
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	0e 94 1e 04 	call	0x83c	; 0x83c <display_text>
}
 536:	65 96       	adiw	r28, 0x15	; 21
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	08 95       	ret

Disassembly of section .text.main_laserCallback:

00000420 <main_laserCallback>:
	lcd_clear();
	char text[] = "Alarm";
	display_text(text);
}

void main_laserCallback(uInt16 value){
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
 428:	2a 97       	sbiw	r28, 0x0a	; 10
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	f8 94       	cli
 42e:	de bf       	out	0x3e, r29	; 62
 430:	0f be       	out	0x3f, r0	; 63
 432:	cd bf       	out	0x3d, r28	; 61
	lcd_clear();
 434:	0e 94 2b 04 	call	0x856	; 0x856 <lcd_clear>
	char text[] = "Triggered";
 438:	2a e2       	ldi	r18, 0x2A	; 42
 43a:	31 e0       	ldi	r19, 0x01	; 1
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	8a e0       	ldi	r24, 0x0A	; 10
 440:	f9 01       	movw	r30, r18
 442:	de 01       	movw	r26, r28
 444:	11 96       	adiw	r26, 0x01	; 1
 446:	74 2f       	mov	r23, r20
 448:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__movmemx_qi>
	display_text(text);
 44c:	ce 01       	movw	r24, r28
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	0e 94 1e 04 	call	0x83c	; 0x83c <display_text>
	
	Timer_init(main_alarm, timeBeforeAlarm);
 454:	6e e1       	ldi	r22, 0x1E	; 30
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	85 ec       	ldi	r24, 0xC5	; 197
 45a:	92 e0       	ldi	r25, 0x02	; 2
 45c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Timer_init>
}
 460:	2a 96       	adiw	r28, 0x0a	; 10
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	f8 94       	cli
 466:	de bf       	out	0x3e, r29	; 62
 468:	0f be       	out	0x3f, r0	; 63
 46a:	cd bf       	out	0x3d, r28	; 61
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

Disassembly of section .text.main_lcd_unlocked:

00000472 <main_lcd_unlocked>:
	lcd_clear();
	char text[] = "locked";
	display_text(text);
}

void main_lcd_unlocked(){
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	29 97       	sbiw	r28, 0x09	; 9
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	de bf       	out	0x3e, r29	; 62
 482:	0f be       	out	0x3f, r0	; 63
 484:	cd bf       	out	0x3d, r28	; 61
	lcd_clear();
 486:	0e 94 2b 04 	call	0x856	; 0x856 <lcd_clear>
	char text[] = "unlocked";
 48a:	24 e3       	ldi	r18, 0x34	; 52
 48c:	31 e0       	ldi	r19, 0x01	; 1
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	89 e0       	ldi	r24, 0x09	; 9
 492:	f9 01       	movw	r30, r18
 494:	de 01       	movw	r26, r28
 496:	11 96       	adiw	r26, 0x01	; 1
 498:	74 2f       	mov	r23, r20
 49a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__movmemx_qi>
	display_text(text);
 49e:	ce 01       	movw	r24, r28
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	0e 94 1e 04 	call	0x83c	; 0x83c <display_text>
	
	Timer_deInit();
 4a6:	0e 94 82 04 	call	0x904	; 0x904 <Timer_deInit>
}
 4aa:	29 96       	adiw	r28, 0x09	; 9
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	f8 94       	cli
 4b0:	de bf       	out	0x3e, r29	; 62
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	cd bf       	out	0x3d, r28	; 61
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

Disassembly of section .text.main:

00000672 <main>:

int main(void)
{
	
	
	lcd_init();
 672:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <lcd_init>
	
	Eight7seg_Init();
 676:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Eight7seg_Init>
	Keypad_init(main_lcd_locked, main_lcd_unlocked, main_lcd_wrongCode);
 67a:	41 e8       	ldi	r20, 0x81	; 129
 67c:	52 e0       	ldi	r21, 0x02	; 2
 67e:	69 e3       	ldi	r22, 0x39	; 57
 680:	72 e0       	ldi	r23, 0x02	; 2
 682:	8e e5       	ldi	r24, 0x5E	; 94
 684:	92 e0       	ldi	r25, 0x02	; 2
 686:	0e 94 ab 03 	call	0x756	; 0x756 <Keypad_init>
	
	ADCLaserIO_start(main_laserCallback);
 68a:	80 e1       	ldi	r24, 0x10	; 16
 68c:	92 e0       	ldi	r25, 0x02	; 2
 68e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ADCLaserIO_start>
	
	while(1){
		Keypad_checkKey();
 692:	0e 94 b3 01 	call	0x366	; 0x366 <Keypad_checkKey>
		waitFunction(100);
 696:	84 e6       	ldi	r24, 0x64	; 100
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <waitFunction>
 69e:	f9 cf       	rjmp	.-14     	; 0x692 <main+0x20>

Disassembly of section .text.spi_masterInit:

00000888 <spi_masterInit>:
#define SPI_SS		0						// PB0: spi Pin Slave Select
 

void spi_masterInit(void)
{
	DDR_SPI = 0xff;							// All pins output: MOSI, SCK, SS, SS_display as output
 888:	8f ef       	ldi	r24, 0xFF	; 255
 88a:	87 bb       	out	0x17, r24	; 23
	DDR_SPI &= ~BIT(SPI_MISO);				// 	except: MISO input
 88c:	87 b3       	in	r24, 0x17	; 23
 88e:	87 7f       	andi	r24, 0xF7	; 247
 890:	87 bb       	out	0x17, r24	; 23
	PORT_SPI |= BIT(SPI_SS);				// SS_ADC == 1: deselect slave
 892:	88 b3       	in	r24, 0x18	; 24
 894:	81 60       	ori	r24, 0x01	; 1
 896:	88 bb       	out	0x18, r24	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);	// or: SPCR = 0b11010010;
 898:	82 e5       	ldi	r24, 0x52	; 82
 89a:	8d b9       	out	0x0d, r24	; 13
 89c:	08 95       	ret

Disassembly of section .text.spi_write:

000008fc <spi_write>:


// Write a byte from master to slave
void spi_write( unsigned char data )
{
	SPDR = data;							// Load byte to Data register --> starts transmission
 8fc:	8f b9       	out	0x0f, r24	; 15
	while( !(SPSR & BIT(SPIF)) ); 			// Wait for transmission complete
 8fe:	77 9b       	sbis	0x0e, 7	; 14
 900:	fe cf       	rjmp	.-4      	; 0x8fe <spi_write+0x2>
}
 902:	08 95       	ret

Disassembly of section .text.spi_slaveSelect:

00000870 <spi_slaveSelect>:
}

// Select device on pinnumer PORTB
void spi_slaveSelect(unsigned char chipNumber)
{
	PORTB &= ~BIT(chipNumber);
 870:	98 b3       	in	r25, 0x18	; 24
 872:	21 e0       	ldi	r18, 0x01	; 1
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	02 c0       	rjmp	.+4      	; 0x87c <spi_slaveSelect+0xc>
 878:	22 0f       	add	r18, r18
 87a:	33 1f       	adc	r19, r19
 87c:	8a 95       	dec	r24
 87e:	e2 f7       	brpl	.-8      	; 0x878 <spi_slaveSelect+0x8>
 880:	20 95       	com	r18
 882:	29 23       	and	r18, r25
 884:	28 bb       	out	0x18, r18	; 24
 886:	08 95       	ret

Disassembly of section .text.spi_slaveDeSelect:

0000089e <spi_slaveDeSelect>:

// Deselect device on pinnumer PORTB
void spi_slaveDeSelect(unsigned char chipNumber)
{

	PORTB |= BIT(chipNumber);
 89e:	98 b3       	in	r25, 0x18	; 24
 8a0:	21 e0       	ldi	r18, 0x01	; 1
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <spi_slaveDeSelect+0xc>
 8a6:	22 0f       	add	r18, r18
 8a8:	33 1f       	adc	r19, r19
 8aa:	8a 95       	dec	r24
 8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <spi_slaveDeSelect+0x8>
 8ae:	29 2b       	or	r18, r25
 8b0:	28 bb       	out	0x18, r18	; 24
 8b2:	08 95       	ret

Disassembly of section .text.Timer_init:

000006c8 <Timer_init>:
volatile int remainingTime = 30;

static void (*alarmCallback)(void) = NULL;

void Timer_init(void (*_alarmCallback)(void), int _remainingTime){
	alarmCallback = _alarmCallback;
 6c8:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <alarmCallback+0x1>
 6cc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <alarmCallback>
	remainingTime = _remainingTime;
 6d0:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <remainingTime+0x1>
 6d4:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <remainingTime>
	OCR1A = 31500;			// 16-bits compare value of counter 1
 6d8:	8c e0       	ldi	r24, 0x0C	; 12
 6da:	9b e7       	ldi	r25, 0x7B	; 123
 6dc:	9b bd       	out	0x2b, r25	; 43
 6de:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= BIT(4);		// T1 compare match A interrupt enable
 6e0:	87 b7       	in	r24, 0x37	; 55
 6e2:	80 61       	ori	r24, 0x10	; 16
 6e4:	87 bf       	out	0x37, r24	; 55
	sei();
 6e6:	78 94       	sei
	TCCR1B = 0b00001100;	// compare output disconnected, CTC, RUN
 6e8:	8c e0       	ldi	r24, 0x0C	; 12
 6ea:	8e bd       	out	0x2e, r24	; 46
 6ec:	08 95       	ret

Disassembly of section .text.Timer_deInit:

00000904 <Timer_deInit>:
}

void Timer_deInit(){
	TIMSK &= ~(BIT(4));		// T1 compare match A interrupt enable
 904:	87 b7       	in	r24, 0x37	; 55
 906:	8f 7e       	andi	r24, 0xEF	; 239
 908:	87 bf       	out	0x37, r24	; 55
 90a:	08 95       	ret

Disassembly of section .text.__vector_12:

000002ec <__vector_12>:
}

ISR(TIMER1_COMPA_vect) {
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	0b b6       	in	r0, 0x3b	; 59
 2f8:	0f 92       	push	r0
 2fa:	2f 93       	push	r18
 2fc:	3f 93       	push	r19
 2fe:	4f 93       	push	r20
 300:	5f 93       	push	r21
 302:	6f 93       	push	r22
 304:	7f 93       	push	r23
 306:	8f 93       	push	r24
 308:	9f 93       	push	r25
 30a:	af 93       	push	r26
 30c:	bf 93       	push	r27
 30e:	ef 93       	push	r30
 310:	ff 93       	push	r31
	remainingTime--;
 312:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <remainingTime>
 316:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <remainingTime+0x1>
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <remainingTime+0x1>
 320:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <remainingTime>
	
	if (remainingTime < 1){
 324:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <remainingTime>
 328:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <remainingTime+0x1>
 32c:	18 16       	cp	r1, r24
 32e:	19 06       	cpc	r1, r25
 330:	3c f0       	brlt	.+14     	; 0x340 <__vector_12+0x54>
		Timer_deInit();
 332:	0e 94 82 04 	call	0x904	; 0x904 <Timer_deInit>
		alarmCallback(); 
 336:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <alarmCallback>
 33a:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <alarmCallback+0x1>
 33e:	09 95       	icall
	}
}
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	7f 91       	pop	r23
 34e:	6f 91       	pop	r22
 350:	5f 91       	pop	r21
 352:	4f 91       	pop	r20
 354:	3f 91       	pop	r19
 356:	2f 91       	pop	r18
 358:	0f 90       	pop	r0
 35a:	0b be       	out	0x3b, r0	; 59
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

Disassembly of section .text.waitFunction:

000007b2 <waitFunction>:
notes:			Busy wait, not very accurate. Make sure (external)
				clock value is set. This is used by _delay_ms inside
				until/delay.h
***********************/
{
	for (int i=0; i<ms; i++) {
 7b2:	20 e0       	ldi	r18, 0x00	; 0
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	08 c0       	rjmp	.+16     	; 0x7c8 <waitFunction+0x16>
 7b8:	ef ec       	ldi	r30, 0xCF	; 207
 7ba:	f7 e0       	ldi	r31, 0x07	; 7
 7bc:	31 97       	sbiw	r30, 0x01	; 1
 7be:	f1 f7       	brne	.-4      	; 0x7bc <waitFunction+0xa>
 7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <waitFunction+0x10>
 7c2:	00 00       	nop
 7c4:	2f 5f       	subi	r18, 0xFF	; 255
 7c6:	3f 4f       	sbci	r19, 0xFF	; 255
 7c8:	28 17       	cp	r18, r24
 7ca:	39 07       	cpc	r19, r25
 7cc:	ac f3       	brlt	.-22     	; 0x7b8 <waitFunction+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 7ce:	08 95       	ret

Disassembly of section .text.libgcc.div:

000006a0 <__udivmodhi4>:
 6a0:	aa 1b       	sub	r26, r26
 6a2:	bb 1b       	sub	r27, r27
 6a4:	51 e1       	ldi	r21, 0x11	; 17
 6a6:	07 c0       	rjmp	.+14     	; 0x6b6 <__udivmodhi4_ep>

000006a8 <__udivmodhi4_loop>:
 6a8:	aa 1f       	adc	r26, r26
 6aa:	bb 1f       	adc	r27, r27
 6ac:	a6 17       	cp	r26, r22
 6ae:	b7 07       	cpc	r27, r23
 6b0:	10 f0       	brcs	.+4      	; 0x6b6 <__udivmodhi4_ep>
 6b2:	a6 1b       	sub	r26, r22
 6b4:	b7 0b       	sbc	r27, r23

000006b6 <__udivmodhi4_ep>:
 6b6:	88 1f       	adc	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	5a 95       	dec	r21
 6bc:	a9 f7       	brne	.-22     	; 0x6a8 <__udivmodhi4_loop>
 6be:	80 95       	com	r24
 6c0:	90 95       	com	r25
 6c2:	bc 01       	movw	r22, r24
 6c4:	cd 01       	movw	r24, r26
 6c6:	08 95       	ret

Disassembly of section .text.libgcc:

000008c8 <__xload_2>:
 8c8:	57 fd       	sbrc	r21, 7
 8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <__xload_2+0xc>
 8cc:	5b bf       	out	0x3b, r21	; 59
 8ce:	67 91       	elpm	r22, Z+
 8d0:	77 91       	elpm	r23, Z+
 8d2:	08 95       	ret
 8d4:	61 91       	ld	r22, Z+
 8d6:	71 91       	ld	r23, Z+
 8d8:	08 95       	ret

Disassembly of section .text.libgcc:

000007ec <__movmemx_qi>:
 7ec:	99 27       	eor	r25, r25

000007ee <__movmemx_hi>:
 7ee:	77 fd       	sbrc	r23, 7
 7f0:	06 c0       	rjmp	.+12     	; 0x7fe <__movmemx_hi+0x10>
 7f2:	7b bf       	out	0x3b, r23	; 59
 7f4:	07 90       	elpm	r0, Z+
 7f6:	0d 92       	st	X+, r0
 7f8:	01 97       	sbiw	r24, 0x01	; 1
 7fa:	e1 f7       	brne	.-8      	; 0x7f4 <__movmemx_hi+0x6>
 7fc:	08 95       	ret
 7fe:	01 90       	ld	r0, Z+
 800:	0d 92       	st	X+, r0
 802:	01 97       	sbiw	r24, 0x01	; 1
 804:	e1 f7       	brne	.-8      	; 0x7fe <__movmemx_hi+0x10>
 806:	08 95       	ret
