
SecuritySystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003e0  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800100  00800100  000003e0  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  0000040f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001276  00000000  00000000  000004af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a3e  00000000  00000000  00001725  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000609  00000000  00000000  00002163  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  0000276c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000294  00000000  00000000  000028fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000042f  00000000  00000000  00002b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000368  00000368  000003dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003040  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.lcd_strobe_lcd_e 00000026  0000024c  0000024c  000002c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.init_4bits_mode 00000042  000001b6  000001b6  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_data 00000024  00000272  00000272  000002e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.display_text 0000001a  000002f4  000002f4  00000368  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_write_command 00000024  00000296  00000296  0000030a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_clear 0000001a  0000030e  0000030e  00000382  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.init    00000016  00000328  00000328  0000039c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.waitFunction 0000001e  000002ba  000002ba  0000032e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.adc_init 0000000e  00000352  00000352  000003c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.adc_deinit 00000008  00000360  00000360  000003d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .progmemx.data 0000000a  000000ea  000000ea  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 25 .text.__vector_21 000000c2  000000f4  000000f4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__vector_16 00000014  0000033e  0000033e  000003b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.main    0000002c  000001f8  000001f8  0000026c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.libgcc.div 00000028  00000224  00000224  00000298  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.libgcc  0000001c  000002d8  000002d8  0000034c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
   8:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
   c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  10:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  14:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  18:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  1c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  20:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  24:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  28:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  2c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  30:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  34:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  38:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  3c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  40:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_16>
  44:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  48:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  4c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  50:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_21>
  58:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  5c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  60:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  64:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  68:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  6c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  70:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  74:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  78:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  7c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  80:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  84:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
  88:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 18       	sub	r0, r1
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

00000368 <__bad_interrupt>:
 368:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_strobe_lcd_e:

0000024c <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
 24c:	8b b3       	in	r24, 0x1b	; 27
 24e:	80 64       	ori	r24, 0x40	; 64
 250:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	8f ec       	ldi	r24, 0xCF	; 207
 254:	97 e0       	ldi	r25, 0x07	; 7
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_strobe_lcd_e+0xa>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_strobe_lcd_e+0x10>
 25c:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTA &= ~(1<<LCD_E);  	// E low
 25e:	8b b3       	in	r24, 0x1b	; 27
 260:	8f 7b       	andi	r24, 0xBF	; 191
 262:	8b bb       	out	0x1b, r24	; 27
 264:	8f ec       	ldi	r24, 0xCF	; 207
 266:	97 e0       	ldi	r25, 0x07	; 7
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_strobe_lcd_e+0x1c>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_strobe_lcd_e+0x22>
 26e:	00 00       	nop
 270:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

000001b6 <init_4bits_mode>:
*******************************************************************/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 1b6:	cf 93       	push	r28
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	81 bb       	out	0x11, r24	; 17
 1bc:	8a bb       	out	0x1a, r24	; 26
 1be:	15 ba       	out	0x15, r1	; 21
 1c0:	1b ba       	out	0x1b, r1	; 27
 1c2:	c0 e2       	ldi	r28, 0x20	; 32
 1c4:	c5 bb       	out	0x15, r28	; 21
 1c6:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_strobe_lcd_e>
 1ca:	c5 bb       	out	0x15, r28	; 21
 1cc:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_strobe_lcd_e>
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	85 bb       	out	0x15, r24	; 21
 1d4:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_strobe_lcd_e>
 1d8:	15 ba       	out	0x15, r1	; 21
 1da:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_strobe_lcd_e>
 1de:	80 ef       	ldi	r24, 0xF0	; 240
 1e0:	85 bb       	out	0x15, r24	; 21
 1e2:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_strobe_lcd_e>
 1e6:	15 ba       	out	0x15, r1	; 21
 1e8:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_strobe_lcd_e>
 1ec:	80 e6       	ldi	r24, 0x60	; 96
 1ee:	85 bb       	out	0x15, r24	; 21
 1f0:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_strobe_lcd_e>
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

Disassembly of section .text.lcd_write_data:

00000272 <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_data(unsigned char byte) {
 272:	cf 93       	push	r28
 274:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 276:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 278:	8b b3       	in	r24, 0x1b	; 27
 27a:	80 61       	ori	r24, 0x10	; 16
 27c:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 27e:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 282:	c2 95       	swap	r28
 284:	c0 7f       	andi	r28, 0xF0	; 240
 286:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 288:	8b b3       	in	r24, 0x1b	; 27
 28a:	80 61       	ori	r24, 0x10	; 16
 28c:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 28e:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_strobe_lcd_e>
}
 292:	cf 91       	pop	r28
 294:	08 95       	ret

Disassembly of section .text.display_text:

000002f4 <display_text>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void display_text(char *str) {
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <display_text+0xe>
		lcd_write_data(*str);
 2fc:	0e 94 39 01 	call	0x272	; 0x272 <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 300:	21 96       	adiw	r28, 0x01	; 1
 302:	88 81       	ld	r24, Y
 304:	81 11       	cpse	r24, r1
 306:	fa cf       	rjmp	.-12     	; 0x2fc <display_text+0x8>
		lcd_write_data(*str);
	}
}
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

Disassembly of section .text.lcd_write_command:

00000296 <lcd_write_command>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_command(unsigned char byte) {
 296:	cf 93       	push	r28
 298:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 29a:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 29c:	8b b3       	in	r24, 0x1b	; 27
 29e:	8f 7e       	andi	r24, 0xEF	; 239
 2a0:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 2a2:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 2a6:	c2 95       	swap	r28
 2a8:	c0 7f       	andi	r28, 0xF0	; 240
 2aa:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 2ac:	8b b3       	in	r24, 0x1b	; 27
 2ae:	8f 7e       	andi	r24, 0xEF	; 239
 2b0:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 2b2:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_strobe_lcd_e>
}
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

Disassembly of section .text.lcd_clear:

0000030e <lcd_clear>:


void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_write_command>
 314:	8f e9       	ldi	r24, 0x9F	; 159
 316:	9f e0       	ldi	r25, 0x0F	; 15
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <lcd_clear+0xa>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <lcd_clear+0x10>
 31e:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 320:	80 e8       	ldi	r24, 0x80	; 128
 322:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_write_command>
 326:	08 95       	ret

Disassembly of section .text.init:

00000328 <init>:

void init()
{
	
	// Init LCD
	init_4bits_mode();
 328:	0e 94 db 00 	call	0x1b6	; 0x1b6 <init_4bits_mode>
 32c:	8f e1       	ldi	r24, 0x1F	; 31
 32e:	9e e4       	ldi	r25, 0x4E	; 78
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <init+0x8>
 334:	00 c0       	rjmp	.+0      	; 0x336 <init+0xe>
 336:	00 00       	nop
	
	_delay_ms(10);
	
	lcd_clear();
 338:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_clear>
 33c:	08 95       	ret

Disassembly of section .text.waitFunction:

000002ba <waitFunction>:
notes:			Busy wait, not very accurate. Make sure (external)
				clock value is set. This is used by _delay_ms inside
				until/delay.h
***********************/
{
	for (int i=0; i<ms; i++) {
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	08 c0       	rjmp	.+16     	; 0x2d0 <waitFunction+0x16>
 2c0:	ef ec       	ldi	r30, 0xCF	; 207
 2c2:	f7 e0       	ldi	r31, 0x07	; 7
 2c4:	31 97       	sbiw	r30, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <waitFunction+0xa>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <waitFunction+0x10>
 2ca:	00 00       	nop
 2cc:	2f 5f       	subi	r18, 0xFF	; 255
 2ce:	3f 4f       	sbci	r19, 0xFF	; 255
 2d0:	28 17       	cp	r18, r24
 2d2:	39 07       	cpc	r19, r25
 2d4:	ac f3       	brlt	.-22     	; 0x2c0 <waitFunction+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 2d6:	08 95       	ret

Disassembly of section .text.adc_init:

00000352 <adc_init>:
#include "LCD.H"
#include <avr/interrupt.h>

void adc_init()// ADC configuration
{
	ADMUX=0b11100001;//Vref=AVcc
 352:	81 ee       	ldi	r24, 0xE1	; 225
 354:	87 b9       	out	0x07, r24	; 7
	// ADSC=1 ADC Enable
	// ADPS[2:0]=111, prescaler=128
	// ADIE=1, ADC interrupt Enable
	//ADATE=1, ADC Auto Triggering Enable
	ADCSRA=(1<<ADEN)|(6<<ADPS0)|(1<<ADSC)|(1<<ADIE)|(1<<ADFR);
 356:	8e ee       	ldi	r24, 0xEE	; 238
 358:	86 b9       	out	0x06, r24	; 6
	
	//ADTS[2:0]= 100 , Timer0 overflow select as trigger source
	SFIOR=(4<<5);
 35a:	80 e8       	ldi	r24, 0x80	; 128
 35c:	80 bd       	out	0x20, r24	; 32
 35e:	08 95       	ret

Disassembly of section .text.adc_deinit:

00000360 <adc_deinit>:
}

void adc_deinit(){
	ADMUX = 0x00;
 360:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x00;
 362:	16 b8       	out	0x06, r1	; 6
	SFIOR = 0x00;
 364:	10 bc       	out	0x20, r1	; 32
 366:	08 95       	ret

Disassembly of section .text.__vector_21:

000000f4 <__vector_21>:
}
unsigned long int waarde;
char text_print[20];
ISR(ADC_vect) {
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	0b b6       	in	r0, 0x3b	; 59
 100:	0f 92       	push	r0
 102:	2f 93       	push	r18
 104:	3f 93       	push	r19
 106:	4f 93       	push	r20
 108:	5f 93       	push	r21
 10a:	6f 93       	push	r22
 10c:	7f 93       	push	r23
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	2a 97       	sbiw	r28, 0x0a	; 10
 124:	de bf       	out	0x3e, r29	; 62
 126:	cd bf       	out	0x3d, r28	; 61
	lcd_clear();
 128:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_clear>
	
	waarde =(ADC) / 655;
 12c:	84 b1       	in	r24, 0x04	; 4
 12e:	95 b1       	in	r25, 0x05	; 5
 130:	6f e8       	ldi	r22, 0x8F	; 143
 132:	72 e0       	ldi	r23, 0x02	; 2
 134:	0e 94 12 01 	call	0x224	; 0x224 <__udivmodhi4>
 138:	cb 01       	movw	r24, r22
 13a:	a0 e0       	ldi	r26, 0x00	; 0
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 142:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 146:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 14a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	if (waarde < 80){
 14e:	80 35       	cpi	r24, 0x50	; 80
 150:	91 05       	cpc	r25, r1
 152:	a1 05       	cpc	r26, r1
 154:	b1 05       	cpc	r27, r1
 156:	80 f4       	brcc	.+32     	; 0x178 <__vector_21+0x84>
		char text[] = "Triggered";
 158:	2a ee       	ldi	r18, 0xEA	; 234
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	8a e0       	ldi	r24, 0x0A	; 10
 160:	f9 01       	movw	r30, r18
 162:	de 01       	movw	r26, r28
 164:	11 96       	adiw	r26, 0x01	; 1
 166:	74 2f       	mov	r23, r20
 168:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__movmemx_qi>
		display_text(text);
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <display_text>
		
		adc_deinit();
 174:	0e 94 b0 01 	call	0x360	; 0x360 <adc_deinit>
	}
	waitFunction(100);
 178:	84 e6       	ldi	r24, 0x64	; 100
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <waitFunction>
}
 180:	2a 96       	adiw	r28, 0x0a	; 10
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0b be       	out	0x3b, r0	; 59
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

Disassembly of section .text.__vector_16:

0000033e <__vector_16>:

ISR(TIMER0_OVF_vect){
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
	
}
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

Disassembly of section .text.main:

000001f8 <main>:

int main(void)
{
	DDRC = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	c4 bb       	out	0x14, r28	; 20
	PORTC = 0xFF;
 1fc:	c5 bb       	out	0x15, r28	; 21
	init();
 1fe:	0e 94 94 01 	call	0x328	; 0x328 <init>
	
	DDRF = 0x00;
 202:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0xFF;
 206:	ca bb       	out	0x1a, r28	; 26
	DDRB = 0xFF;
 208:	c7 bb       	out	0x17, r28	; 23
	
	//ADC interrupts
	adc_init();
 20a:	0e 94 a9 01 	call	0x352	; 0x352 <adc_init>
	
	TCCR0=(5<<CS00);
 20e:	85 e0       	ldi	r24, 0x05	; 5
 210:	83 bf       	out	0x33, r24	; 51
	TIMSK=(1<<TOIE0);
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	87 bf       	out	0x37, r24	; 55
	
	sei();
 216:	78 94       	sei
	//Testing for waarde from light resistor
	unsigned long int waarde;
	long l = 0;
	long h  = 0;
	
	DDRD = 0x00;
 218:	11 ba       	out	0x11, r1	; 17
		//display_text(text_print);
		//waitFunction(100);
		//
		//lcd_clear();
		
		waitFunction(100);
 21a:	84 e6       	ldi	r24, 0x64	; 100
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <waitFunction>
 222:	fb cf       	rjmp	.-10     	; 0x21a <main+0x22>

Disassembly of section .text.libgcc.div:

00000224 <__udivmodhi4>:
 224:	aa 1b       	sub	r26, r26
 226:	bb 1b       	sub	r27, r27
 228:	51 e1       	ldi	r21, 0x11	; 17
 22a:	07 c0       	rjmp	.+14     	; 0x23a <__udivmodhi4_ep>

0000022c <__udivmodhi4_loop>:
 22c:	aa 1f       	adc	r26, r26
 22e:	bb 1f       	adc	r27, r27
 230:	a6 17       	cp	r26, r22
 232:	b7 07       	cpc	r27, r23
 234:	10 f0       	brcs	.+4      	; 0x23a <__udivmodhi4_ep>
 236:	a6 1b       	sub	r26, r22
 238:	b7 0b       	sbc	r27, r23

0000023a <__udivmodhi4_ep>:
 23a:	88 1f       	adc	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	5a 95       	dec	r21
 240:	a9 f7       	brne	.-22     	; 0x22c <__udivmodhi4_loop>
 242:	80 95       	com	r24
 244:	90 95       	com	r25
 246:	bc 01       	movw	r22, r24
 248:	cd 01       	movw	r24, r26
 24a:	08 95       	ret

Disassembly of section .text.libgcc:

000002d8 <__movmemx_qi>:
 2d8:	99 27       	eor	r25, r25

000002da <__movmemx_hi>:
 2da:	77 fd       	sbrc	r23, 7
 2dc:	06 c0       	rjmp	.+12     	; 0x2ea <__movmemx_hi+0x10>
 2de:	7b bf       	out	0x3b, r23	; 59
 2e0:	07 90       	elpm	r0, Z+
 2e2:	0d 92       	st	X+, r0
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <__movmemx_hi+0x6>
 2e8:	08 95       	ret
 2ea:	01 90       	ld	r0, Z+
 2ec:	0d 92       	st	X+, r0
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <__movmemx_hi+0x10>
 2f2:	08 95       	ret
