
SecuritySystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000cc2  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000cc2  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000cc2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001742  00000000  00000000  00000e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b4a  00000000  00000000  00002547  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000827  00000000  00000000  00003091  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000228  00000000  00000000  000038b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002be  00000000  00000000  00003ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a3  00000000  00000000  00003d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00004341  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000bc0  00000bc0  00000cb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000043fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.adc_init 0000000e  00000b88  00000b88  00000c7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.adc_deinit 00000008  00000bb0  00000bb0  00000ca4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.ADCLaserIO_start 0000002e  00000a26  00000a26  00000b1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADCLaserIO_stop 0000000c  00000ba4  00000ba4  00000c98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_21 0000008c  00000740  00000740  00000834  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__vector_16 00000014  00000b74  00000b74  00000c68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.callback 00000002  00800110  00800110  00000cc2  2**0
                  ALLOC
 21 .text.lcd_strobe_lcd_e 00000026  00000a7c  00000a7c  00000b70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.init_4bits_mode 00000042  0000096e  0000096e  00000a62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.lcd_write_data 00000024  00000aa2  00000aa2  00000b96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.display_text 0000001a  00000b40  00000b40  00000c34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.lcd_write_command 00000024  00000ac6  00000ac6  00000bba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.lcd_clear 0000001a  00000b5a  00000b5a  00000c4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.lcd_init 0000001c  00000b08  00000b08  00000bfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .progmemx.data 0000001a  00000102  00000102  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 29 .text.main_lcd_print 00000046  00000928  00000928  00000a1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.waitFunction 0000001e  00000aea  00000aea  00000bde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.init_keyPad 00000008  00000bb8  00000bb8  00000cac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.unlock  0000003e  000009b0  000009b0  00000aa4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.checkKey 00000118  0000056c  0000056c  00000660  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.main    00000084  000007cc  000007cc  000008c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .data.locked  00000002  00800112  00000bcc  00000cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 36 .bss.inputIndex 00000002  00800114  00800114  00000cc2  2**0
                  ALLOC
 37 .bss.side     00000002  00800116  00800116  00000cc2  2**0
                  ALLOC
 38 .bss.currentNumber 00000002  00800118  00800118  00000cc2  2**0
                  ALLOC
 39 .data.passcode 00000008  00800108  00000bc4  00000cb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 40 .text.libgcc.div 00000028  00000a54  00000a54  00000b48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.libgcc  0000001c  00000b24  00000b24  00000c18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.avrlibc 00000060  000008c8  000008c8  000009bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.avrlibc 00000450  0000011c  0000011c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.avrlibc 00000038  000009ee  000009ee  00000ae2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.avrlibc 00000078  00000850  00000850  00000944  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.avrlibc 000000bc  00000684  00000684  00000778  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.libgcc  0000000e  00000b96  00000b96  00000c8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
   4:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
   8:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
   c:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  10:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  14:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  18:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  1c:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  20:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  24:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  28:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  2c:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  30:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  34:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  38:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  3c:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  40:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__vector_16>
  44:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  48:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  4c:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  50:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  54:	0c 94 a0 03 	jmp	0x740	; 0x740 <__vector_21>
  58:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  5c:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  60:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  64:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  68:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  6c:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  70:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  74:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  78:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  7c:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  80:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  84:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>
  88:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 08       	sbc	r0, r1
  90:	80 01       	movw	r16, r0
  92:	08 01       	movw	r0, r16
  94:	10 00       	.word	0x0010	; ????
  96:	0b c4       	rjmp	.+2070   	; 0x8ae <fputc+0x5e>
  98:	01 10       	cpse	r0, r1
  9a:	01 12       	cpse	r0, r17
  9c:	80 01       	movw	r16, r0
  9e:	12 01       	movw	r2, r4
  a0:	14 00       	.word	0x0014	; ????
  a2:	0b cc       	rjmp	.-2026   	; 0xfffff8ba <__eeprom_end+0xff7ef8ba>
  a4:	01 14       	cp	r0, r1
  a6:	01 1a       	sub	r0, r17
  a8:	80 00       	.word	0x0080	; ????

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d0 e1       	ldi	r29, 0x10	; 16
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	ec e8       	ldi	r30, 0x8C	; 140
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	19 c0       	rjmp	.+50     	; 0xf0 <__do_clear_bss+0x8>
  be:	b7 91       	elpm	r27, Z+
  c0:	a7 91       	elpm	r26, Z+
  c2:	37 91       	elpm	r19, Z+
  c4:	27 91       	elpm	r18, Z+
  c6:	07 91       	elpm	r16, Z+
  c8:	07 fd       	sbrc	r16, 7
  ca:	0e c0       	rjmp	.+28     	; 0xe8 <__do_clear_bss>
  cc:	97 91       	elpm	r25, Z+
  ce:	87 91       	elpm	r24, Z+
  d0:	ef 01       	movw	r28, r30
  d2:	f9 2f       	mov	r31, r25
  d4:	e8 2f       	mov	r30, r24
  d6:	0b bf       	out	0x3b, r16	; 59
  d8:	07 90       	elpm	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	a2 17       	cp	r26, r18
  de:	b3 07       	cpc	r27, r19
  e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0x22>
  e2:	fe 01       	movw	r30, r28
  e4:	1b be       	out	0x3b, r1	; 59
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <__do_clear_bss+0x8>

000000e8 <__do_clear_bss>:
  e8:	1d 92       	st	X+, r1
  ea:	a2 17       	cp	r26, r18
  ec:	b3 07       	cpc	r27, r19
  ee:	e1 f7       	brne	.-8      	; 0xe8 <__do_clear_bss>
  f0:	e9 3a       	cpi	r30, 0xA9	; 169
  f2:	f4 07       	cpc	r31, r20
  f4:	21 f7       	brne	.-56     	; 0xbe <__do_copy_data+0x8>
  f6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <main>
  fa:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>

Disassembly of section .text:

00000bc0 <__bad_interrupt>:
 bc0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.adc_init:

00000b88 <adc_init>:

static void adc_init()
{
	//Vref=5V
	//channel 1 at pin PF1
	ADMUX=0b11100001;
 b88:	81 ee       	ldi	r24, 0xE1	; 225
 b8a:	87 b9       	out	0x07, r24	; 7
	// ADSC=1 ADC Enable
	// ADPS[2:0]=111, prescaler=128
	// ADIE=1, ADC interrupt Enable
	//ADATE=1, ADC Auto Triggering Enable
	ADCSRA=(1<<ADEN)|(6<<ADPS0)|(1<<ADSC)|(1<<ADIE)|(1<<ADFR);
 b8c:	8e ee       	ldi	r24, 0xEE	; 238
 b8e:	86 b9       	out	0x06, r24	; 6
	
	//ADTS[2:0]= 100 , Timer0 overflow select as trigger source
	SFIOR=(4<<5);
 b90:	80 e8       	ldi	r24, 0x80	; 128
 b92:	80 bd       	out	0x20, r24	; 32
 b94:	08 95       	ret

Disassembly of section .text.adc_deinit:

00000bb0 <adc_deinit>:
}

static void adc_deinit(){
	ADMUX = 0x00;
 bb0:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x00;
 bb2:	16 b8       	out	0x06, r1	; 6
	SFIOR = 0x00;
 bb4:	10 bc       	out	0x20, r1	; 32
 bb6:	08 95       	ret

Disassembly of section .text.ADCLaserIO_start:

00000a26 <ADCLaserIO_start>:

static void adc_init();
static void adc_deinit();

void ADCLaserIO_start(void (*_ptr)(uInt16)){
	callback = _ptr;
 a26:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <callback+0x1>
 a2a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <callback>
	adc_init();
 a2e:	0e 94 c4 05 	call	0xb88	; 0xb88 <adc_init>
	
	TCCR0=(5<<CS00);
 a32:	85 e0       	ldi	r24, 0x05	; 5
 a34:	83 bf       	out	0x33, r24	; 51
	TIMSK=(1<<TOIE0);
 a36:	81 e0       	ldi	r24, 0x01	; 1
 a38:	87 bf       	out	0x37, r24	; 55
	
	//Set port F1 to input
	DDRF &= ~(0x02);
 a3a:	e1 e6       	ldi	r30, 0x61	; 97
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	80 81       	ld	r24, Z
 a40:	8d 7f       	andi	r24, 0xFD	; 253
 a42:	80 83       	st	Z, r24
	//Set port D0 to output
	DDRD |= 0x01;
 a44:	81 b3       	in	r24, 0x11	; 17
 a46:	81 60       	ori	r24, 0x01	; 1
 a48:	81 bb       	out	0x11, r24	; 17
	//Set port D0 high
	PORTD |= 0x01;
 a4a:	82 b3       	in	r24, 0x12	; 18
 a4c:	81 60       	ori	r24, 0x01	; 1
 a4e:	82 bb       	out	0x12, r24	; 18
	
	//Enable global interrupts
	sei();
 a50:	78 94       	sei
 a52:	08 95       	ret

Disassembly of section .text.ADCLaserIO_stop:

00000ba4 <ADCLaserIO_stop>:
}

void ADCLaserIO_stop(){
	adc_deinit();
 ba4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <adc_deinit>
	PORTD &= ~(0x01);
 ba8:	82 b3       	in	r24, 0x12	; 18
 baa:	8e 7f       	andi	r24, 0xFE	; 254
 bac:	82 bb       	out	0x12, r24	; 18
 bae:	08 95       	ret

Disassembly of section .text.__vector_21:

00000740 <__vector_21>:

/* 
	Interrupt service routine for ADC to check if
	laser has been interrupted.
*/
ISR(ADC_vect){
 740:	1f 92       	push	r1
 742:	0f 92       	push	r0
 744:	0f b6       	in	r0, 0x3f	; 63
 746:	0f 92       	push	r0
 748:	11 24       	eor	r1, r1
 74a:	0b b6       	in	r0, 0x3b	; 59
 74c:	0f 92       	push	r0
 74e:	cf 92       	push	r12
 750:	df 92       	push	r13
 752:	ef 92       	push	r14
 754:	ff 92       	push	r15
 756:	2f 93       	push	r18
 758:	3f 93       	push	r19
 75a:	4f 93       	push	r20
 75c:	5f 93       	push	r21
 75e:	6f 93       	push	r22
 760:	7f 93       	push	r23
 762:	8f 93       	push	r24
 764:	9f 93       	push	r25
 766:	af 93       	push	r26
 768:	bf 93       	push	r27
 76a:	ef 93       	push	r30
 76c:	ff 93       	push	r31
	//Calculates the light value in percentages
	uInt16 value = (ADC) / 655;
 76e:	84 b1       	in	r24, 0x04	; 4
 770:	95 b1       	in	r25, 0x05	; 5
 772:	6f e8       	ldi	r22, 0x8F	; 143
 774:	72 e0       	ldi	r23, 0x02	; 2
 776:	0e 94 2a 05 	call	0xa54	; 0xa54 <__udivmodhi4>
 77a:	6b 01       	movw	r12, r22
 77c:	e1 2c       	mov	r14, r1
 77e:	f1 2c       	mov	r15, r1
	
	if (value < TRIGGER_VALUE){
 780:	80 e5       	ldi	r24, 0x50	; 80
 782:	c8 16       	cp	r12, r24
 784:	d1 04       	cpc	r13, r1
 786:	e1 04       	cpc	r14, r1
 788:	f1 04       	cpc	r15, r1
 78a:	48 f4       	brcc	.+18     	; 0x79e <__vector_21+0x5e>
		ADCLaserIO_stop();
 78c:	0e 94 d2 05 	call	0xba4	; 0xba4 <ADCLaserIO_stop>
		callback(value);
 790:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <callback>
 794:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <callback+0x1>
 798:	c7 01       	movw	r24, r14
 79a:	b6 01       	movw	r22, r12
 79c:	09 95       	icall
	}
}
 79e:	ff 91       	pop	r31
 7a0:	ef 91       	pop	r30
 7a2:	bf 91       	pop	r27
 7a4:	af 91       	pop	r26
 7a6:	9f 91       	pop	r25
 7a8:	8f 91       	pop	r24
 7aa:	7f 91       	pop	r23
 7ac:	6f 91       	pop	r22
 7ae:	5f 91       	pop	r21
 7b0:	4f 91       	pop	r20
 7b2:	3f 91       	pop	r19
 7b4:	2f 91       	pop	r18
 7b6:	ff 90       	pop	r15
 7b8:	ef 90       	pop	r14
 7ba:	df 90       	pop	r13
 7bc:	cf 90       	pop	r12
 7be:	0f 90       	pop	r0
 7c0:	0b be       	out	0x3b, r0	; 59
 7c2:	0f 90       	pop	r0
 7c4:	0f be       	out	0x3f, r0	; 63
 7c6:	0f 90       	pop	r0
 7c8:	1f 90       	pop	r1
 7ca:	18 95       	reti

Disassembly of section .text.__vector_16:

00000b74 <__vector_16>:

/* 
	Necessary timer.
*/
 b74:	1f 92       	push	r1
 b76:	0f 92       	push	r0
 b78:	0f b6       	in	r0, 0x3f	; 63
 b7a:	0f 92       	push	r0
 b7c:	11 24       	eor	r1, r1
 b7e:	0f 90       	pop	r0
 b80:	0f be       	out	0x3f, r0	; 63
 b82:	0f 90       	pop	r0
 b84:	1f 90       	pop	r1
 b86:	18 95       	reti

Disassembly of section .text.lcd_strobe_lcd_e:

00000a7c <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
 a7c:	8b b3       	in	r24, 0x1b	; 27
 a7e:	80 64       	ori	r24, 0x40	; 64
 a80:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a82:	8f ec       	ldi	r24, 0xCF	; 207
 a84:	97 e0       	ldi	r25, 0x07	; 7
 a86:	01 97       	sbiw	r24, 0x01	; 1
 a88:	f1 f7       	brne	.-4      	; 0xa86 <lcd_strobe_lcd_e+0xa>
 a8a:	00 c0       	rjmp	.+0      	; 0xa8c <lcd_strobe_lcd_e+0x10>
 a8c:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTA &= ~(1<<LCD_E);  	// E low
 a8e:	8b b3       	in	r24, 0x1b	; 27
 a90:	8f 7b       	andi	r24, 0xBF	; 191
 a92:	8b bb       	out	0x1b, r24	; 27
 a94:	8f ec       	ldi	r24, 0xCF	; 207
 a96:	97 e0       	ldi	r25, 0x07	; 7
 a98:	01 97       	sbiw	r24, 0x01	; 1
 a9a:	f1 f7       	brne	.-4      	; 0xa98 <lcd_strobe_lcd_e+0x1c>
 a9c:	00 c0       	rjmp	.+0      	; 0xa9e <lcd_strobe_lcd_e+0x22>
 a9e:	00 00       	nop
 aa0:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

0000096e <init_4bits_mode>:
*******************************************************************/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 96e:	cf 93       	push	r28
 970:	8f ef       	ldi	r24, 0xFF	; 255
 972:	81 bb       	out	0x11, r24	; 17
 974:	8a bb       	out	0x1a, r24	; 26
 976:	15 ba       	out	0x15, r1	; 21
 978:	1b ba       	out	0x1b, r1	; 27
 97a:	c0 e2       	ldi	r28, 0x20	; 32
 97c:	c5 bb       	out	0x15, r28	; 21
 97e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <lcd_strobe_lcd_e>
 982:	c5 bb       	out	0x15, r28	; 21
 984:	0e 94 3e 05 	call	0xa7c	; 0xa7c <lcd_strobe_lcd_e>
 988:	80 e8       	ldi	r24, 0x80	; 128
 98a:	85 bb       	out	0x15, r24	; 21
 98c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <lcd_strobe_lcd_e>
 990:	15 ba       	out	0x15, r1	; 21
 992:	0e 94 3e 05 	call	0xa7c	; 0xa7c <lcd_strobe_lcd_e>
 996:	80 ef       	ldi	r24, 0xF0	; 240
 998:	85 bb       	out	0x15, r24	; 21
 99a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <lcd_strobe_lcd_e>
 99e:	15 ba       	out	0x15, r1	; 21
 9a0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <lcd_strobe_lcd_e>
 9a4:	80 e6       	ldi	r24, 0x60	; 96
 9a6:	85 bb       	out	0x15, r24	; 21
 9a8:	0e 94 3e 05 	call	0xa7c	; 0xa7c <lcd_strobe_lcd_e>
 9ac:	cf 91       	pop	r28
 9ae:	08 95       	ret

Disassembly of section .text.lcd_write_data:

00000aa2 <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_data(unsigned char byte) {
 aa2:	cf 93       	push	r28
 aa4:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 aa6:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 aa8:	8b b3       	in	r24, 0x1b	; 27
 aaa:	80 61       	ori	r24, 0x10	; 16
 aac:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 aae:	0e 94 3e 05 	call	0xa7c	; 0xa7c <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 ab2:	c2 95       	swap	r28
 ab4:	c0 7f       	andi	r28, 0xF0	; 240
 ab6:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 ab8:	8b b3       	in	r24, 0x1b	; 27
 aba:	80 61       	ori	r24, 0x10	; 16
 abc:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 abe:	0e 94 3e 05 	call	0xa7c	; 0xa7c <lcd_strobe_lcd_e>
}
 ac2:	cf 91       	pop	r28
 ac4:	08 95       	ret

Disassembly of section .text.display_text:

00000b40 <display_text>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void display_text(char *str) {
 b40:	cf 93       	push	r28
 b42:	df 93       	push	r29
 b44:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 b46:	03 c0       	rjmp	.+6      	; 0xb4e <display_text+0xe>
		lcd_write_data(*str);
 b48:	0e 94 51 05 	call	0xaa2	; 0xaa2 <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 b4c:	21 96       	adiw	r28, 0x01	; 1
 b4e:	88 81       	ld	r24, Y
 b50:	81 11       	cpse	r24, r1
 b52:	fa cf       	rjmp	.-12     	; 0xb48 <display_text+0x8>
		lcd_write_data(*str);
	}
}
 b54:	df 91       	pop	r29
 b56:	cf 91       	pop	r28
 b58:	08 95       	ret

Disassembly of section .text.lcd_write_command:

00000ac6 <lcd_write_command>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_command(unsigned char byte) {
 ac6:	cf 93       	push	r28
 ac8:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 aca:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 acc:	8b b3       	in	r24, 0x1b	; 27
 ace:	8f 7e       	andi	r24, 0xEF	; 239
 ad0:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 ad2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 ad6:	c2 95       	swap	r28
 ad8:	c0 7f       	andi	r28, 0xF0	; 240
 ada:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 adc:	8b b3       	in	r24, 0x1b	; 27
 ade:	8f 7e       	andi	r24, 0xEF	; 239
 ae0:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 ae2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <lcd_strobe_lcd_e>
}
 ae6:	cf 91       	pop	r28
 ae8:	08 95       	ret

Disassembly of section .text.lcd_clear:

00000b5a <lcd_clear>:


void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 b5a:	81 e0       	ldi	r24, 0x01	; 1
 b5c:	0e 94 63 05 	call	0xac6	; 0xac6 <lcd_write_command>
 b60:	8f e9       	ldi	r24, 0x9F	; 159
 b62:	9f e0       	ldi	r25, 0x0F	; 15
 b64:	01 97       	sbiw	r24, 0x01	; 1
 b66:	f1 f7       	brne	.-4      	; 0xb64 <lcd_clear+0xa>
 b68:	00 c0       	rjmp	.+0      	; 0xb6a <lcd_clear+0x10>
 b6a:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 b6c:	80 e8       	ldi	r24, 0x80	; 128
 b6e:	0e 94 63 05 	call	0xac6	; 0xac6 <lcd_write_command>
 b72:	08 95       	ret

Disassembly of section .text.lcd_init:

00000b08 <lcd_init>:
}

void lcd_init()
{
	DDRC = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 b08:	8f ef       	ldi	r24, 0xFF	; 255
 b0a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 b0c:	85 bb       	out	0x15, r24	; 21
	
	// Init LCD
	init_4bits_mode();
 b0e:	0e 94 b7 04 	call	0x96e	; 0x96e <init_4bits_mode>
 b12:	8f e1       	ldi	r24, 0x1F	; 31
 b14:	9e e4       	ldi	r25, 0x4E	; 78
 b16:	01 97       	sbiw	r24, 0x01	; 1
 b18:	f1 f7       	brne	.-4      	; 0xb16 <lcd_init+0xe>
 b1a:	00 c0       	rjmp	.+0      	; 0xb1c <lcd_init+0x14>
 b1c:	00 00       	nop
	
	_delay_ms(10);
	
	lcd_clear();
 b1e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <lcd_clear>
 b22:	08 95       	ret

Disassembly of section .text.main_lcd_print:

00000928 <main_lcd_print>:
#include <xc.h>
#include "waiting.h"
#include "LCD.H"
#include "ADCLaserIO.h"

void main_lcd_print(uInt16 value){
 928:	cf 93       	push	r28
 92a:	df 93       	push	r29
 92c:	cd b7       	in	r28, 0x3d	; 61
 92e:	de b7       	in	r29, 0x3e	; 62
 930:	2a 97       	sbiw	r28, 0x0a	; 10
 932:	0f b6       	in	r0, 0x3f	; 63
 934:	f8 94       	cli
 936:	de bf       	out	0x3e, r29	; 62
 938:	0f be       	out	0x3f, r0	; 63
 93a:	cd bf       	out	0x3d, r28	; 61
	lcd_clear();
 93c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <lcd_clear>
	char text[] = "Triggered";
 940:	22 e0       	ldi	r18, 0x02	; 2
 942:	31 e0       	ldi	r19, 0x01	; 1
 944:	40 e0       	ldi	r20, 0x00	; 0
 946:	8a e0       	ldi	r24, 0x0A	; 10
 948:	f9 01       	movw	r30, r18
 94a:	de 01       	movw	r26, r28
 94c:	11 96       	adiw	r26, 0x01	; 1
 94e:	74 2f       	mov	r23, r20
 950:	0e 94 92 05 	call	0xb24	; 0xb24 <__movmemx_qi>
	display_text(text);
 954:	ce 01       	movw	r24, r28
 956:	01 96       	adiw	r24, 0x01	; 1
 958:	0e 94 a0 05 	call	0xb40	; 0xb40 <display_text>
}
 95c:	2a 96       	adiw	r28, 0x0a	; 10
 95e:	0f b6       	in	r0, 0x3f	; 63
 960:	f8 94       	cli
 962:	de bf       	out	0x3e, r29	; 62
 964:	0f be       	out	0x3f, r0	; 63
 966:	cd bf       	out	0x3d, r28	; 61
 968:	df 91       	pop	r29
 96a:	cf 91       	pop	r28
 96c:	08 95       	ret

Disassembly of section .text.waitFunction:

00000aea <waitFunction>:
notes:			Busy wait, not very accurate. Make sure (external)
				clock value is set. This is used by _delay_ms inside
				until/delay.h
***********************/
{
	for (int i=0; i<ms; i++) {
 aea:	20 e0       	ldi	r18, 0x00	; 0
 aec:	30 e0       	ldi	r19, 0x00	; 0
 aee:	08 c0       	rjmp	.+16     	; 0xb00 <waitFunction+0x16>
 af0:	ef ec       	ldi	r30, 0xCF	; 207
 af2:	f7 e0       	ldi	r31, 0x07	; 7
 af4:	31 97       	sbiw	r30, 0x01	; 1
 af6:	f1 f7       	brne	.-4      	; 0xaf4 <waitFunction+0xa>
 af8:	00 c0       	rjmp	.+0      	; 0xafa <waitFunction+0x10>
 afa:	00 00       	nop
 afc:	2f 5f       	subi	r18, 0xFF	; 255
 afe:	3f 4f       	sbci	r19, 0xFF	; 255
 b00:	28 17       	cp	r18, r24
 b02:	39 07       	cpc	r19, r25
 b04:	ac f3       	brlt	.-22     	; 0xaf0 <waitFunction+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 b06:	08 95       	ret

Disassembly of section .text.init_keyPad:

00000bb8 <init_keyPad>:

void init_keyPad(){
	DDRA &= ~(0x07);
 bb8:	8a b3       	in	r24, 0x1a	; 26
 bba:	88 7f       	andi	r24, 0xF8	; 248
 bbc:	8a bb       	out	0x1a, r24	; 26
 bbe:	08 95       	ret

Disassembly of section .text.unlock:

000009b0 <unlock>:
int inputIndex = 0;

int locked = 1;

void unlock(){
	for (int i = 0; i < 4; i++)
 9b0:	20 e0       	ldi	r18, 0x00	; 0
 9b2:	30 e0       	ldi	r19, 0x00	; 0
 9b4:	12 c0       	rjmp	.+36     	; 0x9da <unlock+0x2a>
	{
		if (inputcode[i] != passcode[i]){
 9b6:	c9 01       	movw	r24, r18
 9b8:	88 0f       	add	r24, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	fc 01       	movw	r30, r24
 9be:	e0 50       	subi	r30, 0x00	; 0
 9c0:	ff 4f       	sbci	r31, 0xFF	; 255
 9c2:	40 81       	ld	r20, Z
 9c4:	51 81       	ldd	r21, Z+1	; 0x01
 9c6:	fc 01       	movw	r30, r24
 9c8:	e8 5f       	subi	r30, 0xF8	; 248
 9ca:	fe 4f       	sbci	r31, 0xFE	; 254
 9cc:	80 81       	ld	r24, Z
 9ce:	91 81       	ldd	r25, Z+1	; 0x01
 9d0:	48 17       	cp	r20, r24
 9d2:	59 07       	cpc	r21, r25
 9d4:	59 f4       	brne	.+22     	; 0x9ec <unlock+0x3c>
int inputIndex = 0;

int locked = 1;

void unlock(){
	for (int i = 0; i < 4; i++)
 9d6:	2f 5f       	subi	r18, 0xFF	; 255
 9d8:	3f 4f       	sbci	r19, 0xFF	; 255
 9da:	24 30       	cpi	r18, 0x04	; 4
 9dc:	31 05       	cpc	r19, r1
 9de:	5c f3       	brlt	.-42     	; 0x9b6 <unlock+0x6>
		if (inputcode[i] != passcode[i]){
			return;
		}
	}
	
	ADCLaserIO_stop();
 9e0:	0e 94 d2 05 	call	0xba4	; 0xba4 <ADCLaserIO_stop>
	locked = 0;
 9e4:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <locked+0x1>
 9e8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <locked>
 9ec:	08 95       	ret

Disassembly of section .text.checkKey:

0000056c <checkKey>:
}

void checkKey(){
	int keys = PINA & 0x7;
 56c:	89 b3       	in	r24, 0x19	; 25
	if(locked == 0)
 56e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <locked>
 572:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <locked+0x1>
 576:	23 2b       	or	r18, r19
 578:	69 f4       	brne	.+26     	; 0x594 <checkKey+0x28>
	{
		if(keys & 4){
 57a:	82 ff       	sbrs	r24, 2
 57c:	82 c0       	rjmp	.+260    	; 0x682 <checkKey+0x116>
		locked = 1;
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <locked+0x1>
 586:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <locked>
		ADCLaserIO_start(main_lcd_print);
 58a:	84 e9       	ldi	r24, 0x94	; 148
 58c:	94 e0       	ldi	r25, 0x04	; 4
 58e:	0e 94 13 05 	call	0xa26	; 0xa26 <ADCLaserIO_start>
 592:	08 95       	ret
		//enable laser
		
		return;
	}
	
	if(keys & 1){
 594:	80 ff       	sbrs	r24, 0
 596:	35 c0       	rjmp	.+106    	; 0x602 <checkKey+0x96>
		if(side != 0){
 598:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <side>
 59c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <side+0x1>
 5a0:	89 2b       	or	r24, r25
 5a2:	f1 f0       	breq	.+60     	; 0x5e0 <checkKey+0x74>
			if(inputIndex >= 4){
 5a4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <inputIndex>
 5a8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <inputIndex+0x1>
 5ac:	84 30       	cpi	r24, 0x04	; 4
 5ae:	91 05       	cpc	r25, r1
 5b0:	1c f0       	brlt	.+6      	; 0x5b8 <checkKey+0x4c>
				unlock();
 5b2:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <unlock>
				return;
 5b6:	08 95       	ret
			}
			side = 0;
 5b8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <side+0x1>
 5bc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <side>
			inputcode[inputIndex] = currentNumber;
 5c0:	fc 01       	movw	r30, r24
 5c2:	ee 0f       	add	r30, r30
 5c4:	ff 1f       	adc	r31, r31
 5c6:	e0 50       	subi	r30, 0x00	; 0
 5c8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ca:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <currentNumber>
 5ce:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <currentNumber+0x1>
 5d2:	31 83       	std	Z+1, r19	; 0x01
 5d4:	20 83       	st	Z, r18
			inputIndex++;
 5d6:	01 96       	adiw	r24, 0x01	; 1
 5d8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <inputIndex+0x1>
 5dc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <inputIndex>
		}
		currentNumber++;
 5e0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <currentNumber>
 5e4:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <currentNumber+0x1>
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <currentNumber+0x1>
 5ee:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <currentNumber>
		if(currentNumber > 9){
 5f2:	0a 97       	sbiw	r24, 0x0a	; 10
 5f4:	0c f4       	brge	.+2      	; 0x5f8 <checkKey+0x8c>
 5f6:	45 c0       	rjmp	.+138    	; 0x682 <checkKey+0x116>
			currentNumber = 0;
 5f8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <currentNumber+0x1>
 5fc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <currentNumber>
 600:	08 95       	ret
		}
		}else if(keys & 2){
 602:	81 ff       	sbrs	r24, 1
 604:	38 c0       	rjmp	.+112    	; 0x676 <checkKey+0x10a>
		if(side != 1){
 606:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <side>
 60a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <side+0x1>
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	01 f1       	breq	.+64     	; 0x652 <checkKey+0xe6>
			if(inputIndex >= 4){
 612:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <inputIndex>
 616:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <inputIndex+0x1>
 61a:	84 30       	cpi	r24, 0x04	; 4
 61c:	91 05       	cpc	r25, r1
 61e:	1c f0       	brlt	.+6      	; 0x626 <checkKey+0xba>
				unlock();
 620:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <unlock>
				return;
 624:	08 95       	ret
			}
			side = 1;
 626:	21 e0       	ldi	r18, 0x01	; 1
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <side+0x1>
 62e:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <side>
			inputcode[inputIndex] = currentNumber;
 632:	fc 01       	movw	r30, r24
 634:	ee 0f       	add	r30, r30
 636:	ff 1f       	adc	r31, r31
 638:	e0 50       	subi	r30, 0x00	; 0
 63a:	ff 4f       	sbci	r31, 0xFF	; 255
 63c:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <currentNumber>
 640:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <currentNumber+0x1>
 644:	31 83       	std	Z+1, r19	; 0x01
 646:	20 83       	st	Z, r18
			inputIndex++;
 648:	01 96       	adiw	r24, 0x01	; 1
 64a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <inputIndex+0x1>
 64e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <inputIndex>
		}
		currentNumber--;
 652:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <currentNumber>
 656:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <currentNumber+0x1>
 65a:	01 97       	sbiw	r24, 0x01	; 1
 65c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <currentNumber+0x1>
 660:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <currentNumber>
		if(currentNumber < 0){
 664:	99 23       	and	r25, r25
 666:	6c f4       	brge	.+26     	; 0x682 <checkKey+0x116>
			currentNumber = 9;
 668:	89 e0       	ldi	r24, 0x09	; 9
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <currentNumber+0x1>
 670:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <currentNumber>
 674:	08 95       	ret
		}
		
		}else if(keys & 4){
 676:	82 ff       	sbrs	r24, 2
 678:	04 c0       	rjmp	.+8      	; 0x682 <checkKey+0x116>
		inputIndex = 0;
 67a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <inputIndex+0x1>
 67e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <inputIndex>
 682:	08 95       	ret

Disassembly of section .text.main:

000007cc <main>:
	}
	
}

int main(void)
{
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
 7d0:	cd b7       	in	r28, 0x3d	; 61
 7d2:	de b7       	in	r29, 0x3e	; 62
 7d4:	2f 97       	sbiw	r28, 0x0f	; 15
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	f8 94       	cli
 7da:	de bf       	out	0x3e, r29	; 62
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	cd bf       	out	0x3d, r28	; 61
	lcd_init();
 7e0:	0e 94 84 05 	call	0xb08	; 0xb08 <lcd_init>
	ADCLaserIO_start(main_lcd_print);
 7e4:	84 e9       	ldi	r24, 0x94	; 148
 7e6:	94 e0       	ldi	r25, 0x04	; 4
 7e8:	0e 94 13 05 	call	0xa26	; 0xa26 <ADCLaserIO_start>
	init_keyPad();
 7ec:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <init_keyPad>
	char test[15];
	while(1){
		checkKey();
 7f0:	0e 94 b6 02 	call	0x56c	; 0x56c <checkKey>
		sprintf(test, "c:%d l:%d, in%d", currentNumber, locked, inputIndex);
 7f4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <inputIndex+0x1>
 7f8:	8f 93       	push	r24
 7fa:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <inputIndex>
 7fe:	8f 93       	push	r24
 800:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <locked+0x1>
 804:	8f 93       	push	r24
 806:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <locked>
 80a:	8f 93       	push	r24
 80c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <currentNumber+0x1>
 810:	8f 93       	push	r24
 812:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <currentNumber>
 816:	8f 93       	push	r24
 818:	8c e0       	ldi	r24, 0x0C	; 12
 81a:	91 e0       	ldi	r25, 0x01	; 1
 81c:	a0 e0       	ldi	r26, 0x00	; 0
 81e:	af 93       	push	r26
 820:	9f 93       	push	r25
 822:	8f 93       	push	r24
 824:	8e 01       	movw	r16, r28
 826:	0f 5f       	subi	r16, 0xFF	; 255
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	1f 93       	push	r17
 82c:	0f 93       	push	r16
 82e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <sprintf>
		lcd_clear();
 832:	0e 94 ad 05 	call	0xb5a	; 0xb5a <lcd_clear>
		display_text(test);
 836:	c8 01       	movw	r24, r16
 838:	0e 94 a0 05 	call	0xb40	; 0xb40 <display_text>
		waitFunction(100);
 83c:	84 e6       	ldi	r24, 0x64	; 100
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	0e 94 75 05 	call	0xaea	; 0xaea <waitFunction>
 844:	0f b6       	in	r0, 0x3f	; 63
 846:	f8 94       	cli
 848:	de bf       	out	0x3e, r29	; 62
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	cd bf       	out	0x3d, r28	; 61
 84e:	d0 cf       	rjmp	.-96     	; 0x7f0 <main+0x24>

Disassembly of section .text.libgcc.div:

00000a54 <__udivmodhi4>:
 a54:	aa 1b       	sub	r26, r26
 a56:	bb 1b       	sub	r27, r27
 a58:	51 e1       	ldi	r21, 0x11	; 17
 a5a:	07 c0       	rjmp	.+14     	; 0xa6a <__udivmodhi4_ep>

00000a5c <__udivmodhi4_loop>:
 a5c:	aa 1f       	adc	r26, r26
 a5e:	bb 1f       	adc	r27, r27
 a60:	a6 17       	cp	r26, r22
 a62:	b7 07       	cpc	r27, r23
 a64:	10 f0       	brcs	.+4      	; 0xa6a <__udivmodhi4_ep>
 a66:	a6 1b       	sub	r26, r22
 a68:	b7 0b       	sbc	r27, r23

00000a6a <__udivmodhi4_ep>:
 a6a:	88 1f       	adc	r24, r24
 a6c:	99 1f       	adc	r25, r25
 a6e:	5a 95       	dec	r21
 a70:	a9 f7       	brne	.-22     	; 0xa5c <__udivmodhi4_loop>
 a72:	80 95       	com	r24
 a74:	90 95       	com	r25
 a76:	bc 01       	movw	r22, r24
 a78:	cd 01       	movw	r24, r26
 a7a:	08 95       	ret

Disassembly of section .text.libgcc:

00000b24 <__movmemx_qi>:
 b24:	99 27       	eor	r25, r25

00000b26 <__movmemx_hi>:
 b26:	77 fd       	sbrc	r23, 7
 b28:	06 c0       	rjmp	.+12     	; 0xb36 <__movmemx_hi+0x10>
 b2a:	7b bf       	out	0x3b, r23	; 59
 b2c:	07 90       	elpm	r0, Z+
 b2e:	0d 92       	st	X+, r0
 b30:	01 97       	sbiw	r24, 0x01	; 1
 b32:	e1 f7       	brne	.-8      	; 0xb2c <__movmemx_hi+0x6>
 b34:	08 95       	ret
 b36:	01 90       	ld	r0, Z+
 b38:	0d 92       	st	X+, r0
 b3a:	01 97       	sbiw	r24, 0x01	; 1
 b3c:	e1 f7       	brne	.-8      	; 0xb36 <__movmemx_hi+0x10>
 b3e:	08 95       	ret

Disassembly of section .text.avrlibc:

000008c8 <sprintf>:
 8c8:	0f 93       	push	r16
 8ca:	1f 93       	push	r17
 8cc:	cf 93       	push	r28
 8ce:	df 93       	push	r29
 8d0:	cd b7       	in	r28, 0x3d	; 61
 8d2:	de b7       	in	r29, 0x3e	; 62
 8d4:	2f 97       	sbiw	r28, 0x0f	; 15
 8d6:	0f b6       	in	r0, 0x3f	; 63
 8d8:	f8 94       	cli
 8da:	de bf       	out	0x3e, r29	; 62
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	cd bf       	out	0x3d, r28	; 61
 8e0:	0e 89       	ldd	r16, Y+22	; 0x16
 8e2:	1f 89       	ldd	r17, Y+23	; 0x17
 8e4:	86 e0       	ldi	r24, 0x06	; 6
 8e6:	8d 83       	std	Y+5, r24	; 0x05
 8e8:	1a 83       	std	Y+2, r17	; 0x02
 8ea:	09 83       	std	Y+1, r16	; 0x01
 8ec:	8f ef       	ldi	r24, 0xFF	; 255
 8ee:	9f e7       	ldi	r25, 0x7F	; 127
 8f0:	9f 83       	std	Y+7, r25	; 0x07
 8f2:	8e 83       	std	Y+6, r24	; 0x06
 8f4:	9e 01       	movw	r18, r28
 8f6:	25 5e       	subi	r18, 0xE5	; 229
 8f8:	3f 4f       	sbci	r19, 0xFF	; 255
 8fa:	48 8d       	ldd	r20, Y+24	; 0x18
 8fc:	59 8d       	ldd	r21, Y+25	; 0x19
 8fe:	6a 8d       	ldd	r22, Y+26	; 0x1a
 900:	ce 01       	movw	r24, r28
 902:	01 96       	adiw	r24, 0x01	; 1
 904:	0e 94 8e 00 	call	0x11c	; 0x11c <vfprintf>
 908:	e8 85       	ldd	r30, Y+8	; 0x08
 90a:	f9 85       	ldd	r31, Y+9	; 0x09
 90c:	e0 0f       	add	r30, r16
 90e:	f1 1f       	adc	r31, r17
 910:	10 82       	st	Z, r1
 912:	2f 96       	adiw	r28, 0x0f	; 15
 914:	0f b6       	in	r0, 0x3f	; 63
 916:	f8 94       	cli
 918:	de bf       	out	0x3e, r29	; 62
 91a:	0f be       	out	0x3f, r0	; 63
 91c:	cd bf       	out	0x3d, r28	; 61
 91e:	df 91       	pop	r29
 920:	cf 91       	pop	r28
 922:	1f 91       	pop	r17
 924:	0f 91       	pop	r16
 926:	08 95       	ret

Disassembly of section .text.avrlibc:

0000011c <vfprintf>:
 11c:	2f 92       	push	r2
 11e:	3f 92       	push	r3
 120:	4f 92       	push	r4
 122:	6f 92       	push	r6
 124:	7f 92       	push	r7
 126:	8f 92       	push	r8
 128:	9f 92       	push	r9
 12a:	af 92       	push	r10
 12c:	bf 92       	push	r11
 12e:	cf 92       	push	r12
 130:	df 92       	push	r13
 132:	ef 92       	push	r14
 134:	ff 92       	push	r15
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	62 97       	sbiw	r28, 0x12	; 18
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
 14e:	6c 01       	movw	r12, r24
 150:	3a 01       	movw	r6, r20
 152:	86 2e       	mov	r8, r22
 154:	79 01       	movw	r14, r18
 156:	fc 01       	movw	r30, r24
 158:	10 86       	std	Z+8, r1	; 0x08
 15a:	17 82       	std	Z+7, r1	; 0x07
 15c:	84 81       	ldd	r24, Z+4	; 0x04
 15e:	81 ff       	sbrs	r24, 1
 160:	eb c1       	rjmp	.+982    	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 162:	9e 01       	movw	r18, r28
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	3d 87       	std	Y+13, r19	; 0x0d
 16a:	2c 87       	std	Y+12, r18	; 0x0c
 16c:	c9 01       	movw	r24, r18
 16e:	a0 e8       	ldi	r26, 0x80	; 128
 170:	88 8b       	std	Y+16, r24	; 0x10
 172:	99 8b       	std	Y+17, r25	; 0x11
 174:	aa 8b       	std	Y+18, r26	; 0x12
 176:	9f e3       	ldi	r25, 0x3F	; 63
 178:	99 2e       	mov	r9, r25
 17a:	f3 01       	movw	r30, r6
 17c:	58 2d       	mov	r21, r8
 17e:	0e 94 cb 05 	call	0xb96	; 0xb96 <__xload_1>
 182:	86 2f       	mov	r24, r22
 184:	66 23       	and	r22, r22
 186:	09 f4       	brne	.+2      	; 0x18a <vfprintf+0x6e>
 188:	d3 c1       	rjmp	.+934    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 18a:	48 2d       	mov	r20, r8
 18c:	93 01       	movw	r18, r6
 18e:	2f 5f       	subi	r18, 0xFF	; 255
 190:	3f 4f       	sbci	r19, 0xFF	; 255
 192:	4f 4f       	sbci	r20, 0xFF	; 255
 194:	65 32       	cpi	r22, 0x25	; 37
 196:	19 f0       	breq	.+6      	; 0x19e <vfprintf+0x82>
 198:	39 01       	movw	r6, r18
 19a:	84 2e       	mov	r8, r20
 19c:	0b c0       	rjmp	.+22     	; 0x1b4 <vfprintf+0x98>
 19e:	f9 01       	movw	r30, r18
 1a0:	54 2f       	mov	r21, r20
 1a2:	0e 94 cb 05 	call	0xb96	; 0xb96 <__xload_1>
 1a6:	86 2f       	mov	r24, r22
 1a8:	92 e0       	ldi	r25, 0x02	; 2
 1aa:	69 0e       	add	r6, r25
 1ac:	71 1c       	adc	r7, r1
 1ae:	81 1c       	adc	r8, r1
 1b0:	65 32       	cpi	r22, 0x25	; 37
 1b2:	29 f4       	brne	.+10     	; 0x1be <vfprintf+0xa2>
 1b4:	b6 01       	movw	r22, r12
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 28 04 	call	0x850	; 0x850 <fputc>
 1bc:	de cf       	rjmp	.-68     	; 0x17a <vfprintf+0x5e>
 1be:	b1 2c       	mov	r11, r1
 1c0:	00 e0       	ldi	r16, 0x00	; 0
 1c2:	10 e0       	ldi	r17, 0x00	; 0
 1c4:	10 32       	cpi	r17, 0x20	; 32
 1c6:	a0 f4       	brcc	.+40     	; 0x1f0 <vfprintf+0xd4>
 1c8:	8b 32       	cpi	r24, 0x2B	; 43
 1ca:	69 f0       	breq	.+26     	; 0x1e6 <vfprintf+0xca>
 1cc:	30 f4       	brcc	.+12     	; 0x1da <vfprintf+0xbe>
 1ce:	80 32       	cpi	r24, 0x20	; 32
 1d0:	59 f0       	breq	.+22     	; 0x1e8 <vfprintf+0xcc>
 1d2:	83 32       	cpi	r24, 0x23	; 35
 1d4:	69 f4       	brne	.+26     	; 0x1f0 <vfprintf+0xd4>
 1d6:	10 61       	ori	r17, 0x10	; 16
 1d8:	2c c0       	rjmp	.+88     	; 0x232 <vfprintf+0x116>
 1da:	8d 32       	cpi	r24, 0x2D	; 45
 1dc:	39 f0       	breq	.+14     	; 0x1ec <vfprintf+0xd0>
 1de:	80 33       	cpi	r24, 0x30	; 48
 1e0:	39 f4       	brne	.+14     	; 0x1f0 <vfprintf+0xd4>
 1e2:	11 60       	ori	r17, 0x01	; 1
 1e4:	26 c0       	rjmp	.+76     	; 0x232 <vfprintf+0x116>
 1e6:	12 60       	ori	r17, 0x02	; 2
 1e8:	14 60       	ori	r17, 0x04	; 4
 1ea:	23 c0       	rjmp	.+70     	; 0x232 <vfprintf+0x116>
 1ec:	18 60       	ori	r17, 0x08	; 8
 1ee:	21 c0       	rjmp	.+66     	; 0x232 <vfprintf+0x116>
 1f0:	17 fd       	sbrc	r17, 7
 1f2:	2a c0       	rjmp	.+84     	; 0x248 <vfprintf+0x12c>
 1f4:	90 ed       	ldi	r25, 0xD0	; 208
 1f6:	98 0f       	add	r25, r24
 1f8:	9a 30       	cpi	r25, 0x0A	; 10
 1fa:	78 f4       	brcc	.+30     	; 0x21a <vfprintf+0xfe>
 1fc:	16 ff       	sbrs	r17, 6
 1fe:	06 c0       	rjmp	.+12     	; 0x20c <vfprintf+0xf0>
 200:	aa e0       	ldi	r26, 0x0A	; 10
 202:	ba 9e       	mul	r11, r26
 204:	90 0d       	add	r25, r0
 206:	11 24       	eor	r1, r1
 208:	b9 2e       	mov	r11, r25
 20a:	13 c0       	rjmp	.+38     	; 0x232 <vfprintf+0x116>
 20c:	ea e0       	ldi	r30, 0x0A	; 10
 20e:	0e 9f       	mul	r16, r30
 210:	90 0d       	add	r25, r0
 212:	11 24       	eor	r1, r1
 214:	09 2f       	mov	r16, r25
 216:	10 62       	ori	r17, 0x20	; 32
 218:	0c c0       	rjmp	.+24     	; 0x232 <vfprintf+0x116>
 21a:	8e 32       	cpi	r24, 0x2E	; 46
 21c:	21 f4       	brne	.+8      	; 0x226 <vfprintf+0x10a>
 21e:	16 fd       	sbrc	r17, 6
 220:	87 c1       	rjmp	.+782    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 222:	10 64       	ori	r17, 0x40	; 64
 224:	06 c0       	rjmp	.+12     	; 0x232 <vfprintf+0x116>
 226:	8c 36       	cpi	r24, 0x6C	; 108
 228:	11 f4       	brne	.+4      	; 0x22e <vfprintf+0x112>
 22a:	10 68       	ori	r17, 0x80	; 128
 22c:	02 c0       	rjmp	.+4      	; 0x232 <vfprintf+0x116>
 22e:	88 36       	cpi	r24, 0x68	; 104
 230:	59 f4       	brne	.+22     	; 0x248 <vfprintf+0x12c>
 232:	f3 01       	movw	r30, r6
 234:	58 2d       	mov	r21, r8
 236:	0e 94 cb 05 	call	0xb96	; 0xb96 <__xload_1>
 23a:	86 2f       	mov	r24, r22
 23c:	ff ef       	ldi	r31, 0xFF	; 255
 23e:	6f 1a       	sub	r6, r31
 240:	7f 0a       	sbc	r7, r31
 242:	8f 0a       	sbc	r8, r31
 244:	61 11       	cpse	r22, r1
 246:	be cf       	rjmp	.-132    	; 0x1c4 <vfprintf+0xa8>
 248:	98 2f       	mov	r25, r24
 24a:	9f 7d       	andi	r25, 0xDF	; 223
 24c:	95 54       	subi	r25, 0x45	; 69
 24e:	93 30       	cpi	r25, 0x03	; 3
 250:	28 f4       	brcc	.+10     	; 0x25c <vfprintf+0x140>
 252:	24 e0       	ldi	r18, 0x04	; 4
 254:	e2 0e       	add	r14, r18
 256:	f1 1c       	adc	r15, r1
 258:	99 82       	std	Y+1, r9	; 0x01
 25a:	0f c0       	rjmp	.+30     	; 0x27a <vfprintf+0x15e>
 25c:	83 36       	cpi	r24, 0x63	; 99
 25e:	31 f0       	breq	.+12     	; 0x26c <vfprintf+0x150>
 260:	83 37       	cpi	r24, 0x73	; 115
 262:	91 f0       	breq	.+36     	; 0x288 <vfprintf+0x16c>
 264:	83 35       	cpi	r24, 0x53	; 83
 266:	09 f0       	breq	.+2      	; 0x26a <vfprintf+0x14e>
 268:	64 c0       	rjmp	.+200    	; 0x332 <vfprintf+0x216>
 26a:	27 c0       	rjmp	.+78     	; 0x2ba <vfprintf+0x19e>
 26c:	f7 01       	movw	r30, r14
 26e:	80 81       	ld	r24, Z
 270:	89 83       	std	Y+1, r24	; 0x01
 272:	97 01       	movw	r18, r14
 274:	2e 5f       	subi	r18, 0xFE	; 254
 276:	3f 4f       	sbci	r19, 0xFF	; 255
 278:	79 01       	movw	r14, r18
 27a:	28 88       	ldd	r2, Y+16	; 0x10
 27c:	39 88       	ldd	r3, Y+17	; 0x11
 27e:	4a 88       	ldd	r4, Y+18	; 0x12
 280:	aa 24       	eor	r10, r10
 282:	a3 94       	inc	r10
 284:	b1 2c       	mov	r11, r1
 286:	17 c0       	rjmp	.+46     	; 0x2b6 <vfprintf+0x19a>
 288:	a7 01       	movw	r20, r14
 28a:	4d 5f       	subi	r20, 0xFD	; 253
 28c:	5f 4f       	sbci	r21, 0xFF	; 255
 28e:	5f 87       	std	Y+15, r21	; 0x0f
 290:	4e 87       	std	Y+14, r20	; 0x0e
 292:	f7 01       	movw	r30, r14
 294:	20 80       	ld	r2, Z
 296:	31 80       	ldd	r3, Z+1	; 0x01
 298:	42 80       	ldd	r4, Z+2	; 0x02
 29a:	16 ff       	sbrs	r17, 6
 29c:	03 c0       	rjmp	.+6      	; 0x2a4 <vfprintf+0x188>
 29e:	4b 2d       	mov	r20, r11
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <vfprintf+0x18c>
 2a4:	4f ef       	ldi	r20, 0xFF	; 255
 2a6:	5f ef       	ldi	r21, 0xFF	; 255
 2a8:	84 2d       	mov	r24, r4
 2aa:	b1 01       	movw	r22, r2
 2ac:	0e 94 f7 04 	call	0x9ee	; 0x9ee <strnlen>
 2b0:	5c 01       	movw	r10, r24
 2b2:	ee 84       	ldd	r14, Y+14	; 0x0e
 2b4:	ff 84       	ldd	r15, Y+15	; 0x0f
 2b6:	1f 77       	andi	r17, 0x7F	; 127
 2b8:	18 c0       	rjmp	.+48     	; 0x2ea <vfprintf+0x1ce>
 2ba:	97 01       	movw	r18, r14
 2bc:	2d 5f       	subi	r18, 0xFD	; 253
 2be:	3f 4f       	sbci	r19, 0xFF	; 255
 2c0:	3f 87       	std	Y+15, r19	; 0x0f
 2c2:	2e 87       	std	Y+14, r18	; 0x0e
 2c4:	f7 01       	movw	r30, r14
 2c6:	20 80       	ld	r2, Z
 2c8:	31 80       	ldd	r3, Z+1	; 0x01
 2ca:	42 80       	ldd	r4, Z+2	; 0x02
 2cc:	16 ff       	sbrs	r17, 6
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <vfprintf+0x1ba>
 2d0:	4b 2d       	mov	r20, r11
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <vfprintf+0x1be>
 2d6:	4f ef       	ldi	r20, 0xFF	; 255
 2d8:	5f ef       	ldi	r21, 0xFF	; 255
 2da:	84 2d       	mov	r24, r4
 2dc:	b1 01       	movw	r22, r2
 2de:	0e 94 f7 04 	call	0x9ee	; 0x9ee <strnlen>
 2e2:	5c 01       	movw	r10, r24
 2e4:	10 68       	ori	r17, 0x80	; 128
 2e6:	ee 84       	ldd	r14, Y+14	; 0x0e
 2e8:	ff 84       	ldd	r15, Y+15	; 0x0f
 2ea:	13 fd       	sbrc	r17, 3
 2ec:	1e c0       	rjmp	.+60     	; 0x32a <vfprintf+0x20e>
 2ee:	80 2f       	mov	r24, r16
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	a8 16       	cp	r10, r24
 2f4:	b9 06       	cpc	r11, r25
 2f6:	c8 f4       	brcc	.+50     	; 0x32a <vfprintf+0x20e>
 2f8:	b6 01       	movw	r22, r12
 2fa:	80 e2       	ldi	r24, 0x20	; 32
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 28 04 	call	0x850	; 0x850 <fputc>
 302:	01 50       	subi	r16, 0x01	; 1
 304:	f4 cf       	rjmp	.-24     	; 0x2ee <vfprintf+0x1d2>
 306:	f1 01       	movw	r30, r2
 308:	54 2d       	mov	r21, r4
 30a:	0e 94 cb 05 	call	0xb96	; 0xb96 <__xload_1>
 30e:	86 2f       	mov	r24, r22
 310:	ff ef       	ldi	r31, 0xFF	; 255
 312:	2f 1a       	sub	r2, r31
 314:	3f 0a       	sbc	r3, r31
 316:	4f 0a       	sbc	r4, r31
 318:	b6 01       	movw	r22, r12
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 28 04 	call	0x850	; 0x850 <fputc>
 320:	01 11       	cpse	r16, r1
 322:	01 50       	subi	r16, 0x01	; 1
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	a2 1a       	sub	r10, r18
 328:	b1 08       	sbc	r11, r1
 32a:	a1 14       	cp	r10, r1
 32c:	b1 04       	cpc	r11, r1
 32e:	59 f7       	brne	.-42     	; 0x306 <vfprintf+0x1ea>
 330:	f5 c0       	rjmp	.+490    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 332:	84 36       	cpi	r24, 0x64	; 100
 334:	11 f0       	breq	.+4      	; 0x33a <vfprintf+0x21e>
 336:	89 36       	cpi	r24, 0x69	; 105
 338:	71 f5       	brne	.+92     	; 0x396 <vfprintf+0x27a>
 33a:	f7 01       	movw	r30, r14
 33c:	17 ff       	sbrs	r17, 7
 33e:	08 c0       	rjmp	.+16     	; 0x350 <vfprintf+0x234>
 340:	60 81       	ld	r22, Z
 342:	71 81       	ldd	r23, Z+1	; 0x01
 344:	82 81       	ldd	r24, Z+2	; 0x02
 346:	93 81       	ldd	r25, Z+3	; 0x03
 348:	97 01       	movw	r18, r14
 34a:	2c 5f       	subi	r18, 0xFC	; 252
 34c:	3f 4f       	sbci	r19, 0xFF	; 255
 34e:	09 c0       	rjmp	.+18     	; 0x362 <vfprintf+0x246>
 350:	60 81       	ld	r22, Z
 352:	71 81       	ldd	r23, Z+1	; 0x01
 354:	07 2e       	mov	r0, r23
 356:	00 0c       	add	r0, r0
 358:	88 0b       	sbc	r24, r24
 35a:	99 0b       	sbc	r25, r25
 35c:	97 01       	movw	r18, r14
 35e:	2e 5f       	subi	r18, 0xFE	; 254
 360:	3f 4f       	sbci	r19, 0xFF	; 255
 362:	79 01       	movw	r14, r18
 364:	1f 76       	andi	r17, 0x6F	; 111
 366:	31 2e       	mov	r3, r17
 368:	97 ff       	sbrs	r25, 7
 36a:	0a c0       	rjmp	.+20     	; 0x380 <vfprintf+0x264>
 36c:	90 95       	com	r25
 36e:	80 95       	com	r24
 370:	70 95       	com	r23
 372:	61 95       	neg	r22
 374:	7f 4f       	sbci	r23, 0xFF	; 255
 376:	8f 4f       	sbci	r24, 0xFF	; 255
 378:	9f 4f       	sbci	r25, 0xFF	; 255
 37a:	31 2f       	mov	r19, r17
 37c:	30 68       	ori	r19, 0x80	; 128
 37e:	33 2e       	mov	r3, r19
 380:	2a e0       	ldi	r18, 0x0A	; 10
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	ae 01       	movw	r20, r28
 386:	4f 5f       	subi	r20, 0xFF	; 255
 388:	5f 4f       	sbci	r21, 0xFF	; 255
 38a:	0e 94 42 03 	call	0x684	; 0x684 <__ultoa_invert>
 38e:	48 2e       	mov	r4, r24
 390:	4c 85       	ldd	r20, Y+12	; 0x0c
 392:	44 1a       	sub	r4, r20
 394:	4a c0       	rjmp	.+148    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 396:	85 37       	cpi	r24, 0x75	; 117
 398:	29 f4       	brne	.+10     	; 0x3a4 <vfprintf+0x288>
 39a:	1f 7e       	andi	r17, 0xEF	; 239
 39c:	a1 2e       	mov	r10, r17
 39e:	2a e0       	ldi	r18, 0x0A	; 10
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	25 c0       	rjmp	.+74     	; 0x3ee <vfprintf+0x2d2>
 3a4:	51 2f       	mov	r21, r17
 3a6:	59 7f       	andi	r21, 0xF9	; 249
 3a8:	a5 2e       	mov	r10, r21
 3aa:	8f 36       	cpi	r24, 0x6F	; 111
 3ac:	c1 f0       	breq	.+48     	; 0x3de <vfprintf+0x2c2>
 3ae:	18 f4       	brcc	.+6      	; 0x3b6 <vfprintf+0x29a>
 3b0:	88 35       	cpi	r24, 0x58	; 88
 3b2:	79 f0       	breq	.+30     	; 0x3d2 <vfprintf+0x2b6>
 3b4:	bd c0       	rjmp	.+378    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 3b6:	80 37       	cpi	r24, 0x70	; 112
 3b8:	19 f0       	breq	.+6      	; 0x3c0 <vfprintf+0x2a4>
 3ba:	88 37       	cpi	r24, 0x78	; 120
 3bc:	21 f0       	breq	.+8      	; 0x3c6 <vfprintf+0x2aa>
 3be:	b8 c0       	rjmp	.+368    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 3c0:	85 2f       	mov	r24, r21
 3c2:	80 61       	ori	r24, 0x10	; 16
 3c4:	a8 2e       	mov	r10, r24
 3c6:	a4 fe       	sbrs	r10, 4
 3c8:	0d c0       	rjmp	.+26     	; 0x3e4 <vfprintf+0x2c8>
 3ca:	9a 2d       	mov	r25, r10
 3cc:	94 60       	ori	r25, 0x04	; 4
 3ce:	a9 2e       	mov	r10, r25
 3d0:	09 c0       	rjmp	.+18     	; 0x3e4 <vfprintf+0x2c8>
 3d2:	14 ff       	sbrs	r17, 4
 3d4:	0a c0       	rjmp	.+20     	; 0x3ea <vfprintf+0x2ce>
 3d6:	a5 2f       	mov	r26, r21
 3d8:	a6 60       	ori	r26, 0x06	; 6
 3da:	aa 2e       	mov	r10, r26
 3dc:	06 c0       	rjmp	.+12     	; 0x3ea <vfprintf+0x2ce>
 3de:	28 e0       	ldi	r18, 0x08	; 8
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	05 c0       	rjmp	.+10     	; 0x3ee <vfprintf+0x2d2>
 3e4:	20 e1       	ldi	r18, 0x10	; 16
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <vfprintf+0x2d2>
 3ea:	20 e1       	ldi	r18, 0x10	; 16
 3ec:	32 e0       	ldi	r19, 0x02	; 2
 3ee:	f7 01       	movw	r30, r14
 3f0:	a7 fe       	sbrs	r10, 7
 3f2:	08 c0       	rjmp	.+16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f4:	60 81       	ld	r22, Z
 3f6:	71 81       	ldd	r23, Z+1	; 0x01
 3f8:	82 81       	ldd	r24, Z+2	; 0x02
 3fa:	93 81       	ldd	r25, Z+3	; 0x03
 3fc:	a7 01       	movw	r20, r14
 3fe:	4c 5f       	subi	r20, 0xFC	; 252
 400:	5f 4f       	sbci	r21, 0xFF	; 255
 402:	07 c0       	rjmp	.+14     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 404:	60 81       	ld	r22, Z
 406:	71 81       	ldd	r23, Z+1	; 0x01
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	a7 01       	movw	r20, r14
 40e:	4e 5f       	subi	r20, 0xFE	; 254
 410:	5f 4f       	sbci	r21, 0xFF	; 255
 412:	7a 01       	movw	r14, r20
 414:	ae 01       	movw	r20, r28
 416:	4f 5f       	subi	r20, 0xFF	; 255
 418:	5f 4f       	sbci	r21, 0xFF	; 255
 41a:	0e 94 42 03 	call	0x684	; 0x684 <__ultoa_invert>
 41e:	48 2e       	mov	r4, r24
 420:	5c 85       	ldd	r21, Y+12	; 0x0c
 422:	45 1a       	sub	r4, r21
 424:	8a 2d       	mov	r24, r10
 426:	8f 77       	andi	r24, 0x7F	; 127
 428:	38 2e       	mov	r3, r24
 42a:	36 fe       	sbrs	r3, 6
 42c:	0d c0       	rjmp	.+26     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 42e:	93 2d       	mov	r25, r3
 430:	9e 7f       	andi	r25, 0xFE	; 254
 432:	a9 2e       	mov	r10, r25
 434:	4b 14       	cp	r4, r11
 436:	58 f4       	brcc	.+22     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 438:	34 fe       	sbrs	r3, 4
 43a:	0b c0       	rjmp	.+22     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 43c:	32 fc       	sbrc	r3, 2
 43e:	09 c0       	rjmp	.+18     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 440:	a3 2d       	mov	r26, r3
 442:	ae 7e       	andi	r26, 0xEE	; 238
 444:	aa 2e       	mov	r10, r26
 446:	05 c0       	rjmp	.+10     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 448:	14 2d       	mov	r17, r4
 44a:	a3 2c       	mov	r10, r3
 44c:	03 c0       	rjmp	.+6      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 44e:	14 2d       	mov	r17, r4
 450:	01 c0       	rjmp	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 452:	1b 2d       	mov	r17, r11
 454:	a4 fe       	sbrs	r10, 4
 456:	0e c0       	rjmp	.+28     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 458:	fe 01       	movw	r30, r28
 45a:	e4 0d       	add	r30, r4
 45c:	f1 1d       	adc	r31, r1
 45e:	80 81       	ld	r24, Z
 460:	80 33       	cpi	r24, 0x30	; 48
 462:	21 f4       	brne	.+8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 464:	ea 2d       	mov	r30, r10
 466:	e9 7e       	andi	r30, 0xE9	; 233
 468:	ae 2e       	mov	r10, r30
 46a:	08 c0       	rjmp	.+16     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 46c:	a2 fe       	sbrs	r10, 2
 46e:	05 c0       	rjmp	.+10     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 470:	1e 5f       	subi	r17, 0xFE	; 254
 472:	04 c0       	rjmp	.+8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 474:	8a 2d       	mov	r24, r10
 476:	86 78       	andi	r24, 0x86	; 134
 478:	09 f0       	breq	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47a:	1f 5f       	subi	r17, 0xFF	; 255
 47c:	a3 fc       	sbrc	r10, 3
 47e:	11 c0       	rjmp	.+34     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 480:	a0 fe       	sbrs	r10, 0
 482:	06 c0       	rjmp	.+12     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 484:	10 17       	cp	r17, r16
 486:	88 f4       	brcc	.+34     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 488:	04 0d       	add	r16, r4
 48a:	b0 2e       	mov	r11, r16
 48c:	b1 1a       	sub	r11, r17
 48e:	0e c0       	rjmp	.+28     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 490:	10 17       	cp	r17, r16
 492:	60 f4       	brcc	.+24     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 494:	b6 01       	movw	r22, r12
 496:	80 e2       	ldi	r24, 0x20	; 32
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 28 04 	call	0x850	; 0x850 <fputc>
 49e:	1f 5f       	subi	r17, 0xFF	; 255
 4a0:	f7 cf       	rjmp	.-18     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 4a2:	10 17       	cp	r17, r16
 4a4:	18 f4       	brcc	.+6      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4a6:	01 1b       	sub	r16, r17
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4aa:	b4 2c       	mov	r11, r4
 4ac:	00 e0       	ldi	r16, 0x00	; 0
 4ae:	a4 fe       	sbrs	r10, 4
 4b0:	10 c0       	rjmp	.+32     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4b2:	b6 01       	movw	r22, r12
 4b4:	80 e3       	ldi	r24, 0x30	; 48
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 28 04 	call	0x850	; 0x850 <fputc>
 4bc:	a2 fe       	sbrs	r10, 2
 4be:	17 c0       	rjmp	.+46     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4c0:	a1 fc       	sbrc	r10, 1
 4c2:	03 c0       	rjmp	.+6      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c4:	88 e7       	ldi	r24, 0x78	; 120
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4ca:	88 e5       	ldi	r24, 0x58	; 88
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	b6 01       	movw	r22, r12
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4d2:	8a 2d       	mov	r24, r10
 4d4:	86 78       	andi	r24, 0x86	; 134
 4d6:	59 f0       	breq	.+22     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4d8:	a1 fe       	sbrs	r10, 1
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4dc:	8b e2       	ldi	r24, 0x2B	; 43
 4de:	01 c0       	rjmp	.+2      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4e0:	80 e2       	ldi	r24, 0x20	; 32
 4e2:	a7 fc       	sbrc	r10, 7
 4e4:	8d e2       	ldi	r24, 0x2D	; 45
 4e6:	b6 01       	movw	r22, r12
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 28 04 	call	0x850	; 0x850 <fputc>
 4ee:	4b 14       	cp	r4, r11
 4f0:	38 f4       	brcc	.+14     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4f2:	b6 01       	movw	r22, r12
 4f4:	80 e3       	ldi	r24, 0x30	; 48
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 28 04 	call	0x850	; 0x850 <fputc>
 4fc:	ba 94       	dec	r11
 4fe:	f7 cf       	rjmp	.-18     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 500:	4a 94       	dec	r4
 502:	e1 e0       	ldi	r30, 0x01	; 1
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	ec 0f       	add	r30, r28
 508:	fd 1f       	adc	r31, r29
 50a:	e4 0d       	add	r30, r4
 50c:	f1 1d       	adc	r31, r1
 50e:	80 81       	ld	r24, Z
 510:	b6 01       	movw	r22, r12
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 28 04 	call	0x850	; 0x850 <fputc>
 518:	41 10       	cpse	r4, r1
 51a:	f2 cf       	rjmp	.-28     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 51c:	00 23       	and	r16, r16
 51e:	09 f4       	brne	.+2      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 520:	2c ce       	rjmp	.-936    	; 0x17a <vfprintf+0x5e>
 522:	b6 01       	movw	r22, r12
 524:	80 e2       	ldi	r24, 0x20	; 32
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 28 04 	call	0x850	; 0x850 <fputc>
 52c:	01 50       	subi	r16, 0x01	; 1
 52e:	f6 cf       	rjmp	.-20     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 530:	f6 01       	movw	r30, r12
 532:	87 81       	ldd	r24, Z+7	; 0x07
 534:	90 85       	ldd	r25, Z+8	; 0x08
 536:	02 c0       	rjmp	.+4      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	9f ef       	ldi	r25, 0xFF	; 255
 53c:	62 96       	adiw	r28, 0x12	; 18
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	f8 94       	cli
 542:	de bf       	out	0x3e, r29	; 62
 544:	0f be       	out	0x3f, r0	; 63
 546:	cd bf       	out	0x3d, r28	; 61
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	ff 90       	pop	r15
 552:	ef 90       	pop	r14
 554:	df 90       	pop	r13
 556:	cf 90       	pop	r12
 558:	bf 90       	pop	r11
 55a:	af 90       	pop	r10
 55c:	9f 90       	pop	r9
 55e:	8f 90       	pop	r8
 560:	7f 90       	pop	r7
 562:	6f 90       	pop	r6
 564:	4f 90       	pop	r4
 566:	3f 90       	pop	r3
 568:	2f 90       	pop	r2
 56a:	08 95       	ret

Disassembly of section .text.avrlibc:

000009ee <strnlen>:
 9ee:	cf 92       	push	r12
 9f0:	df 92       	push	r13
 9f2:	ef 92       	push	r14
 9f4:	6b 01       	movw	r12, r22
 9f6:	e8 2e       	mov	r14, r24
 9f8:	9a 01       	movw	r18, r20
 9fa:	a8 2f       	mov	r26, r24
 9fc:	cb 01       	movw	r24, r22
 9fe:	21 15       	cp	r18, r1
 a00:	31 05       	cpc	r19, r1
 a02:	31 f4       	brne	.+12     	; 0xa10 <strnlen+0x22>
 a04:	8c 19       	sub	r24, r12
 a06:	9d 09       	sbc	r25, r13
 a08:	ef 90       	pop	r14
 a0a:	df 90       	pop	r13
 a0c:	cf 90       	pop	r12
 a0e:	08 95       	ret
 a10:	fc 01       	movw	r30, r24
 a12:	5a 2f       	mov	r21, r26
 a14:	0e 94 cb 05 	call	0xb96	; 0xb96 <__xload_1>
 a18:	66 23       	and	r22, r22
 a1a:	a1 f3       	breq	.-24     	; 0xa04 <strnlen+0x16>
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	a1 1d       	adc	r26, r1
 a20:	21 50       	subi	r18, 0x01	; 1
 a22:	31 09       	sbc	r19, r1
 a24:	ec cf       	rjmp	.-40     	; 0x9fe <strnlen+0x10>

Disassembly of section .text.avrlibc:

00000850 <fputc>:
 850:	0f 93       	push	r16
 852:	1f 93       	push	r17
 854:	cf 93       	push	r28
 856:	df 93       	push	r29
 858:	fb 01       	movw	r30, r22
 85a:	24 81       	ldd	r18, Z+4	; 0x04
 85c:	21 fd       	sbrc	r18, 1
 85e:	03 c0       	rjmp	.+6      	; 0x866 <fputc+0x16>
 860:	8f ef       	ldi	r24, 0xFF	; 255
 862:	9f ef       	ldi	r25, 0xFF	; 255
 864:	2c c0       	rjmp	.+88     	; 0x8be <fputc+0x6e>
 866:	22 ff       	sbrs	r18, 2
 868:	16 c0       	rjmp	.+44     	; 0x896 <fputc+0x46>
 86a:	47 81       	ldd	r20, Z+7	; 0x07
 86c:	50 85       	ldd	r21, Z+8	; 0x08
 86e:	25 81       	ldd	r18, Z+5	; 0x05
 870:	36 81       	ldd	r19, Z+6	; 0x06
 872:	42 17       	cp	r20, r18
 874:	53 07       	cpc	r21, r19
 876:	44 f4       	brge	.+16     	; 0x888 <fputc+0x38>
 878:	a0 81       	ld	r26, Z
 87a:	b1 81       	ldd	r27, Z+1	; 0x01
 87c:	9d 01       	movw	r18, r26
 87e:	2f 5f       	subi	r18, 0xFF	; 255
 880:	3f 4f       	sbci	r19, 0xFF	; 255
 882:	31 83       	std	Z+1, r19	; 0x01
 884:	20 83       	st	Z, r18
 886:	8c 93       	st	X, r24
 888:	27 81       	ldd	r18, Z+7	; 0x07
 88a:	30 85       	ldd	r19, Z+8	; 0x08
 88c:	2f 5f       	subi	r18, 0xFF	; 255
 88e:	3f 4f       	sbci	r19, 0xFF	; 255
 890:	30 87       	std	Z+8, r19	; 0x08
 892:	27 83       	std	Z+7, r18	; 0x07
 894:	14 c0       	rjmp	.+40     	; 0x8be <fputc+0x6e>
 896:	8b 01       	movw	r16, r22
 898:	ec 01       	movw	r28, r24
 89a:	fb 01       	movw	r30, r22
 89c:	01 84       	ldd	r0, Z+9	; 0x09
 89e:	f2 85       	ldd	r31, Z+10	; 0x0a
 8a0:	e0 2d       	mov	r30, r0
 8a2:	09 95       	icall
 8a4:	89 2b       	or	r24, r25
 8a6:	e1 f6       	brne	.-72     	; 0x860 <fputc+0x10>
 8a8:	d8 01       	movw	r26, r16
 8aa:	17 96       	adiw	r26, 0x07	; 7
 8ac:	8d 91       	ld	r24, X+
 8ae:	9c 91       	ld	r25, X
 8b0:	18 97       	sbiw	r26, 0x08	; 8
 8b2:	01 96       	adiw	r24, 0x01	; 1
 8b4:	18 96       	adiw	r26, 0x08	; 8
 8b6:	9c 93       	st	X, r25
 8b8:	8e 93       	st	-X, r24
 8ba:	17 97       	sbiw	r26, 0x07	; 7
 8bc:	ce 01       	movw	r24, r28
 8be:	df 91       	pop	r29
 8c0:	cf 91       	pop	r28
 8c2:	1f 91       	pop	r17
 8c4:	0f 91       	pop	r16
 8c6:	08 95       	ret

Disassembly of section .text.avrlibc:

00000684 <__ultoa_invert>:
 684:	fa 01       	movw	r30, r20
 686:	aa 27       	eor	r26, r26
 688:	28 30       	cpi	r18, 0x08	; 8
 68a:	51 f1       	breq	.+84     	; 0x6e0 <__ultoa_invert+0x5c>
 68c:	20 31       	cpi	r18, 0x10	; 16
 68e:	81 f1       	breq	.+96     	; 0x6f0 <__ultoa_invert+0x6c>
 690:	e8 94       	clt
 692:	6f 93       	push	r22
 694:	6e 7f       	andi	r22, 0xFE	; 254
 696:	6e 5f       	subi	r22, 0xFE	; 254
 698:	7f 4f       	sbci	r23, 0xFF	; 255
 69a:	8f 4f       	sbci	r24, 0xFF	; 255
 69c:	9f 4f       	sbci	r25, 0xFF	; 255
 69e:	af 4f       	sbci	r26, 0xFF	; 255
 6a0:	b1 e0       	ldi	r27, 0x01	; 1
 6a2:	3e d0       	rcall	.+124    	; 0x720 <__ultoa_invert+0x9c>
 6a4:	b4 e0       	ldi	r27, 0x04	; 4
 6a6:	3c d0       	rcall	.+120    	; 0x720 <__ultoa_invert+0x9c>
 6a8:	67 0f       	add	r22, r23
 6aa:	78 1f       	adc	r23, r24
 6ac:	89 1f       	adc	r24, r25
 6ae:	9a 1f       	adc	r25, r26
 6b0:	a1 1d       	adc	r26, r1
 6b2:	68 0f       	add	r22, r24
 6b4:	79 1f       	adc	r23, r25
 6b6:	8a 1f       	adc	r24, r26
 6b8:	91 1d       	adc	r25, r1
 6ba:	a1 1d       	adc	r26, r1
 6bc:	6a 0f       	add	r22, r26
 6be:	71 1d       	adc	r23, r1
 6c0:	81 1d       	adc	r24, r1
 6c2:	91 1d       	adc	r25, r1
 6c4:	a1 1d       	adc	r26, r1
 6c6:	20 d0       	rcall	.+64     	; 0x708 <__ultoa_invert+0x84>
 6c8:	09 f4       	brne	.+2      	; 0x6cc <__ultoa_invert+0x48>
 6ca:	68 94       	set
 6cc:	3f 91       	pop	r19
 6ce:	2a e0       	ldi	r18, 0x0A	; 10
 6d0:	26 9f       	mul	r18, r22
 6d2:	11 24       	eor	r1, r1
 6d4:	30 19       	sub	r19, r0
 6d6:	30 5d       	subi	r19, 0xD0	; 208
 6d8:	31 93       	st	Z+, r19
 6da:	de f6       	brtc	.-74     	; 0x692 <__ultoa_invert+0xe>
 6dc:	cf 01       	movw	r24, r30
 6de:	08 95       	ret
 6e0:	46 2f       	mov	r20, r22
 6e2:	47 70       	andi	r20, 0x07	; 7
 6e4:	40 5d       	subi	r20, 0xD0	; 208
 6e6:	41 93       	st	Z+, r20
 6e8:	b3 e0       	ldi	r27, 0x03	; 3
 6ea:	0f d0       	rcall	.+30     	; 0x70a <__ultoa_invert+0x86>
 6ec:	c9 f7       	brne	.-14     	; 0x6e0 <__ultoa_invert+0x5c>
 6ee:	f6 cf       	rjmp	.-20     	; 0x6dc <__ultoa_invert+0x58>
 6f0:	46 2f       	mov	r20, r22
 6f2:	4f 70       	andi	r20, 0x0F	; 15
 6f4:	40 5d       	subi	r20, 0xD0	; 208
 6f6:	4a 33       	cpi	r20, 0x3A	; 58
 6f8:	18 f0       	brcs	.+6      	; 0x700 <__ultoa_invert+0x7c>
 6fa:	49 5d       	subi	r20, 0xD9	; 217
 6fc:	31 fd       	sbrc	r19, 1
 6fe:	40 52       	subi	r20, 0x20	; 32
 700:	41 93       	st	Z+, r20
 702:	02 d0       	rcall	.+4      	; 0x708 <__ultoa_invert+0x84>
 704:	a9 f7       	brne	.-22     	; 0x6f0 <__ultoa_invert+0x6c>
 706:	ea cf       	rjmp	.-44     	; 0x6dc <__ultoa_invert+0x58>
 708:	b4 e0       	ldi	r27, 0x04	; 4
 70a:	a6 95       	lsr	r26
 70c:	97 95       	ror	r25
 70e:	87 95       	ror	r24
 710:	77 95       	ror	r23
 712:	67 95       	ror	r22
 714:	ba 95       	dec	r27
 716:	c9 f7       	brne	.-14     	; 0x70a <__ultoa_invert+0x86>
 718:	00 97       	sbiw	r24, 0x00	; 0
 71a:	61 05       	cpc	r22, r1
 71c:	71 05       	cpc	r23, r1
 71e:	08 95       	ret
 720:	9b 01       	movw	r18, r22
 722:	ac 01       	movw	r20, r24
 724:	0a 2e       	mov	r0, r26
 726:	06 94       	lsr	r0
 728:	57 95       	ror	r21
 72a:	47 95       	ror	r20
 72c:	37 95       	ror	r19
 72e:	27 95       	ror	r18
 730:	ba 95       	dec	r27
 732:	c9 f7       	brne	.-14     	; 0x726 <__ultoa_invert+0xa2>
 734:	62 0f       	add	r22, r18
 736:	73 1f       	adc	r23, r19
 738:	84 1f       	adc	r24, r20
 73a:	95 1f       	adc	r25, r21
 73c:	a0 1d       	adc	r26, r0
 73e:	08 95       	ret

Disassembly of section .text.libgcc:

00000b96 <__xload_1>:
 b96:	57 fd       	sbrc	r21, 7
 b98:	03 c0       	rjmp	.+6      	; 0xba0 <__xload_1+0xa>
 b9a:	5b bf       	out	0x3b, r21	; 59
 b9c:	67 91       	elpm	r22, Z+
 b9e:	08 95       	ret
 ba0:	60 81       	ld	r22, Z
 ba2:	08 95       	ret
