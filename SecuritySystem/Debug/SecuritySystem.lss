
SecuritySystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000041a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000d0  00000000  00000000  00000449  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000155c  00000000  00000000  00000519  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000aec  00000000  00000000  00001a75  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006db  00000000  00000000  00002561  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001e8  00000000  00000000  00002c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002ae  00000000  00000000  00002e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004e8  00000000  00000000  000030d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a0  00000000  00000000  000035ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000003a2  000003a2  00000416  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000365c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.adc_init 0000000e  00000380  00000380  000003f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.adc_deinit 00000008  0000039a  0000039a  0000040e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ADCLaserIO_stop 0000000c  0000038e  0000038e  00000402  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.ADCLaserIO_start 0000002e  00000208  00000208  0000027c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_21 0000008c  000000f4  000000f4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_16 00000014  0000036c  0000036c  000003e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.callback 00000002  00800100  00800100  0000041a  2**0
                  ALLOC
 20 .text.lcd_strobe_lcd_e 00000026  0000025e  0000025e  000002d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.init_4bits_mode 00000042  000001c6  000001c6  0000023a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.lcd_write_data 00000024  00000284  00000284  000002f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.display_text 0000001a  00000322  00000322  00000396  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.lcd_write_command 00000024  000002a8  000002a8  0000031c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.lcd_clear 0000001a  0000033c  0000033c  000003b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.lcd_init 0000001c  000002ea  000002ea  0000035e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .progmemx.data 0000000a  000000ea  000000ea  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 28 .text.main_lcd_print 00000046  00000180  00000180  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.waitFunction 0000001e  000002cc  000002cc  00000340  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.main    00000016  00000356  00000356  000003ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.libgcc.div 00000028  00000236  00000236  000002aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.libgcc  0000001c  00000306  00000306  0000037a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  40:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_16>
  44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_21>
  58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  70:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  74:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  78:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  7c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  80:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  84:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  88:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

000003a2 <__bad_interrupt>:
 3a2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.adc_init:

00000380 <adc_init>:

static void adc_init()
{
	//Vref=5V
	//channel 1 at pin PF1
	ADMUX=0b11100001;
 380:	81 ee       	ldi	r24, 0xE1	; 225
 382:	87 b9       	out	0x07, r24	; 7
	// ADSC=1 ADC Enable
	// ADPS[2:0]=111, prescaler=128
	// ADIE=1, ADC interrupt Enable
	//ADATE=1, ADC Auto Triggering Enable
	ADCSRA=(1<<ADEN)|(6<<ADPS0)|(1<<ADSC)|(1<<ADIE)|(1<<ADFR);
 384:	8e ee       	ldi	r24, 0xEE	; 238
 386:	86 b9       	out	0x06, r24	; 6
	
	//ADTS[2:0]= 100 , Timer0 overflow select as trigger source
	SFIOR=(4<<5);
 388:	80 e8       	ldi	r24, 0x80	; 128
 38a:	80 bd       	out	0x20, r24	; 32
 38c:	08 95       	ret

Disassembly of section .text.adc_deinit:

0000039a <adc_deinit>:
}

static void adc_deinit(){
	ADMUX = 0x00;
 39a:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x00;
 39c:	16 b8       	out	0x06, r1	; 6
	SFIOR = 0x00;
 39e:	10 bc       	out	0x20, r1	; 32
 3a0:	08 95       	ret

Disassembly of section .text.ADCLaserIO_stop:

0000038e <ADCLaserIO_stop>:
	//Enable global interrupts
	sei();
}

static void ADCLaserIO_stop(){
	adc_deinit();
 38e:	0e 94 cd 01 	call	0x39a	; 0x39a <adc_deinit>
	PORTD &= ~(0x01);
 392:	82 b3       	in	r24, 0x12	; 18
 394:	8e 7f       	andi	r24, 0xFE	; 254
 396:	82 bb       	out	0x12, r24	; 18
 398:	08 95       	ret

Disassembly of section .text.ADCLaserIO_start:

00000208 <ADCLaserIO_start>:

static void adc_init();
static void adc_deinit();

void ADCLaserIO_start(void (*_ptr)(uInt16)){
	callback = _ptr;
 208:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	adc_init();
 210:	0e 94 c0 01 	call	0x380	; 0x380 <adc_init>
	
	TCCR0=(5<<CS00);
 214:	85 e0       	ldi	r24, 0x05	; 5
 216:	83 bf       	out	0x33, r24	; 51
	TIMSK=(1<<TOIE0);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	87 bf       	out	0x37, r24	; 55
	
	//Set port F1 to input
	DDRF &= ~(0x02);
 21c:	e1 e6       	ldi	r30, 0x61	; 97
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	8d 7f       	andi	r24, 0xFD	; 253
 224:	80 83       	st	Z, r24
	//Set port D0 to output
	DDRD |= 0x01;
 226:	81 b3       	in	r24, 0x11	; 17
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	81 bb       	out	0x11, r24	; 17
	//Set port D0 high
	PORTD |= 0x01;
 22c:	82 b3       	in	r24, 0x12	; 18
 22e:	81 60       	ori	r24, 0x01	; 1
 230:	82 bb       	out	0x12, r24	; 18
	
	//Enable global interrupts
	sei();
 232:	78 94       	sei
 234:	08 95       	ret

Disassembly of section .text.__vector_21:

000000f4 <__vector_21>:

/* 
	Interrupt service routine for ADC to check if
	laser has been interrupted.
*/
ISR(ADC_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	0b b6       	in	r0, 0x3b	; 59
 100:	0f 92       	push	r0
 102:	cf 92       	push	r12
 104:	df 92       	push	r13
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	4f 93       	push	r20
 110:	5f 93       	push	r21
 112:	6f 93       	push	r22
 114:	7f 93       	push	r23
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
	//Calculates the light value in percentages
	uInt16 value = (ADC) / 655;
 122:	84 b1       	in	r24, 0x04	; 4
 124:	95 b1       	in	r25, 0x05	; 5
 126:	6f e8       	ldi	r22, 0x8F	; 143
 128:	72 e0       	ldi	r23, 0x02	; 2
 12a:	0e 94 1b 01 	call	0x236	; 0x236 <__udivmodhi4>
 12e:	6b 01       	movw	r12, r22
 130:	e1 2c       	mov	r14, r1
 132:	f1 2c       	mov	r15, r1
	
	if (value < TRIGGER_VALUE){
 134:	80 e5       	ldi	r24, 0x50	; 80
 136:	c8 16       	cp	r12, r24
 138:	d1 04       	cpc	r13, r1
 13a:	e1 04       	cpc	r14, r1
 13c:	f1 04       	cpc	r15, r1
 13e:	48 f4       	brcc	.+18     	; 0x152 <__vector_21+0x5e>
		ADCLaserIO_stop();
 140:	0e 94 c7 01 	call	0x38e	; 0x38e <ADCLaserIO_stop>
		callback(value);
 144:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 148:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14c:	c7 01       	movw	r24, r14
 14e:	b6 01       	movw	r22, r12
 150:	09 95       	icall
	}
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	ff 90       	pop	r15
 16c:	ef 90       	pop	r14
 16e:	df 90       	pop	r13
 170:	cf 90       	pop	r12
 172:	0f 90       	pop	r0
 174:	0b be       	out	0x3b, r0	; 59
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

Disassembly of section .text.__vector_16:

0000036c <__vector_16>:

/* 
	Necessary timer.
*/
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

Disassembly of section .text.lcd_strobe_lcd_e:

0000025e <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
 25e:	8b b3       	in	r24, 0x1b	; 27
 260:	80 64       	ori	r24, 0x40	; 64
 262:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	8f ec       	ldi	r24, 0xCF	; 207
 266:	97 e0       	ldi	r25, 0x07	; 7
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_strobe_lcd_e+0xa>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_strobe_lcd_e+0x10>
 26e:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTA &= ~(1<<LCD_E);  	// E low
 270:	8b b3       	in	r24, 0x1b	; 27
 272:	8f 7b       	andi	r24, 0xBF	; 191
 274:	8b bb       	out	0x1b, r24	; 27
 276:	8f ec       	ldi	r24, 0xCF	; 207
 278:	97 e0       	ldi	r25, 0x07	; 7
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_strobe_lcd_e+0x1c>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <lcd_strobe_lcd_e+0x22>
 280:	00 00       	nop
 282:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

000001c6 <init_4bits_mode>:
*******************************************************************/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 1c6:	cf 93       	push	r28
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	81 bb       	out	0x11, r24	; 17
 1cc:	8a bb       	out	0x1a, r24	; 26
 1ce:	15 ba       	out	0x15, r1	; 21
 1d0:	1b ba       	out	0x1b, r1	; 27
 1d2:	c0 e2       	ldi	r28, 0x20	; 32
 1d4:	c5 bb       	out	0x15, r28	; 21
 1d6:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_strobe_lcd_e>
 1da:	c5 bb       	out	0x15, r28	; 21
 1dc:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_strobe_lcd_e>
 1e0:	80 e8       	ldi	r24, 0x80	; 128
 1e2:	85 bb       	out	0x15, r24	; 21
 1e4:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_strobe_lcd_e>
 1e8:	15 ba       	out	0x15, r1	; 21
 1ea:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_strobe_lcd_e>
 1ee:	80 ef       	ldi	r24, 0xF0	; 240
 1f0:	85 bb       	out	0x15, r24	; 21
 1f2:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_strobe_lcd_e>
 1f6:	15 ba       	out	0x15, r1	; 21
 1f8:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_strobe_lcd_e>
 1fc:	80 e6       	ldi	r24, 0x60	; 96
 1fe:	85 bb       	out	0x15, r24	; 21
 200:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_strobe_lcd_e>
 204:	cf 91       	pop	r28
 206:	08 95       	ret

Disassembly of section .text.lcd_write_data:

00000284 <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_data(unsigned char byte) {
 284:	cf 93       	push	r28
 286:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 288:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 28a:	8b b3       	in	r24, 0x1b	; 27
 28c:	80 61       	ori	r24, 0x10	; 16
 28e:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 290:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 294:	c2 95       	swap	r28
 296:	c0 7f       	andi	r28, 0xF0	; 240
 298:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 29a:	8b b3       	in	r24, 0x1b	; 27
 29c:	80 61       	ori	r24, 0x10	; 16
 29e:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 2a0:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_strobe_lcd_e>
}
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

Disassembly of section .text.display_text:

00000322 <display_text>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void display_text(char *str) {
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 328:	03 c0       	rjmp	.+6      	; 0x330 <display_text+0xe>
		lcd_write_data(*str);
 32a:	0e 94 42 01 	call	0x284	; 0x284 <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 32e:	21 96       	adiw	r28, 0x01	; 1
 330:	88 81       	ld	r24, Y
 332:	81 11       	cpse	r24, r1
 334:	fa cf       	rjmp	.-12     	; 0x32a <display_text+0x8>
		lcd_write_data(*str);
	}
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

Disassembly of section .text.lcd_write_command:

000002a8 <lcd_write_command>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_command(unsigned char byte) {
 2a8:	cf 93       	push	r28
 2aa:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 2ac:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 2ae:	8b b3       	in	r24, 0x1b	; 27
 2b0:	8f 7e       	andi	r24, 0xEF	; 239
 2b2:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 2b4:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 2b8:	c2 95       	swap	r28
 2ba:	c0 7f       	andi	r28, 0xF0	; 240
 2bc:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 2be:	8b b3       	in	r24, 0x1b	; 27
 2c0:	8f 7e       	andi	r24, 0xEF	; 239
 2c2:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 2c4:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_strobe_lcd_e>
}
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

Disassembly of section .text.lcd_clear:

0000033c <lcd_clear>:


void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_write_command>
 342:	8f e9       	ldi	r24, 0x9F	; 159
 344:	9f e0       	ldi	r25, 0x0F	; 15
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <lcd_clear+0xa>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <lcd_clear+0x10>
 34c:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 34e:	80 e8       	ldi	r24, 0x80	; 128
 350:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_write_command>
 354:	08 95       	ret

Disassembly of section .text.lcd_init:

000002ea <lcd_init>:
}

void lcd_init()
{
	DDRC = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 2ee:	85 bb       	out	0x15, r24	; 21
	
	// Init LCD
	init_4bits_mode();
 2f0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <init_4bits_mode>
 2f4:	8f e1       	ldi	r24, 0x1F	; 31
 2f6:	9e e4       	ldi	r25, 0x4E	; 78
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <lcd_init+0xe>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <lcd_init+0x14>
 2fe:	00 00       	nop
	
	_delay_ms(10);
	
	lcd_clear();
 300:	0e 94 9e 01 	call	0x33c	; 0x33c <lcd_clear>
 304:	08 95       	ret

Disassembly of section .text.main_lcd_print:

00000180 <main_lcd_print>:
#include <xc.h>
#include "waiting.h"
#include "LCD.H"
#include "ADCLaserIO.h"

void main_lcd_print(uInt16 value){
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	2a 97       	sbiw	r28, 0x0a	; 10
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	f8 94       	cli
 18e:	de bf       	out	0x3e, r29	; 62
 190:	0f be       	out	0x3f, r0	; 63
 192:	cd bf       	out	0x3d, r28	; 61
	lcd_clear();
 194:	0e 94 9e 01 	call	0x33c	; 0x33c <lcd_clear>
	char text[] = "Triggered";
 198:	2a ee       	ldi	r18, 0xEA	; 234
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	8a e0       	ldi	r24, 0x0A	; 10
 1a0:	f9 01       	movw	r30, r18
 1a2:	de 01       	movw	r26, r28
 1a4:	11 96       	adiw	r26, 0x01	; 1
 1a6:	74 2f       	mov	r23, r20
 1a8:	0e 94 83 01 	call	0x306	; 0x306 <__movmemx_qi>
	display_text(text);
 1ac:	ce 01       	movw	r24, r28
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	0e 94 91 01 	call	0x322	; 0x322 <display_text>
}
 1b4:	2a 96       	adiw	r28, 0x0a	; 10
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

Disassembly of section .text.waitFunction:

000002cc <waitFunction>:
notes:			Busy wait, not very accurate. Make sure (external)
				clock value is set. This is used by _delay_ms inside
				until/delay.h
***********************/
{
	for (int i=0; i<ms; i++) {
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	08 c0       	rjmp	.+16     	; 0x2e2 <waitFunction+0x16>
 2d2:	ef ec       	ldi	r30, 0xCF	; 207
 2d4:	f7 e0       	ldi	r31, 0x07	; 7
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <waitFunction+0xa>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <waitFunction+0x10>
 2dc:	00 00       	nop
 2de:	2f 5f       	subi	r18, 0xFF	; 255
 2e0:	3f 4f       	sbci	r19, 0xFF	; 255
 2e2:	28 17       	cp	r18, r24
 2e4:	39 07       	cpc	r19, r25
 2e6:	ac f3       	brlt	.-22     	; 0x2d2 <waitFunction+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 2e8:	08 95       	ret

Disassembly of section .text.main:

00000356 <main>:

int main(void)
{
	lcd_init();
 356:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_init>
	ADCLaserIO_start(main_lcd_print);
 35a:	80 ec       	ldi	r24, 0xC0	; 192
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 04 01 	call	0x208	; 0x208 <ADCLaserIO_start>
	
	while(1){
		waitFunction(100);
 362:	84 e6       	ldi	r24, 0x64	; 100
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 66 01 	call	0x2cc	; 0x2cc <waitFunction>
 36a:	fb cf       	rjmp	.-10     	; 0x362 <main+0xc>

Disassembly of section .text.libgcc.div:

00000236 <__udivmodhi4>:
 236:	aa 1b       	sub	r26, r26
 238:	bb 1b       	sub	r27, r27
 23a:	51 e1       	ldi	r21, 0x11	; 17
 23c:	07 c0       	rjmp	.+14     	; 0x24c <__udivmodhi4_ep>

0000023e <__udivmodhi4_loop>:
 23e:	aa 1f       	adc	r26, r26
 240:	bb 1f       	adc	r27, r27
 242:	a6 17       	cp	r26, r22
 244:	b7 07       	cpc	r27, r23
 246:	10 f0       	brcs	.+4      	; 0x24c <__udivmodhi4_ep>
 248:	a6 1b       	sub	r26, r22
 24a:	b7 0b       	sbc	r27, r23

0000024c <__udivmodhi4_ep>:
 24c:	88 1f       	adc	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	5a 95       	dec	r21
 252:	a9 f7       	brne	.-22     	; 0x23e <__udivmodhi4_loop>
 254:	80 95       	com	r24
 256:	90 95       	com	r25
 258:	bc 01       	movw	r22, r24
 25a:	cd 01       	movw	r24, r26
 25c:	08 95       	ret

Disassembly of section .text.libgcc:

00000306 <__movmemx_qi>:
 306:	99 27       	eor	r25, r25

00000308 <__movmemx_hi>:
 308:	77 fd       	sbrc	r23, 7
 30a:	06 c0       	rjmp	.+12     	; 0x318 <__movmemx_hi+0x10>
 30c:	7b bf       	out	0x3b, r23	; 59
 30e:	07 90       	elpm	r0, Z+
 310:	0d 92       	st	X+, r0
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	e1 f7       	brne	.-8      	; 0x30e <__movmemx_hi+0x6>
 316:	08 95       	ret
 318:	01 90       	ld	r0, Z+
 31a:	0d 92       	st	X+, r0
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	e1 f7       	brne	.-8      	; 0x318 <__movmemx_hi+0x10>
 320:	08 95       	ret
