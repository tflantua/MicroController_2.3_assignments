
SecuritySystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000250  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000088  00000000  00000000  0000027f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000011cb  00000000  00000000  00000307  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000009c0  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000581  00000000  00000000  00001e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000fc  00000000  00000000  00002414  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000028a  00000000  00000000  00002510  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000031e  00000000  00000000  0000279a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  00002ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001f8  000001f8  0000024c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_strobe_lcd_e 00000026  00000118  00000118  0000016c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.init_4bits_mode 00000042  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_write_data 00000024  0000013e  0000013e  00000192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.display_text 0000001a  000001a4  000001a4  000001f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_write_command 00000024  00000162  00000162  000001b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_clear 0000001a  000001be  000001be  00000212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.init    00000016  000001d8  000001d8  0000022c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.waitFunction 0000001e  00000186  00000186  000001da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.adcInit 0000000a  000001ee  000001ee  00000242  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    00000032  000000e6  000000e6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
   8:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
   c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  10:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  14:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  18:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  1c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  20:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  24:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  28:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  2c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  30:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  34:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  38:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  3c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  40:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  44:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  48:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  4c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  50:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  54:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  58:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  5c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  60:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  64:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  68:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  6c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  70:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  74:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  78:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  7c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  80:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  84:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>
  88:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

000001f8 <__bad_interrupt>:
 1f8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_strobe_lcd_e:

00000118 <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	80 64       	ori	r24, 0x40	; 64
 11c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	8f ec       	ldi	r24, 0xCF	; 207
 120:	97 e0       	ldi	r25, 0x07	; 7
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_strobe_lcd_e+0xa>
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_strobe_lcd_e+0x10>
 128:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTA &= ~(1<<LCD_E);  	// E low
 12a:	8b b3       	in	r24, 0x1b	; 27
 12c:	8f 7b       	andi	r24, 0xBF	; 191
 12e:	8b bb       	out	0x1b, r24	; 27
 130:	8f ec       	ldi	r24, 0xCF	; 207
 132:	97 e0       	ldi	r25, 0x07	; 7
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <lcd_strobe_lcd_e+0x1c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_strobe_lcd_e+0x22>
 13a:	00 00       	nop
 13c:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

000000a4 <init_4bits_mode>:
*******************************************************************/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
  a4:	cf 93       	push	r28
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	81 bb       	out	0x11, r24	; 17
  aa:	8a bb       	out	0x1a, r24	; 26
  ac:	15 ba       	out	0x15, r1	; 21
  ae:	1b ba       	out	0x1b, r1	; 27
  b0:	c0 e2       	ldi	r28, 0x20	; 32
  b2:	c5 bb       	out	0x15, r28	; 21
  b4:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_strobe_lcd_e>
  b8:	c5 bb       	out	0x15, r28	; 21
  ba:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_strobe_lcd_e>
  be:	80 e8       	ldi	r24, 0x80	; 128
  c0:	85 bb       	out	0x15, r24	; 21
  c2:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_strobe_lcd_e>
  c6:	15 ba       	out	0x15, r1	; 21
  c8:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_strobe_lcd_e>
  cc:	80 ef       	ldi	r24, 0xF0	; 240
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_strobe_lcd_e>
  d4:	15 ba       	out	0x15, r1	; 21
  d6:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_strobe_lcd_e>
  da:	80 e6       	ldi	r24, 0x60	; 96
  dc:	85 bb       	out	0x15, r24	; 21
  de:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_strobe_lcd_e>
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

Disassembly of section .text.lcd_write_data:

0000013e <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_data(unsigned char byte) {
 13e:	cf 93       	push	r28
 140:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 142:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 144:	8b b3       	in	r24, 0x1b	; 27
 146:	80 61       	ori	r24, 0x10	; 16
 148:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 14a:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 14e:	c2 95       	swap	r28
 150:	c0 7f       	andi	r28, 0xF0	; 240
 152:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 154:	8b b3       	in	r24, 0x1b	; 27
 156:	80 61       	ori	r24, 0x10	; 16
 158:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 15a:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_strobe_lcd_e>
}
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

Disassembly of section .text.display_text:

000001a4 <display_text>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void display_text(char *str) {
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <display_text+0xe>
		lcd_write_data(*str);
 1ac:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 1b0:	21 96       	adiw	r28, 0x01	; 1
 1b2:	88 81       	ld	r24, Y
 1b4:	81 11       	cpse	r24, r1
 1b6:	fa cf       	rjmp	.-12     	; 0x1ac <display_text+0x8>
		lcd_write_data(*str);
	}
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

Disassembly of section .text.lcd_write_command:

00000162 <lcd_write_command>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_command(unsigned char byte) {
 162:	cf 93       	push	r28
 164:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 166:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 168:	8b b3       	in	r24, 0x1b	; 27
 16a:	8f 7e       	andi	r24, 0xEF	; 239
 16c:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 16e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 172:	c2 95       	swap	r28
 174:	c0 7f       	andi	r28, 0xF0	; 240
 176:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 178:	8b b3       	in	r24, 0x1b	; 27
 17a:	8f 7e       	andi	r24, 0xEF	; 239
 17c:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 17e:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_strobe_lcd_e>
}
 182:	cf 91       	pop	r28
 184:	08 95       	ret

Disassembly of section .text.lcd_clear:

000001be <lcd_clear>:


void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_write_command>
 1c4:	8f e9       	ldi	r24, 0x9F	; 159
 1c6:	9f e0       	ldi	r25, 0x0F	; 15
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcd_clear+0xa>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <lcd_clear+0x10>
 1ce:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_write_command>
 1d6:	08 95       	ret

Disassembly of section .text.init:

000001d8 <init>:

void init()
{
	
	// Init LCD
	init_4bits_mode();
 1d8:	0e 94 52 00 	call	0xa4	; 0xa4 <__data_load_end>
 1dc:	8f e1       	ldi	r24, 0x1F	; 31
 1de:	9e e4       	ldi	r25, 0x4E	; 78
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <init+0x8>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <init+0xe>
 1e6:	00 00       	nop
	
	_delay_ms(10);
	
	lcd_clear();
 1e8:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_clear>
 1ec:	08 95       	ret

Disassembly of section .text.waitFunction:

00000186 <waitFunction>:
notes:			Busy wait, not very accurate. Make sure (external)
				clock value is set. This is used by _delay_ms inside
				until/delay.h
***********************/
{
	for (int i=0; i<ms; i++) {
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	08 c0       	rjmp	.+16     	; 0x19c <waitFunction+0x16>
 18c:	ef ec       	ldi	r30, 0xCF	; 207
 18e:	f7 e0       	ldi	r31, 0x07	; 7
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <waitFunction+0xa>
 194:	00 c0       	rjmp	.+0      	; 0x196 <waitFunction+0x10>
 196:	00 00       	nop
 198:	2f 5f       	subi	r18, 0xFF	; 255
 19a:	3f 4f       	sbci	r19, 0xFF	; 255
 19c:	28 17       	cp	r18, r24
 19e:	39 07       	cpc	r19, r25
 1a0:	ac f3       	brlt	.-22     	; 0x18c <waitFunction+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 1a2:	08 95       	ret

Disassembly of section .text.adcInit:

000001ee <adcInit>:
#include <xc.h>
#include "waiting.h"
#include "LCD.H"

void adcInit(void){
	ADMUX = 0b01100001;
 1ee:	81 e6       	ldi	r24, 0x61	; 97
 1f0:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b11100110;
 1f2:	86 ee       	ldi	r24, 0xE6	; 230
 1f4:	86 b9       	out	0x06, r24	; 6
 1f6:	08 95       	ret

Disassembly of section .text.main:

000000e6 <main>:
}

int main(void)
{
	init();
  e6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <init>
	
	DDRA = 0xFF;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  ee:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
  f0:	81 bb       	out	0x11, r24	; 17
	DDRF = 0x00;
  f2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
    PORTD = 0x01;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	82 bb       	out	0x12, r24	; 18
	adcInit();
  fa:	0e 94 f7 00 	call	0x1ee	; 0x1ee <adcInit>
	
	while(1){
		int value = ADCH << 8 | ADCL;
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	98 2f       	mov	r25, r24
 104:	88 27       	eor	r24, r24
 106:	24 b1       	in	r18, 0x04	; 4
		display_text((char *) value);
 108:	82 2b       	or	r24, r18
 10a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <display_text>
		waitFunction(100);
 10e:	84 e6       	ldi	r24, 0x64	; 100
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 c3 00 	call	0x186	; 0x186 <waitFunction>
 116:	f3 cf       	rjmp	.-26     	; 0xfe <main+0x18>
