
AssignmentB7b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000194  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  000001c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b6c  00000000  00000000  000001f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000834  00000000  00000000  00000d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000311  00000000  00000000  00001593  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000014a  00000000  00000000  00001b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000013c  0000013c  00000190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.waitFunction 0000001e  00000100  00000100  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.setCharliePlexingLed 0000005c  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000001e  0000011e  0000011e  00000172  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
   8:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
   c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  10:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  14:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  18:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  1c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  20:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  24:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  28:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  2c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  30:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  34:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  38:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  3c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  40:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  44:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  48:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  4c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  50:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  54:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  58:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  5c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  60:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  64:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  68:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  6c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  70:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  74:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  78:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  7c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  80:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  84:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  88:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  9c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>

Disassembly of section .text:

0000013c <__bad_interrupt>:
 13c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.waitFunction:

00000100 <waitFunction>:
notes:			Busy wait, not very accurate. Make sure (external)
				clock value is set. This is used by _delay_ms inside
				util/delay.h
***********************/
{
	for (int i=0; i<ms; i++) {
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	08 c0       	rjmp	.+16     	; 0x116 <waitFunction+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	ef ec       	ldi	r30, 0xCF	; 207
 108:	f7 e0       	ldi	r31, 0x07	; 7
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <waitFunction+0xa>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <waitFunction+0x10>
 110:	00 00       	nop
 112:	2f 5f       	subi	r18, 0xFF	; 255
 114:	3f 4f       	sbci	r19, 0xFF	; 255
 116:	28 17       	cp	r18, r24
 118:	39 07       	cpc	r19, r25
 11a:	ac f3       	brlt	.-22     	; 0x106 <waitFunction+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 11c:	08 95       	ret

Disassembly of section .text.setCharliePlexingLed:

000000a4 <setCharliePlexingLed>:
	return 0;
}

void setCharliePlexingLed(int lednr) 
{
	switch (lednr)
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	91 05       	cpc	r25, r1
  a8:	b9 f0       	breq	.+46     	; 0xd8 <setCharliePlexingLed+0x34>
  aa:	2c f4       	brge	.+10     	; 0xb6 <setCharliePlexingLed+0x12>
  ac:	00 97       	sbiw	r24, 0x00	; 0
  ae:	51 f0       	breq	.+20     	; 0xc4 <setCharliePlexingLed+0x20>
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	69 f0       	breq	.+26     	; 0xce <setCharliePlexingLed+0x2a>
  b4:	08 95       	ret
  b6:	84 30       	cpi	r24, 0x04	; 4
  b8:	91 05       	cpc	r25, r1
  ba:	c1 f0       	breq	.+48     	; 0xec <setCharliePlexingLed+0x48>
  bc:	94 f0       	brlt	.+36     	; 0xe2 <setCharliePlexingLed+0x3e>
  be:	05 97       	sbiw	r24, 0x05	; 5
  c0:	d1 f0       	breq	.+52     	; 0xf6 <setCharliePlexingLed+0x52>
  c2:	08 95       	ret
	{
		case 0:
		DDRD = 0x03;
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	81 bb       	out	0x11, r24	; 17
		PORTD = 0x01;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	82 bb       	out	0x12, r24	; 18
		break;
  cc:	08 95       	ret
		case 1:
		DDRD = 0x03;
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	81 bb       	out	0x11, r24	; 17
		PORTD = 0x02;
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	82 bb       	out	0x12, r24	; 18
		break;
  d6:	08 95       	ret
		case 2:
		DDRD = 0x06;
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	81 bb       	out	0x11, r24	; 17
		PORTD = 0x02;
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	82 bb       	out	0x12, r24	; 18
		break;
  e0:	08 95       	ret
		case 3:
		DDRD = 0x06;
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	81 bb       	out	0x11, r24	; 17
		PORTD = 0x04;
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	82 bb       	out	0x12, r24	; 18
		break;
  ea:	08 95       	ret
		case 4:
		DDRD = 0x05;
  ec:	85 e0       	ldi	r24, 0x05	; 5
  ee:	81 bb       	out	0x11, r24	; 17
		PORTD = 0x04;
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	82 bb       	out	0x12, r24	; 18
		break;
  f4:	08 95       	ret
		case 5:
		DDRD = 0x05;
  f6:	85 e0       	ldi	r24, 0x05	; 5
  f8:	81 bb       	out	0x11, r24	; 17
		PORTD = 0x01;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	82 bb       	out	0x12, r24	; 18
  fe:	08 95       	ret

Disassembly of section .text.main:

0000011e <main>:

int main(void)
{
    while(1)
    {
		for (int i = 0; i < 6; i++)
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	d0 e0       	ldi	r29, 0x00	; 0
 122:	08 c0       	rjmp	.+16     	; 0x134 <main+0x16>
		{
        setCharliePlexingLed(i);
 124:	ce 01       	movw	r24, r28
 126:	0e 94 52 00 	call	0xa4	; 0xa4 <__data_load_end>
		waitFunction(500);
 12a:	84 ef       	ldi	r24, 0xF4	; 244
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 80 00 	call	0x100	; 0x100 <waitFunction>

int main(void)
{
    while(1)
    {
		for (int i = 0; i < 6; i++)
 132:	21 96       	adiw	r28, 0x01	; 1
 134:	c6 30       	cpi	r28, 0x06	; 6
 136:	d1 05       	cpc	r29, r1
 138:	ac f3       	brlt	.-22     	; 0x124 <main+0x6>
 13a:	f1 cf       	rjmp	.-30     	; 0x11e <main>
