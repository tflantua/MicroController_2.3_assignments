
buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000188  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  000001b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b53  00000000  00000000  000001e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000084e  00000000  00000000  00000d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002aa  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00001834  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000006a  00000000  00000000  00001af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000130  00000130  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  000000e4  000000e4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.timer1Init 0000001a  00000102  00000102  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000014  0000011c  0000011c  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
   8:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
   c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  10:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  14:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  18:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  1c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  20:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  24:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  28:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  2c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  30:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  34:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  38:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  3c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  40:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  44:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  48:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  4c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  50:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  54:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  58:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  5c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  60:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  64:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  68:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  6c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  70:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  74:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  78:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  7c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  80:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  84:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
  88:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	ec e8       	ldi	r30, 0x8C	; 140
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	19 c0       	rjmp	.+50     	; 0xd2 <__do_clear_bss+0x8>
  a0:	b7 91       	elpm	r27, Z+
  a2:	a7 91       	elpm	r26, Z+
  a4:	37 91       	elpm	r19, Z+
  a6:	27 91       	elpm	r18, Z+
  a8:	07 91       	elpm	r16, Z+
  aa:	07 fd       	sbrc	r16, 7
  ac:	0e c0       	rjmp	.+28     	; 0xca <__do_clear_bss>
  ae:	97 91       	elpm	r25, Z+
  b0:	87 91       	elpm	r24, Z+
  b2:	ef 01       	movw	r28, r30
  b4:	f9 2f       	mov	r31, r25
  b6:	e8 2f       	mov	r30, r24
  b8:	0b bf       	out	0x3b, r16	; 59
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x22>
  c4:	fe 01       	movw	r30, r28
  c6:	1b be       	out	0x3b, r1	; 59
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <__do_clear_bss+0x8>

000000ca <__do_clear_bss>:
  ca:	1d 92       	st	X+, r1
  cc:	a2 17       	cp	r26, r18
  ce:	b3 07       	cpc	r27, r19
  d0:	e1 f7       	brne	.-8      	; 0xca <__do_clear_bss>
  d2:	ec 38       	cpi	r30, 0x8C	; 140
  d4:	f4 07       	cpc	r31, r20
  d6:	21 f7       	brne	.-56     	; 0xa0 <__do_copy_data+0x8>
  d8:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  dc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>

Disassembly of section .text:

00000130 <__bad_interrupt>:
 130:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

000000e4 <wait>:

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms )
{
	for (int i=0; i<ms; i++)
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	08 c0       	rjmp	.+16     	; 0xfa <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	ef ec       	ldi	r30, 0xCF	; 207
  ec:	f7 e0       	ldi	r31, 0x07	; 7
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <wait+0xa>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <wait+0x10>
  f4:	00 00       	nop
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	3f 4f       	sbci	r19, 0xFF	; 255
  fa:	28 17       	cp	r18, r24
  fc:	39 07       	cpc	r19, r25
  fe:	ac f3       	brlt	.-22     	; 0xea <wait+0x6>
	{
		_delay_ms( 1 );				// library function (max 30 ms at 8MHz)
	}
}
 100:	08 95       	ret

Disassembly of section .text.timer1Init:

00000102 <timer1Init>:

// Initialize timer 1: fast PWM at pin PORTB.6 (hundredth ms)
void timer1Init( void )
{
	ICR1 = INTERVAL;				// TOP value for counting = INTERVAL*us
 102:	81 ee       	ldi	r24, 0xE1	; 225
 104:	98 e0       	ldi	r25, 0x08	; 8
 106:	97 bd       	out	0x27, r25	; 39
 108:	86 bd       	out	0x26, r24	; 38
	OCR1A = INTERVAL/2;				// compare value in between
 10a:	80 e7       	ldi	r24, 0x70	; 112
 10c:	94 e0       	ldi	r25, 0x04	; 4
 10e:	9b bd       	out	0x2b, r25	; 43
 110:	8a bd       	out	0x2a, r24	; 42
	TCCR1A = 0b10000010;			// timer, compare output at OC1A=PB5
 112:	82 e8       	ldi	r24, 0x82	; 130
 114:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00011010;			// fast PWM, TOP = ICR1, prescaler=8 (1MHz), RUN
 116:	8a e1       	ldi	r24, 0x1A	; 26
 118:	8e bd       	out	0x2e, r24	; 46
 11a:	08 95       	ret

Disassembly of section .text.main:

0000011c <main>:


// Main program: Counting on T1
int main( void )
{
	DDRB = 0xFF;					// set PORTB for compare output 
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;					// set PORTA for output in main program
 120:	8a bb       	out	0x1a, r24	; 26
	timer1Init();					// it is running now!!
 122:	0e 94 81 00 	call	0x102	; 0x102 <timer1Init>

	while (1)
	{
		wait(2000);
 126:	80 ed       	ldi	r24, 0xD0	; 208
 128:	97 e0       	ldi	r25, 0x07	; 7
 12a:	0e 94 72 00 	call	0xe4	; 0xe4 <__data_load_end>
 12e:	fb cf       	rjmp	.-10     	; 0x126 <main+0xa>
