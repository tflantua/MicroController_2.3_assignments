
Assignment2B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000032e  000003a2  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a8  00000000  00000000  000003d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001255  00000000  00000000  00000479  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000a3e  00000000  00000000  000016ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000626  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000174  00000000  00000000  00002734  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000028a  00000000  00000000  000028a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000429  00000000  00000000  00002b32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  00002f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000328  00000328  0000039c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  0000028e  0000028e  00000302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.lcd_strobe_lcd_e 00000026  00000220  00000220  00000294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.init_4bits_mode 00000042  000001de  000001de  00000252  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_data 00000024  00000246  00000246  000002ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.display_text 0000001a  000002c8  000002c8  0000033c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_write_command 00000024  0000026a  0000026a  000002de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_clear 0000001a  000002e2  000002e2  00000356  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.init    00000016  000002fc  000002fc  00000370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_1 00000054  000000f2  000000f2  00000166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_2 00000052  00000146  00000146  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .progmemx.data 00000006  000000ec  000000ec  00000160  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.opdracht5 00000046  00000198  00000198  0000020c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.main    00000016  00000312  00000312  00000386  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .data.led     00000002  00800100  0000032c  000003a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 27 .text.libgcc  0000001c  000002ac  000002ac  00000320  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_1>
   8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_2>
   c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  10:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  14:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  18:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  1c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  20:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  24:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  28:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  2c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  30:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  34:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  38:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  3c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  40:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  44:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  48:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  4c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  50:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  54:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  58:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  5c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  60:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  64:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  68:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  6c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  70:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  74:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  78:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  7c:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  80:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  84:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>
  88:	0c 94 94 01 	jmp	0x328	; 0x328 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	00 03       	mulsu	r16, r16
  92:	2c 00       	.word	0x002c	; ????

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	ec e8       	ldi	r30, 0x8C	; 140
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	19 c0       	rjmp	.+50     	; 0xda <__do_clear_bss+0x8>
  a8:	b7 91       	elpm	r27, Z+
  aa:	a7 91       	elpm	r26, Z+
  ac:	37 91       	elpm	r19, Z+
  ae:	27 91       	elpm	r18, Z+
  b0:	07 91       	elpm	r16, Z+
  b2:	07 fd       	sbrc	r16, 7
  b4:	0e c0       	rjmp	.+28     	; 0xd2 <__do_clear_bss>
  b6:	97 91       	elpm	r25, Z+
  b8:	87 91       	elpm	r24, Z+
  ba:	ef 01       	movw	r28, r30
  bc:	f9 2f       	mov	r31, r25
  be:	e8 2f       	mov	r30, r24
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	07 90       	elpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a2 17       	cp	r26, r18
  c8:	b3 07       	cpc	r27, r19
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0x22>
  cc:	fe 01       	movw	r30, r28
  ce:	1b be       	out	0x3b, r1	; 59
  d0:	04 c0       	rjmp	.+8      	; 0xda <__do_clear_bss+0x8>

000000d2 <__do_clear_bss>:
  d2:	1d 92       	st	X+, r1
  d4:	a2 17       	cp	r26, r18
  d6:	b3 07       	cpc	r27, r19
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__do_clear_bss>
  da:	e3 39       	cpi	r30, 0x93	; 147
  dc:	f4 07       	cpc	r31, r20
  de:	21 f7       	brne	.-56     	; 0xa8 <__do_copy_data+0x8>
  e0:	0e 94 89 01 	call	0x312	; 0x312 <main>
  e4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>

Disassembly of section .text:

00000328 <__bad_interrupt>:
 328:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

0000028e <wait>:
clock value is set. This is used by _delay_ms inside
util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 294:	ef ec       	ldi	r30, 0xCF	; 207
 296:	f7 e0       	ldi	r31, 0x07	; 7
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <wait+0xa>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <wait+0x10>
 29e:	00 00       	nop
 2a0:	2f 5f       	subi	r18, 0xFF	; 255
 2a2:	3f 4f       	sbci	r19, 0xFF	; 255
 2a4:	28 17       	cp	r18, r24
 2a6:	39 07       	cpc	r19, r25
 2a8:	ac f3       	brlt	.-22     	; 0x294 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 2aa:	08 95       	ret

Disassembly of section .text.lcd_strobe_lcd_e:

00000220 <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
 220:	8b b3       	in	r24, 0x1b	; 27
 222:	80 64       	ori	r24, 0x40	; 64
 224:	8b bb       	out	0x1b, r24	; 27
 226:	8f ec       	ldi	r24, 0xCF	; 207
 228:	97 e0       	ldi	r25, 0x07	; 7
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_strobe_lcd_e+0xa>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_strobe_lcd_e+0x10>
 230:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTA &= ~(1<<LCD_E);  	// E low
 232:	8b b3       	in	r24, 0x1b	; 27
 234:	8f 7b       	andi	r24, 0xBF	; 191
 236:	8b bb       	out	0x1b, r24	; 27
 238:	8f ec       	ldi	r24, 0xCF	; 207
 23a:	97 e0       	ldi	r25, 0x07	; 7
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_strobe_lcd_e+0x1c>
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_strobe_lcd_e+0x22>
 242:	00 00       	nop
 244:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

000001de <init_4bits_mode>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void init_4bits_mode(void) {
 1de:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRD = 0xFF;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
 1e4:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 1e6:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 1e8:	1b ba       	out	0x1b, r1	; 27
	//PORTA = 0xFF;

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 1ea:	c0 e2       	ldi	r28, 0x20	; 32
 1ec:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 1ee:	0e 94 10 01 	call	0x220	; 0x220 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 1f2:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 1f4:	0e 94 10 01 	call	0x220	; 0x220 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 1f8:	80 e8       	ldi	r24, 0x80	; 128
 1fa:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 1fc:	0e 94 10 01 	call	0x220	; 0x220 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 200:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 202:	0e 94 10 01 	call	0x220	; 0x220 <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 206:	80 ef       	ldi	r24, 0xF0	; 240
 208:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 20a:	0e 94 10 01 	call	0x220	; 0x220 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 20e:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 210:	0e 94 10 01 	call	0x220	; 0x220 <lcd_strobe_lcd_e>
	PORTC = 0x60;
 214:	80 e6       	ldi	r24, 0x60	; 96
 216:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 218:	0e 94 10 01 	call	0x220	; 0x220 <lcd_strobe_lcd_e>
}
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

Disassembly of section .text.lcd_write_data:

00000246 <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_data(unsigned char byte) {
 246:	cf 93       	push	r28
 248:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 24a:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 24c:	8b b3       	in	r24, 0x1b	; 27
 24e:	80 61       	ori	r24, 0x10	; 16
 250:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 252:	0e 94 10 01 	call	0x220	; 0x220 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 256:	c2 95       	swap	r28
 258:	c0 7f       	andi	r28, 0xF0	; 240
 25a:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 25c:	8b b3       	in	r24, 0x1b	; 27
 25e:	80 61       	ori	r24, 0x10	; 16
 260:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 262:	0e 94 10 01 	call	0x220	; 0x220 <lcd_strobe_lcd_e>
}
 266:	cf 91       	pop	r28
 268:	08 95       	ret

Disassembly of section .text.display_text:

000002c8 <display_text>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void display_text(char *str) {
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <display_text+0xe>
		lcd_write_data(*str);
 2d0:	0e 94 23 01 	call	0x246	; 0x246 <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 2d4:	21 96       	adiw	r28, 0x01	; 1
 2d6:	88 81       	ld	r24, Y
 2d8:	81 11       	cpse	r24, r1
 2da:	fa cf       	rjmp	.-12     	; 0x2d0 <display_text+0x8>
		lcd_write_data(*str);
	}
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

Disassembly of section .text.lcd_write_command:

0000026a <lcd_write_command>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_command(unsigned char byte) {
 26a:	cf 93       	push	r28
 26c:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 26e:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 270:	8b b3       	in	r24, 0x1b	; 27
 272:	8f 7e       	andi	r24, 0xEF	; 239
 274:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 276:	0e 94 10 01 	call	0x220	; 0x220 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 27a:	c2 95       	swap	r28
 27c:	c0 7f       	andi	r28, 0xF0	; 240
 27e:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 280:	8b b3       	in	r24, 0x1b	; 27
 282:	8f 7e       	andi	r24, 0xEF	; 239
 284:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 286:	0e 94 10 01 	call	0x220	; 0x220 <lcd_strobe_lcd_e>
}
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

Disassembly of section .text.lcd_clear:

000002e2 <lcd_clear>:


void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_write_command>
 2e8:	8f e9       	ldi	r24, 0x9F	; 159
 2ea:	9f e0       	ldi	r25, 0x0F	; 15
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <lcd_clear+0xa>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <lcd_clear+0x10>
 2f2:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 2f4:	80 e8       	ldi	r24, 0x80	; 128
 2f6:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_write_command>
 2fa:	08 95       	ret

Disassembly of section .text.init:

000002fc <init>:

void init()
{
	
	// Init LCD
	init_4bits_mode();
 2fc:	0e 94 ef 00 	call	0x1de	; 0x1de <init_4bits_mode>
 300:	8f e1       	ldi	r24, 0x1F	; 31
 302:	9e e4       	ldi	r25, 0x4E	; 78
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <init+0x8>
 308:	00 c0       	rjmp	.+0      	; 0x30a <init+0xe>
 30a:	00 00       	nop
	
	_delay_ms(10);
	
	lcd_clear();
 30c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_clear>
 310:	08 95       	ret

Disassembly of section .text.__vector_1:

000000f2 <__vector_1>:
inputs:
outputs:
notes:			Set PORTD.5
Version :    	DMK, Initial code
*******************************************************************/
ISR( INT0_vect ) {
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
	if(led >= 1<<7)
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 104:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 108:	80 38       	cpi	r24, 0x80	; 128
 10a:	91 05       	cpc	r25, r1
 10c:	34 f0       	brlt	.+12     	; 0x11a <__vector_1+0x28>
	{
		led = 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	led = led << 1;
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTC = (led);
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 136:	85 bb       	out	0x15, r24	; 21
	
}
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

Disassembly of section .text.__vector_2:

00000146 <__vector_2>:
inputs:
outputs:
notes:			Clear PORTD.5
Version :    	DMK, Initial code
*******************************************************************/
ISR( INT1_vect ) {
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
	if(led <= 1)
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15c:	02 97       	sbiw	r24, 0x02	; 2
 15e:	34 f4       	brge	.+12     	; 0x16c <__vector_2+0x26>
	{
		led = 1<<7;
 160:	80 e8       	ldi	r24, 0x80	; 128
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 168:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	led = led >> 1;
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 174:	95 95       	asr	r25
 176:	87 95       	ror	r24
 178:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTC = (led);
 180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 184:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 188:	85 bb       	out	0x15, r24	; 21
	
}
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

Disassembly of section .text.opdracht5:

00000198 <opdracht5>:
	_delay_ms(500);
	return opdracht5();
}

int opdracht5()
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	00 d0       	rcall	.+0      	; 0x19e <opdracht5+0x6>
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <opdracht5+0x8>
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <opdracht5+0xa>
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
	// Init I/O
	DDRC = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 1aa:	85 bb       	out	0x15, r24	; 21
	
	init();
 1ac:	0e 94 7e 01 	call	0x2fc	; 0x2fc <init>
	
	char test[] = "hello";
 1b0:	2c ee       	ldi	r18, 0xEC	; 236
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	f9 01       	movw	r30, r18
 1ba:	de 01       	movw	r26, r28
 1bc:	11 96       	adiw	r26, 0x01	; 1
 1be:	74 2f       	mov	r23, r20
 1c0:	0e 94 56 01 	call	0x2ac	; 0x2ac <__movmemx_qi>

	// Write sample string
	display_text(test);
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <display_text>

	// Loop forever
	while (1) {
		PORTC ^= (1<<0);	// Toggle PORTD.7
 1cc:	95 b3       	in	r25, 0x15	; 21
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	89 27       	eor	r24, r25
 1d2:	85 bb       	out	0x15, r24	; 21
		wait( 250 );
 1d4:	8a ef       	ldi	r24, 0xFA	; 250
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 47 01 	call	0x28e	; 0x28e <wait>
 1dc:	f7 cf       	rjmp	.-18     	; 0x1cc <opdracht5+0x34>

Disassembly of section .text.main:

00000312 <main>:
 312:	2f ef       	ldi	r18, 0xFF	; 255
 314:	84 e3       	ldi	r24, 0x34	; 52
 316:	9c e0       	ldi	r25, 0x0C	; 12
 318:	21 50       	subi	r18, 0x01	; 1
 31a:	80 40       	sbci	r24, 0x00	; 0
 31c:	90 40       	sbci	r25, 0x00	; 0
 31e:	e1 f7       	brne	.-8      	; 0x318 <main+0x6>
 320:	00 c0       	rjmp	.+0      	; 0x322 <main+0x10>
 322:	00 00       	nop
	0b01110001  //F
};

int main( void ) {
	_delay_ms(500);
	return opdracht5();
 324:	0e 94 cc 00 	call	0x198	; 0x198 <opdracht5>

Disassembly of section .text.libgcc:

000002ac <__movmemx_qi>:
 2ac:	99 27       	eor	r25, r25

000002ae <__movmemx_hi>:
 2ae:	77 fd       	sbrc	r23, 7
 2b0:	06 c0       	rjmp	.+12     	; 0x2be <__movmemx_hi+0x10>
 2b2:	7b bf       	out	0x3b, r23	; 59
 2b4:	07 90       	elpm	r0, Z+
 2b6:	0d 92       	st	X+, r0
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <__movmemx_hi+0x6>
 2bc:	08 95       	ret
 2be:	01 90       	ld	r0, Z+
 2c0:	0d 92       	st	X+, r0
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	e1 f7       	brne	.-8      	; 0x2be <__movmemx_hi+0x10>
 2c6:	08 95       	ret
