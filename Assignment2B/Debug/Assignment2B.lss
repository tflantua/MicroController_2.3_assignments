
Assignment2B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000246  000002ba  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000098  00000000  00000000  000002e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000011bc  00000000  00000000  00000381  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000a3a  00000000  00000000  0000153d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000054a  00000000  00000000  00001f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000012c  00000000  00000000  000024c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000028b  00000000  00000000  000025f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000329  00000000  00000000  0000287b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00002ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000240  00000240  000002b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.lcd_Command 0000003c  00000192  00000192  00000206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.init    00000020  0000020a  0000020a  0000027e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_writeChar 0000003c  000001ce  000001ce  00000242  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_1 00000054  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_2 00000052  00000140  00000140  000001b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.opdracht5 0000000c  0000022a  0000022a  0000029e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    0000000a  00000236  00000236  000002aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .data.led     00000002  00800100  00000244  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <_etext>
   8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_2>
   c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  10:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  14:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  18:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  1c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  20:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  24:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  28:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  2c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  30:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  34:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  38:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  3c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  40:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  44:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  48:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  4c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  50:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  54:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  58:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  5c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  60:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  64:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  68:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  6c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  70:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  74:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  78:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  7c:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  80:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  84:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>
  88:	0c 94 20 01 	jmp	0x240	; 0x240 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	00 02       	muls	r16, r16
  92:	44 00       	.word	0x0044	; ????

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	ec e8       	ldi	r30, 0x8C	; 140
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	19 c0       	rjmp	.+50     	; 0xda <__do_clear_bss+0x8>
  a8:	b7 91       	elpm	r27, Z+
  aa:	a7 91       	elpm	r26, Z+
  ac:	37 91       	elpm	r19, Z+
  ae:	27 91       	elpm	r18, Z+
  b0:	07 91       	elpm	r16, Z+
  b2:	07 fd       	sbrc	r16, 7
  b4:	0e c0       	rjmp	.+28     	; 0xd2 <__do_clear_bss>
  b6:	97 91       	elpm	r25, Z+
  b8:	87 91       	elpm	r24, Z+
  ba:	ef 01       	movw	r28, r30
  bc:	f9 2f       	mov	r31, r25
  be:	e8 2f       	mov	r30, r24
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	07 90       	elpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a2 17       	cp	r26, r18
  c8:	b3 07       	cpc	r27, r19
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0x22>
  cc:	fe 01       	movw	r30, r28
  ce:	1b be       	out	0x3b, r1	; 59
  d0:	04 c0       	rjmp	.+8      	; 0xda <__do_clear_bss+0x8>

000000d2 <__do_clear_bss>:
  d2:	1d 92       	st	X+, r1
  d4:	a2 17       	cp	r26, r18
  d6:	b3 07       	cpc	r27, r19
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__do_clear_bss>
  da:	e3 39       	cpi	r30, 0x93	; 147
  dc:	f4 07       	cpc	r31, r20
  de:	21 f7       	brne	.-56     	; 0xa8 <__do_copy_data+0x8>
  e0:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  e4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>

Disassembly of section .text:

00000240 <__bad_interrupt>:
 240:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_Command:

00000192 <lcd_Command>:

#include "LCD.H"

void lcd_Command(unsigned char dat)
{
	PORTC = dat & 0xF0;
 192:	98 2f       	mov	r25, r24
 194:	90 7f       	andi	r25, 0xF0	; 240
 196:	95 bb       	out	0x15, r25	; 21
	PORTC |= 0x08;
 198:	95 b3       	in	r25, 0x15	; 21
 19a:	98 60       	ori	r25, 0x08	; 8
 19c:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	ef ec       	ldi	r30, 0xCF	; 207
 1a0:	f7 e0       	ldi	r31, 0x07	; 7
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_Command+0x10>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_Command+0x16>
 1a8:	00 00       	nop
	
	_delay_ms(1);
	
	PORTC = 0x04;
 1aa:	94 e0       	ldi	r25, 0x04	; 4
 1ac:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4;
 1ae:	f0 e1       	ldi	r31, 0x10	; 16
 1b0:	8f 9f       	mul	r24, r31
 1b2:	c0 01       	movw	r24, r0
 1b4:	11 24       	eor	r1, r1
 1b6:	85 bb       	out	0x15, r24	; 21
	
	PORTC |= 0x08;
 1b8:	85 b3       	in	r24, 0x15	; 21
 1ba:	88 60       	ori	r24, 0x08	; 8
 1bc:	85 bb       	out	0x15, r24	; 21
 1be:	8f ec       	ldi	r24, 0xCF	; 207
 1c0:	97 e0       	ldi	r25, 0x07	; 7
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_Command+0x30>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_Command+0x36>
 1c8:	00 00       	nop
	
	_delay_ms(1);
	
	PORTC = 0x00;
 1ca:	15 ba       	out	0x15, r1	; 21
 1cc:	08 95       	ret

Disassembly of section .text.init:

0000020a <init>:
}

void init()
{
	lcd_Command(0x02); //return home
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_Command>
	lcd_Command(0x28); //set 4 bit mode
 210:	88 e2       	ldi	r24, 0x28	; 40
 212:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_Command>
	lcd_Command(0x0C); //Display on, Curser off, blinker off
 216:	8c e0       	ldi	r24, 0x0C	; 12
 218:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_Command>
	lcd_Command(0x06); //entry mode: cursert to right no shift
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_Command>
	lcd_Command(0x80); //RAM addr 0, First position line 1 
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_Command>
 228:	08 95       	ret

Disassembly of section .text.lcd_writeChar:

000001ce <lcd_writeChar>:
	
}

void lcd_writeChar(unsigned char dat){
	PORTC = dat & 0xF0;
 1ce:	98 2f       	mov	r25, r24
 1d0:	90 7f       	andi	r25, 0xF0	; 240
 1d2:	95 bb       	out	0x15, r25	; 21
	PORTC |= 0x0C;
 1d4:	95 b3       	in	r25, 0x15	; 21
 1d6:	9c 60       	ori	r25, 0x0C	; 12
 1d8:	95 bb       	out	0x15, r25	; 21
 1da:	ef ec       	ldi	r30, 0xCF	; 207
 1dc:	f7 e0       	ldi	r31, 0x07	; 7
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_writeChar+0x10>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_writeChar+0x16>
 1e4:	00 00       	nop
	
	_delay_ms(1);
	
	PORTC = 0x04;
 1e6:	94 e0       	ldi	r25, 0x04	; 4
 1e8:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4;
 1ea:	f0 e1       	ldi	r31, 0x10	; 16
 1ec:	8f 9f       	mul	r24, r31
 1ee:	c0 01       	movw	r24, r0
 1f0:	11 24       	eor	r1, r1
 1f2:	85 bb       	out	0x15, r24	; 21
	
	PORTC |= 0x0C;
 1f4:	85 b3       	in	r24, 0x15	; 21
 1f6:	8c 60       	ori	r24, 0x0C	; 12
 1f8:	85 bb       	out	0x15, r24	; 21
 1fa:	8f ec       	ldi	r24, 0xCF	; 207
 1fc:	97 e0       	ldi	r25, 0x07	; 7
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_writeChar+0x30>
 202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_writeChar+0x36>
 204:	00 00       	nop
	
	_delay_ms(1);
	
	PORTC = 0x00;
 206:	15 ba       	out	0x15, r1	; 21
 208:	08 95       	ret

Disassembly of section .text.__vector_1:

000000ec <__vector_1>:
inputs:
outputs:
notes:			Set PORTD.5
Version :    	DMK, Initial code
*******************************************************************/
ISR( INT0_vect ) {
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
	if(led >= 1<<7)
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 102:	80 38       	cpi	r24, 0x80	; 128
 104:	91 05       	cpc	r25, r1
 106:	34 f0       	brlt	.+12     	; 0x114 <__vector_1+0x28>
	{
		led = 1;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	led = led << 1;
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTC = (led);
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 130:	85 bb       	out	0x15, r24	; 21
	
}
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

Disassembly of section .text.__vector_2:

00000140 <__vector_2>:
inputs:
outputs:
notes:			Clear PORTD.5
Version :    	DMK, Initial code
*******************************************************************/
ISR( INT1_vect ) {
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
	if(led <= 1)
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 156:	02 97       	sbiw	r24, 0x02	; 2
 158:	34 f4       	brge	.+12     	; 0x166 <__vector_2+0x26>
	{
		led = 1<<7;
 15a:	80 e8       	ldi	r24, 0x80	; 128
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	led = led >> 1;
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16e:	95 95       	asr	r25
 170:	87 95       	ror	r24
 172:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTC = (led);
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 182:	85 bb       	out	0x15, r24	; 21
	
}
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

Disassembly of section .text.opdracht5:

0000022a <opdracht5>:

void opdracht5()
{
	char test = "Hello";
	
	init();
 22a:	0e 94 05 01 	call	0x20a	; 0x20a <init>
	unsigned char t = 't';
	lcd_writeChar(t);
 22e:	84 e7       	ldi	r24, 0x74	; 116
 230:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_writeChar>
 234:	08 95       	ret

Disassembly of section .text.main:

00000236 <main>:
	0b01111001, //E
	0b01110001  //F
};

int main( void ) {
	opdracht5();
 236:	0e 94 15 01 	call	0x22a	; 0x22a <opdracht5>
	return 1;
}
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	08 95       	ret
