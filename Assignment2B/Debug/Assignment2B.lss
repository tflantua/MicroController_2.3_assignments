
Assignment2B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000003b2  00000426  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000426  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a8  00000000  00000000  00000455  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001281  00000000  00000000  000004fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000a3e  00000000  00000000  0000177e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000635  00000000  00000000  000021bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001ac  00000000  00000000  000027f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000028a  00000000  00000000  000029a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004ab  00000000  00000000  00002c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  000030d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000003ac  000003ac  00000420  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003160  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  00000304  00000304  00000378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.lcd_strobe_lcd_e 00000026  00000296  00000296  0000030a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.init_4bits_mode 00000042  00000254  00000254  000002c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_write_data 00000024  000002bc  000002bc  00000330  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.display_text 0000001a  0000033e  0000033e  000003b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_write_command 00000024  000002e0  000002e0  00000354  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_clear 0000001a  00000358  00000358  000003cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.init    00000016  00000372  00000372  000003e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__vector_1 00000086  00000102  00000102  00000176  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_2 00000086  00000188  00000188  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .progmemx.data 00000006  000000fc  000000fc  00000170  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .text.opdracht5 00000046  0000020e  0000020e  00000282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.main    00000016  00000388  00000388  000003fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .progmemx.data.digits 00000010  000000ec  000000ec  00000160  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 27 .data.led     00000002  00800100  000003b0  00000424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 28 .text.libgcc  0000000e  0000039e  0000039e  00000412  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.libgcc  0000001c  00000322  00000322  00000396  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_1>
   8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_2>
   c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  10:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  14:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  18:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  1c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  20:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  24:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  28:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  2c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  30:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  34:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  38:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  3c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  40:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  44:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  48:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  4c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  50:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  54:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  58:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  5c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  60:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  64:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  68:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  6c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  70:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  74:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  78:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  7c:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  80:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  84:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>
  88:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	00 03       	mulsu	r16, r16
  92:	b0 00       	.word	0x00b0	; ????

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	ec e8       	ldi	r30, 0x8C	; 140
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	19 c0       	rjmp	.+50     	; 0xda <__do_clear_bss+0x8>
  a8:	b7 91       	elpm	r27, Z+
  aa:	a7 91       	elpm	r26, Z+
  ac:	37 91       	elpm	r19, Z+
  ae:	27 91       	elpm	r18, Z+
  b0:	07 91       	elpm	r16, Z+
  b2:	07 fd       	sbrc	r16, 7
  b4:	0e c0       	rjmp	.+28     	; 0xd2 <__do_clear_bss>
  b6:	97 91       	elpm	r25, Z+
  b8:	87 91       	elpm	r24, Z+
  ba:	ef 01       	movw	r28, r30
  bc:	f9 2f       	mov	r31, r25
  be:	e8 2f       	mov	r30, r24
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	07 90       	elpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a2 17       	cp	r26, r18
  c8:	b3 07       	cpc	r27, r19
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0x22>
  cc:	fe 01       	movw	r30, r28
  ce:	1b be       	out	0x3b, r1	; 59
  d0:	04 c0       	rjmp	.+8      	; 0xda <__do_clear_bss+0x8>

000000d2 <__do_clear_bss>:
  d2:	1d 92       	st	X+, r1
  d4:	a2 17       	cp	r26, r18
  d6:	b3 07       	cpc	r27, r19
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__do_clear_bss>
  da:	e3 39       	cpi	r30, 0x93	; 147
  dc:	f4 07       	cpc	r31, r20
  de:	21 f7       	brne	.-56     	; 0xa8 <__do_copy_data+0x8>
  e0:	0e 94 c4 01 	call	0x388	; 0x388 <main>
  e4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>

Disassembly of section .text:

000003ac <__bad_interrupt>:
 3ac:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

00000304 <wait>:
clock value is set. This is used by _delay_ms inside
util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	08 c0       	rjmp	.+16     	; 0x31a <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30a:	ef ec       	ldi	r30, 0xCF	; 207
 30c:	f7 e0       	ldi	r31, 0x07	; 7
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <wait+0xa>
 312:	00 c0       	rjmp	.+0      	; 0x314 <wait+0x10>
 314:	00 00       	nop
 316:	2f 5f       	subi	r18, 0xFF	; 255
 318:	3f 4f       	sbci	r19, 0xFF	; 255
 31a:	28 17       	cp	r18, r24
 31c:	39 07       	cpc	r19, r25
 31e:	ac f3       	brlt	.-22     	; 0x30a <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 320:	08 95       	ret

Disassembly of section .text.lcd_strobe_lcd_e:

00000296 <lcd_strobe_lcd_e>:
outputs:
notes:			According datasheet HD44780
Version :    	DMK, Initial code
*******************************************************************/
void lcd_strobe_lcd_e(void) {
	PORTA |= (1<<LCD_E);	// E high
 296:	8b b3       	in	r24, 0x1b	; 27
 298:	80 64       	ori	r24, 0x40	; 64
 29a:	8b bb       	out	0x1b, r24	; 27
 29c:	8f ec       	ldi	r24, 0xCF	; 207
 29e:	97 e0       	ldi	r25, 0x07	; 7
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <lcd_strobe_lcd_e+0xa>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <lcd_strobe_lcd_e+0x10>
 2a6:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTA &= ~(1<<LCD_E);  	// E low
 2a8:	8b b3       	in	r24, 0x1b	; 27
 2aa:	8f 7b       	andi	r24, 0xBF	; 191
 2ac:	8b bb       	out	0x1b, r24	; 27
 2ae:	8f ec       	ldi	r24, 0xCF	; 207
 2b0:	97 e0       	ldi	r25, 0x07	; 7
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <lcd_strobe_lcd_e+0x1c>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <lcd_strobe_lcd_e+0x22>
 2b8:	00 00       	nop
 2ba:	08 95       	ret

Disassembly of section .text.init_4bits_mode:

00000254 <init_4bits_mode>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void init_4bits_mode(void) {
 254:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRD = 0xFF;
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
 25a:	8a bb       	out	0x1a, r24	; 26
	PORTC = 0x00;
 25c:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 25e:	1b ba       	out	0x1b, r1	; 27
	//PORTA = 0xFF;

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 260:	c0 e2       	ldi	r28, 0x20	; 32
 262:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 264:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
 268:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 26a:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 26e:	80 e8       	ldi	r24, 0x80	; 128
 270:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 272:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 276:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 278:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_strobe_lcd_e>
	PORTC = 0xF0;
 27c:	80 ef       	ldi	r24, 0xF0	; 240
 27e:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 280:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_strobe_lcd_e>

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 284:	15 ba       	out	0x15, r1	; 21
	lcd_strobe_lcd_e();
 286:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_strobe_lcd_e>
	PORTC = 0x60;
 28a:	80 e6       	ldi	r24, 0x60	; 96
 28c:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 28e:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_strobe_lcd_e>
}
 292:	cf 91       	pop	r28
 294:	08 95       	ret

Disassembly of section .text.lcd_write_data:

000002bc <lcd_write_data>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_data(unsigned char byte) {
 2bc:	cf 93       	push	r28
 2be:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 2c0:	85 bb       	out	0x15, r24	; 21
	PORTA |= (1<<LCD_RS);
 2c2:	8b b3       	in	r24, 0x1b	; 27
 2c4:	80 61       	ori	r24, 0x10	; 16
 2c6:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 2c8:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 2cc:	c2 95       	swap	r28
 2ce:	c0 7f       	andi	r28, 0xF0	; 240
 2d0:	c5 bb       	out	0x15, r28	; 21
	PORTA |= (1<<LCD_RS);
 2d2:	8b b3       	in	r24, 0x1b	; 27
 2d4:	80 61       	ori	r24, 0x10	; 16
 2d6:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 2d8:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_strobe_lcd_e>
}
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

Disassembly of section .text.display_text:

0000033e <display_text>:
inputs:
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void display_text(char *str) {
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	ec 01       	movw	r28, r24
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 344:	03 c0       	rjmp	.+6      	; 0x34c <display_text+0xe>
		lcd_write_data(*str);
 346:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_write_data>
	// while(*str) {
	// 	lcd_write_data(*str++);
	// }

	// of met een for:
	for(;*str; str++){
 34a:	21 96       	adiw	r28, 0x01	; 1
 34c:	88 81       	ld	r24, Y
 34e:	81 11       	cpse	r24, r1
 350:	fa cf       	rjmp	.-12     	; 0x346 <display_text+0x8>
		lcd_write_data(*str);
	}
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

Disassembly of section .text.lcd_write_command:

000002e0 <lcd_write_command>:
inputs:			byte - written to LCD
outputs:
notes:			According datasheet HD44780 table 12
Version :    	DMK, Initial code
*******************************************************************/
void lcd_write_command(unsigned char byte) {
 2e0:	cf 93       	push	r28
 2e2:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 2e4:	85 bb       	out	0x15, r24	; 21
	PORTA &= ~(1<<LCD_RS);
 2e6:	8b b3       	in	r24, 0x1b	; 27
 2e8:	8f 7e       	andi	r24, 0xEF	; 239
 2ea:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 2ec:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 2f0:	c2 95       	swap	r28
 2f2:	c0 7f       	andi	r28, 0xF0	; 240
 2f4:	c5 bb       	out	0x15, r28	; 21
	PORTA &= ~(1<<LCD_RS);
 2f6:	8b b3       	in	r24, 0x1b	; 27
 2f8:	8f 7e       	andi	r24, 0xEF	; 239
 2fa:	8b bb       	out	0x1b, r24	; 27
	lcd_strobe_lcd_e();
 2fc:	0e 94 4b 01 	call	0x296	; 0x296 <lcd_strobe_lcd_e>
}
 300:	cf 91       	pop	r28
 302:	08 95       	ret

Disassembly of section .text.lcd_clear:

00000358 <lcd_clear>:


void lcd_clear() {
	lcd_write_command (0x01);						//Leeg display
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_write_command>
 35e:	8f e9       	ldi	r24, 0x9F	; 159
 360:	9f e0       	ldi	r25, 0x0F	; 15
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <lcd_clear+0xa>
 366:	00 c0       	rjmp	.+0      	; 0x368 <lcd_clear+0x10>
 368:	00 00       	nop
	_delay_ms(2);
	lcd_write_command (0x80);						//Cursor terug naar start
 36a:	80 e8       	ldi	r24, 0x80	; 128
 36c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_write_command>
 370:	08 95       	ret

Disassembly of section .text.init:

00000372 <init>:

void init()
{
	
	// Init LCD
	init_4bits_mode();
 372:	0e 94 2a 01 	call	0x254	; 0x254 <init_4bits_mode>
 376:	8f e1       	ldi	r24, 0x1F	; 31
 378:	9e e4       	ldi	r25, 0x4E	; 78
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <init+0x8>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <init+0xe>
 380:	00 00       	nop
	
	_delay_ms(10);
	
	lcd_clear();
 382:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_clear>
 386:	08 95       	ret

Disassembly of section .text.__vector_1:

00000102 <__vector_1>:
outputs:
notes:			Set PORTD.5
Version :    	DMK, Initial code
*******************************************************************/

ISR( INT0_vect ) {
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	0b b6       	in	r0, 0x3b	; 59
 10e:	0f 92       	push	r0
 110:	5f 93       	push	r21
 112:	6f 93       	push	r22
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
	//PORTD |= (1<<5);
	led++;
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(led > 15 || led < 0)
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 134:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 138:	40 97       	sbiw	r24, 0x10	; 16
 13a:	34 f4       	brge	.+12     	; 0x148 <__vector_1+0x46>
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 140:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 144:	99 23       	and	r25, r25
 146:	1c f4       	brge	.+6      	; 0x14e <__vector_1+0x4c>
	{
		PORTC = digits[14];
 148:	89 e7       	ldi	r24, 0x79	; 121
 14a:	85 bb       	out	0x15, r24	; 21
 14c:	0f c0       	rjmp	.+30     	; 0x16c <__vector_1+0x6a>
		}else{
		PORTC = digits[led];
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 156:	09 2e       	mov	r0, r25
 158:	00 0c       	add	r0, r0
 15a:	aa 0b       	sbc	r26, r26
 15c:	84 51       	subi	r24, 0x14	; 20
 15e:	9f 4f       	sbci	r25, 0xFF	; 255
 160:	af 4f       	sbci	r26, 0xFF	; 255
 162:	fc 01       	movw	r30, r24
 164:	5a 2f       	mov	r21, r26
 166:	0e 94 cf 01 	call	0x39e	; 0x39e <__xload_1>
 16a:	65 bb       	out	0x15, r22	; 21
	}
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	6f 91       	pop	r22
 178:	5f 91       	pop	r21
 17a:	0f 90       	pop	r0
 17c:	0b be       	out	0x3b, r0	; 59
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

Disassembly of section .text.__vector_2:

00000188 <__vector_2>:
inputs:
outputs:
notes:			Clear PORTD.5
Version :    	DMK, Initial code
*******************************************************************/
ISR( INT1_vect ) {
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	0b b6       	in	r0, 0x3b	; 59
 194:	0f 92       	push	r0
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
	//PORTD &= ~(1<<5);
	led--;
 1a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(led > 15 || led < 0)
 1b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1be:	40 97       	sbiw	r24, 0x10	; 16
 1c0:	34 f4       	brge	.+12     	; 0x1ce <__vector_2+0x46>
 1c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ca:	99 23       	and	r25, r25
 1cc:	1c f4       	brge	.+6      	; 0x1d4 <__vector_2+0x4c>
	{
		PORTC = digits[14];
 1ce:	89 e7       	ldi	r24, 0x79	; 121
 1d0:	85 bb       	out	0x15, r24	; 21
 1d2:	0f c0       	rjmp	.+30     	; 0x1f2 <__vector_2+0x6a>
	}
	else{
		PORTC = digits[led];
 1d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1dc:	09 2e       	mov	r0, r25
 1de:	00 0c       	add	r0, r0
 1e0:	aa 0b       	sbc	r26, r26
 1e2:	84 51       	subi	r24, 0x14	; 20
 1e4:	9f 4f       	sbci	r25, 0xFF	; 255
 1e6:	af 4f       	sbci	r26, 0xFF	; 255
 1e8:	fc 01       	movw	r30, r24
 1ea:	5a 2f       	mov	r21, r26
 1ec:	0e 94 cf 01 	call	0x39e	; 0x39e <__xload_1>
 1f0:	65 bb       	out	0x15, r22	; 21
	}
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	0f 90       	pop	r0
 202:	0b be       	out	0x3b, r0	; 59
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

Disassembly of section .text.opdracht5:

0000020e <opdracht5>:
	opdracht5();
	return 1;
}

int opdracht5()
{
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	00 d0       	rcall	.+0      	; 0x214 <opdracht5+0x6>
 214:	00 d0       	rcall	.+0      	; 0x216 <opdracht5+0x8>
 216:	00 d0       	rcall	.+0      	; 0x218 <opdracht5+0xa>
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
	// Init I/O
	DDRC = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
 220:	85 bb       	out	0x15, r24	; 21
	
	init();
 222:	0e 94 b9 01 	call	0x372	; 0x372 <init>
	
	char test[] = "hello";
 226:	2c ef       	ldi	r18, 0xFC	; 252
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	40 e0       	ldi	r20, 0x00	; 0
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	f9 01       	movw	r30, r18
 230:	de 01       	movw	r26, r28
 232:	11 96       	adiw	r26, 0x01	; 1
 234:	74 2f       	mov	r23, r20
 236:	0e 94 91 01 	call	0x322	; 0x322 <__movmemx_qi>

	// Write sample string
	display_text(test);
 23a:	ce 01       	movw	r24, r28
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	0e 94 9f 01 	call	0x33e	; 0x33e <display_text>

	// Loop forever
	while (1) {
		PORTC ^= (1<<0);	// Toggle PORTD.7
 242:	95 b3       	in	r25, 0x15	; 21
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	89 27       	eor	r24, r25
 248:	85 bb       	out	0x15, r24	; 21
		wait( 250 );
 24a:	8a ef       	ldi	r24, 0xFA	; 250
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 82 01 	call	0x304	; 0x304 <wait>
 252:	f7 cf       	rjmp	.-18     	; 0x242 <opdracht5+0x34>

Disassembly of section .text.main:

00000388 <main>:
 388:	2f ef       	ldi	r18, 0xFF	; 255
 38a:	84 e3       	ldi	r24, 0x34	; 52
 38c:	9c e0       	ldi	r25, 0x0C	; 12
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <main+0x6>
 396:	00 c0       	rjmp	.+0      	; 0x398 <main+0x10>
 398:	00 00       	nop
void display( int digit );


int main( void ) {
	_delay_ms(500);
	opdracht5();
 39a:	0e 94 07 01 	call	0x20e	; 0x20e <opdracht5>

Disassembly of section .text.libgcc:

0000039e <__xload_1>:
 39e:	57 fd       	sbrc	r21, 7
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <__xload_1+0xa>
 3a2:	5b bf       	out	0x3b, r21	; 59
 3a4:	67 91       	elpm	r22, Z+
 3a6:	08 95       	ret
 3a8:	60 81       	ld	r22, Z
 3aa:	08 95       	ret

Disassembly of section .text.libgcc:

00000322 <__movmemx_qi>:
 322:	99 27       	eor	r25, r25

00000324 <__movmemx_hi>:
 324:	77 fd       	sbrc	r23, 7
 326:	06 c0       	rjmp	.+12     	; 0x334 <__movmemx_hi+0x10>
 328:	7b bf       	out	0x3b, r23	; 59
 32a:	07 90       	elpm	r0, Z+
 32c:	0d 92       	st	X+, r0
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	e1 f7       	brne	.-8      	; 0x32a <__movmemx_hi+0x6>
 332:	08 95       	ret
 334:	01 90       	ld	r0, Z+
 336:	0d 92       	st	X+, r0
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	e1 f7       	brne	.-8      	; 0x334 <__movmemx_hi+0x10>
 33c:	08 95       	ret
