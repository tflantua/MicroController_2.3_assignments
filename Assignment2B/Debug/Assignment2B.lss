
Assignment2B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000021e  00000292  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  000002c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c33  00000000  00000000  00000311  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000893  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000375  00000000  00000000  000017d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ac  00000000  00000000  00001b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000016a  00000000  00000000  00001e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00001fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000214  00000214  00000288  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002020  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  000001e8  000001e8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_1 00000054  000000fc  000000fc  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_2 00000052  00000150  00000150  000001c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.display 00000024  000001a2  000001a2  00000216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.opdracht3 00000022  000001c6  000001c6  0000023a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000004  00000218  00000218  0000028c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data.digits 00000010  000000ec  000000ec  00000160  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .data.led     00000002  00800100  0000021c  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .text.libgcc  0000000e  00000206  00000206  0000027a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_1>
   8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_2>
   c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  10:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  18:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  1c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  20:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  24:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  28:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  30:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  34:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  3c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  40:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  44:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  48:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  4c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  54:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  58:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  5c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  60:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  64:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  68:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  6c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  70:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  74:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  78:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  7c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  80:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  84:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>
  88:	0c 94 0a 01 	jmp	0x214	; 0x214 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	00 02       	muls	r16, r16
  92:	1c 00       	.word	0x001c	; ????

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	ec e8       	ldi	r30, 0x8C	; 140
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	19 c0       	rjmp	.+50     	; 0xda <__do_clear_bss+0x8>
  a8:	b7 91       	elpm	r27, Z+
  aa:	a7 91       	elpm	r26, Z+
  ac:	37 91       	elpm	r19, Z+
  ae:	27 91       	elpm	r18, Z+
  b0:	07 91       	elpm	r16, Z+
  b2:	07 fd       	sbrc	r16, 7
  b4:	0e c0       	rjmp	.+28     	; 0xd2 <__do_clear_bss>
  b6:	97 91       	elpm	r25, Z+
  b8:	87 91       	elpm	r24, Z+
  ba:	ef 01       	movw	r28, r30
  bc:	f9 2f       	mov	r31, r25
  be:	e8 2f       	mov	r30, r24
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	07 90       	elpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a2 17       	cp	r26, r18
  c8:	b3 07       	cpc	r27, r19
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0x22>
  cc:	fe 01       	movw	r30, r28
  ce:	1b be       	out	0x3b, r1	; 59
  d0:	04 c0       	rjmp	.+8      	; 0xda <__do_clear_bss+0x8>

000000d2 <__do_clear_bss>:
  d2:	1d 92       	st	X+, r1
  d4:	a2 17       	cp	r26, r18
  d6:	b3 07       	cpc	r27, r19
  d8:	e1 f7       	brne	.-8      	; 0xd2 <__do_clear_bss>
  da:	e3 39       	cpi	r30, 0x93	; 147
  dc:	f4 07       	cpc	r31, r20
  de:	21 f7       	brne	.-56     	; 0xa8 <__do_copy_data+0x8>
  e0:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  e4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>

Disassembly of section .text:

00000214 <__bad_interrupt>:
 214:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

000001e8 <wait>:
clock value is set. This is used by _delay_ms inside
util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	08 c0       	rjmp	.+16     	; 0x1fe <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	ef ec       	ldi	r30, 0xCF	; 207
 1f0:	f7 e0       	ldi	r31, 0x07	; 7
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <wait+0xa>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <wait+0x10>
 1f8:	00 00       	nop
 1fa:	2f 5f       	subi	r18, 0xFF	; 255
 1fc:	3f 4f       	sbci	r19, 0xFF	; 255
 1fe:	28 17       	cp	r18, r24
 200:	39 07       	cpc	r19, r25
 202:	ac f3       	brlt	.-22     	; 0x1ee <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 204:	08 95       	ret

Disassembly of section .text.__vector_1:

000000fc <__vector_1>:
inputs:
outputs:
notes:			Set PORTD.5
Version :    	DMK, Initial code
*******************************************************************/
ISR( INT0_vect ) {
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
	if(led >= 1<<7)
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 112:	80 38       	cpi	r24, 0x80	; 128
 114:	91 05       	cpc	r25, r1
 116:	34 f0       	brlt	.+12     	; 0x124 <__vector_1+0x28>
	{
		led = 1;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	led = led << 1;
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTC = (led);
 138:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 140:	85 bb       	out	0x15, r24	; 21
	
}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

Disassembly of section .text.__vector_2:

00000150 <__vector_2>:
inputs:
outputs:
notes:			Clear PORTD.5
Version :    	DMK, Initial code
*******************************************************************/
ISR( INT1_vect ) {
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
	if(led <= 1)
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 166:	02 97       	sbiw	r24, 0x02	; 2
 168:	34 f4       	brge	.+12     	; 0x176 <__vector_2+0x26>
	{
		led = 1<<7;
 16a:	80 e8       	ldi	r24, 0x80	; 128
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 172:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	led = led >> 1;
 176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17e:	95 95       	asr	r25
 180:	87 95       	ror	r24
 182:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 186:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTC = (led);
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 192:	85 bb       	out	0x15, r24	; 21
	
}
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

Disassembly of section .text.display:

000001a2 <display>:
		}
	}
}

void display(int digit){
	if(digit > -1 && digit < 16)
 1a2:	80 31       	cpi	r24, 0x10	; 16
 1a4:	91 05       	cpc	r25, r1
 1a6:	60 f4       	brcc	.+24     	; 0x1c0 <display+0x1e>
	{
		PORTC = digits[digit];
 1a8:	09 2e       	mov	r0, r25
 1aa:	00 0c       	add	r0, r0
 1ac:	aa 0b       	sbc	r26, r26
 1ae:	84 51       	subi	r24, 0x14	; 20
 1b0:	9f 4f       	sbci	r25, 0xFF	; 255
 1b2:	af 4f       	sbci	r26, 0xFF	; 255
 1b4:	fc 01       	movw	r30, r24
 1b6:	5a 2f       	mov	r21, r26
 1b8:	0e 94 03 01 	call	0x206	; 0x206 <__xload_1>
 1bc:	65 bb       	out	0x15, r22	; 21
 1be:	08 95       	ret
		}else{
		PORTC = digits[0xE];
 1c0:	89 e7       	ldi	r24, 0x79	; 121
 1c2:	85 bb       	out	0x15, r24	; 21
 1c4:	08 95       	ret

Disassembly of section .text.opdracht3:

000001c6 <opdracht3>:
	opdracht3();
	return 1;
}

void opdracht3(){
	DDRC = 0xFF;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	84 bb       	out	0x14, r24	; 20
	while(1){
		for (int i = -1; i < 17; i++)
 1ca:	cf ef       	ldi	r28, 0xFF	; 255
 1cc:	df ef       	ldi	r29, 0xFF	; 255
 1ce:	08 c0       	rjmp	.+16     	; 0x1e0 <opdracht3+0x1a>
		{
			display(i);
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <display>
			wait(500);
 1d6:	84 ef       	ldi	r24, 0xF4	; 244
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <wait>
}

void opdracht3(){
	DDRC = 0xFF;
	while(1){
		for (int i = -1; i < 17; i++)
 1de:	21 96       	adiw	r28, 0x01	; 1
 1e0:	c1 31       	cpi	r28, 0x11	; 17
 1e2:	d1 05       	cpc	r29, r1
 1e4:	ac f3       	brlt	.-22     	; 0x1d0 <opdracht3+0xa>
 1e6:	f1 cf       	rjmp	.-30     	; 0x1ca <opdracht3+0x4>

Disassembly of section .text.main:

00000218 <main>:
	0b01111001, //E
	0b01110001  //F
};

int main( void ) {
	opdracht3();
 218:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <opdracht3>

Disassembly of section .text.libgcc:

00000206 <__xload_1>:
 206:	57 fd       	sbrc	r21, 7
 208:	03 c0       	rjmp	.+6      	; 0x210 <__xload_1+0xa>
 20a:	5b bf       	out	0x3b, r21	; 59
 20c:	67 91       	elpm	r22, Z+
 20e:	08 95       	ret
 210:	60 81       	ld	r22, Z
 212:	08 95       	ret
